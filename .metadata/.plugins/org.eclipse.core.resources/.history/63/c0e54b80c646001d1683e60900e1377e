/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2022 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
uint32_t timer_intrupt = 0;
uint8_t depth_press =0;
#define on 1
#define off 0


uint8_t pg_no = 1;
uint8_t focus_enb = 0;

int8_t sec_pg_cur = 0;
struct scr_2_data
{
	uint8_t fc : 1;
	uint8_t sm : 1;
	uint8_t me : 1;
	uint8_t lr : 1;
};

struct scr_2_data data_scr2 = {0, 0, 0, 0};

enum pos
{
	intensity = 1,
	color,
	sensor,
	lamp,
	endo,
	depth
};

enum key
{
	_prv,
	_nxt,
	_depth,
	_neg,
	_pos
};

struct key_status_reg
{
	volatile uint8_t prv : 1;
	volatile uint8_t nxt : 1;
	volatile uint8_t depth : 1;
	volatile uint8_t pos : 1;
	volatile uint8_t neg : 1;
};

struct gesture_status_reg
{
	uint8_t up : 1;
	uint8_t down : 1;
	uint8_t left : 1;
	uint8_t right : 1;
};

struct interrupt_flag_reg
{
	volatile uint8_t key_flag : 1;
	volatile uint8_t gesture_flag : 1;
	volatile uint8_t screen_flag : 1;
	volatile uint8_t prv_long_press : 1;
	volatile uint8_t depth_long_press : 1;
	volatile uint8_t update_data : 1;
};

struct pos_status_reg
{
	int8_t position_cursor;
	uint16_t key_number : 3;
	uint16_t gesture_direction : 2;
	uint16_t screen_number : 3;
};

struct screen_data_reg
{
	uint8_t intensity : 4;
	uint8_t sensor : 1;
	uint8_t lamp : 1;
	uint8_t endo : 1;
	uint8_t depth : 1;
	int8_t color;
};

enum pos cursor;
struct key_status_reg key_pressed;
struct gesture_status_reg ges_dir;
struct interrupt_flag_reg interrupt_reg;
struct pos_status_reg current_pos = {1, 0, 0, 1};
struct screen_data_reg data_reg = {1, 0, 0, 1, 0, 0};
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
void init_gesture();
uint8_t readGesture();
uint8_t gestureAvailable();
void clr_select();
void clr_data(uint8_t);
/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
 I2C_HandleTypeDef hi2c1;

TIM_HandleTypeDef htim6;

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM6_Init(void);
static void MX_I2C1_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void home_page(void);
void lcd_clear(void);
void lcd_init(void);
void lcd_puts(uint8_t x, uint8_t y, int8_t *string);
void update_screen_data_2(void);

void print_int(int _data)
{
	int8_t buffer[8];
	lcd_clear();
	sprintf(buffer, "%02d", _data);
	lcd_puts(3, 2, buffer); // x = 2, y = 3
}

uint8_t update_key_press()
{
	if (key_pressed.prv)
	{
		current_pos.key_number = _prv;
		key_pressed.prv = 0;
		return _prv;
	}
	else if (key_pressed.nxt)
	{
		key_pressed.nxt = 0;
		current_pos.key_number = _nxt;

		return _nxt;
	}
	else if (key_pressed.depth)
	{
		key_pressed.depth = 0;
		current_pos.key_number = _depth;
		data_reg.depth = !data_reg.depth;
		clr_data(depth);
		clr_select();
//		lcd_puts(3, 10, (int8_t *)">");
		if (data_reg.depth)
			lcd_puts(3, 17, (int8_t *)"ON");
		else
			lcd_puts(3, 17, (int8_t *)"OFF");

		return _depth;
	}
	else if (key_pressed.pos)
	{
		key_pressed.pos = 0;
		current_pos.key_number = _pos;
		return _pos;
	}
	else if (key_pressed.neg)
	{
		key_pressed.neg = 0;
		current_pos.key_number = _neg;
		return _neg;
	}

	return 0;
}

// void long_prv_press()
//{
//	current_pos.position_cursor =  sensor;
//	data_reg.sensor = !data_reg.sensor;
//
// }
void set_data_positive()
{

	if(pg_no == 2)
	{

		switch(sec_pg_cur)
		{
			case 0:
				data_scr2.fc = on;

				break;
			case 1:
				data_scr2.sm = on;
				break;
			case 2:
				data_scr2.me = on;
				break;
			case 3:
				data_scr2.lr = on;
				break;
		}
	}

	else
	{
		switch (current_pos.position_cursor)
		{
		case intensity:
			data_reg.intensity++;
			if (data_reg.intensity >= 10)
				data_reg.intensity = 10;
			break;
		case color:
			data_reg.color++;
			if (data_reg.color > 5)
				data_reg.color = 5;
			break;
		case sensor:
			data_reg.sensor = on;
			break;
		case lamp:
			data_reg.lamp = on;
			break;
		case endo:
			data_reg.endo = on;
			break;
		case depth:
			data_reg.depth = on;
			break;
		}
	}
}

void set_data_negative()
{

	if(pg_no == 2)
	{
		switch(sec_pg_cur)
		{
			case 0:
				data_scr2.fc = off;
				break;
			case 1:
				data_scr2.sm = off;
				break;
			case 2:
				data_scr2.me = off;
				break;
			case 3:
				data_scr2.lr = off;
				break;
		}
	}

	else
	{

	switch (current_pos.position_cursor)
	{
	case intensity:
		data_reg.intensity--;
		if (data_reg.intensity <= 1)
			data_reg.intensity = 1;
		break;
	case color:
		data_reg.color--;
		if (data_reg.color < -5)
			data_reg.color = -5;
		break;
	case sensor:
		data_reg.sensor = off;
		break;
	case lamp:
		data_reg.lamp = off;
		break;
	case endo:
		data_reg.endo = off;
		break;
	case depth:
		data_reg.depth = off;
		break;
	}
	}
}

void update_new_data()
{
	switch (current_pos.key_number)
	{
	case _prv:
		current_pos.position_cursor--;
		if (current_pos.position_cursor == 0)
		{
			lcd_clear();
			lcd_puts(0, 0, (int8_t *)"FOCUS : ");
			lcd_puts(0, 10, (int8_t *)"Disable");
			current_pos.position_cursor = 0;
			pg_no = 2;
			sec_pg_cur = 0;

		}

		if (current_pos.position_cursor < 0)
		{
			if(data_scr2.fc == 0)
			{
				current_pos.position_cursor = 1;
				pg_no = 1;
			}

			if(data_scr2.fc == 1)
			{
				current_pos.position_cursor = 0;
					pg_no = 1;
					sec_pg_cur --;
					if(sec_pg_cur <= 0)
					{
						sec_pg_cur = 0;
					}
			}

		}

		if (current_pos.position_cursor == 6)
		{
			lcd_clear();
			page1_print();
			pg_no = 1;
			sec_pg_cur = 0;
		}

		if (current_pos.position_cursor >= 1 && current_pos.position_cursor < 7)
		{
			pg_no = 1;
			sec_pg_cur = 0;
		}

		break;
	case _nxt:
		current_pos.position_cursor++;
		if (current_pos.position_cursor == 7 )
		{
			lcd_clear();
			lcd_puts(0, 0, (int8_t *)"FOCUS : ");

//			if()
			lcd_puts(0, 10, (int8_t *)"Disable");
			current_pos.position_cursor = 7;
			pg_no = 2;

			if(data_scr2.fc == 0)
			{
				sec_pg_cur = 0;
			}

			if(data_scr2.fc == 1)
			{
				sec_pg_cur++;
				if(sec_pg_cur > 3)
				{
					sec_pg_cur = 3;
				}
			}


		}
		if (current_pos.position_cursor > 7 )
		{
			current_pos.position_cursor = 7;
			pg_no = 2;

			if(data_scr2.fc == 0)
			{
				sec_pg_cur = 0;
			}

			if(data_scr2.fc == 1)
			{
				sec_pg_cur++;
				if(sec_pg_cur > 3)
				{
					sec_pg_cur = 3;
				}
			}


		}

		if (current_pos.position_cursor == 1)
		{
			lcd_clear();
			page1_print();
			pg_no = 1;

			sec_pg_cur = 0;
		}

		if (current_pos.position_cursor >= 1 && current_pos.position_cursor < 7)
		{

			pg_no = 1;
			sec_pg_cur = 0;
		}

		break;

	case _depth:
//		data_reg.depth = !data_reg.depth;
		if (data_reg.depth)
		{
			current_pos.position_cursor = intensity;
			data_reg.intensity = 10;
			depth_press = 1;
//			data_reg.depth = on;
		}

		else
		{
			current_pos.position_cursor = intensity;
			data_reg.intensity = 1;
//			data_reg.depth = off;
		}
		break;
	case _pos:
		set_data_positive();

//			current_pos.position_cursor == 7
		break;
	case _neg:
		set_data_negative();
		break;

	}
}



void update_screen_data_2()
{
	char buffer[3];
	if(data_scr2.fc == 1)
	{
//			lcd_puts(1, 0, (int8_t *)"FOCUS  : Enable");
			lcd_puts(0, 12, (int8_t *)"Enable");
			lcd_puts(0, 0, (int8_t *)">");
			lcd_puts(1, 2, (int8_t *)"SMALL  : ");
			lcd_puts(2, 2, (int8_t *)"Medium : ");
			lcd_puts(3, 2, (int8_t *)"Wide   : ");

			switch (sec_pg_cur)
			{
			case 0:
//				lcd_puts(0, 10, (int8_t *)" ");
//				lcd_puts(0, 11, (int8_t *)" ");
//				lcd_puts(0, 16, (int8_t *)" ");


				lcd_puts(0, 0, (int8_t *)">");
				lcd_puts(1, 0, (int8_t *)" ");
				lcd_puts(2, 0, (int8_t *)" ");
				lcd_puts(3, 0, (int8_t *)" ");
		//		send_cmd(data_reg.color,color);
				if (data_scr2.fc)
				{
					lcd_puts(0, 10, (int8_t *)"Enable");
					lcd_puts(0, 16, (int8_t *)"  ");
				}
				else
					lcd_puts(0, 10, (int8_t *)"Disable");
			case 1:
//				lcd_puts(0, 10, (int8_t *)" ");
//				lcd_puts(0, 11, (int8_t *)" ");
//				lcd_puts(0, 16, (int8_t *)" ");


				lcd_puts(0, 0, (int8_t *)" ");
				lcd_puts(1, 0, (int8_t *)">");
				lcd_puts(2, 0, (int8_t *)" ");
				lcd_puts(3, 0, (int8_t *)" ");
		//		send_cmd(data_reg.color,color);
				if (data_scr2.sm)
					lcd_puts(1, 10, (int8_t *)"ON");
				else
					lcd_puts(1, 10, (int8_t *)"OFF");
			case 2:
				lcd_puts(0, 0, (int8_t *)" ");
				lcd_puts(1, 0, (int8_t *)" ");
				lcd_puts(2, 0, (int8_t *)">");
				lcd_puts(3, 0, (int8_t *)" ");
		//		send_cmd(data_reg.color,color);
				if (data_scr2.me)
					lcd_puts(2, 10, (int8_t *)"ON");
				else
					lcd_puts(2, 10, (int8_t *)"OFF");
			case 3:
				lcd_puts(0, 0, (int8_t *)" ");
				lcd_puts(1, 0, (int8_t *)" ");
				lcd_puts(2, 0, (int8_t *)" ");
				lcd_puts(3, 0, (int8_t *)">");
		//		send_cmd(data_reg.color,color);
				if (data_scr2.lr)
					lcd_puts(3, 10, (int8_t *)"ON");
				else
					lcd_puts(3, 10, (int8_t *)"OFF");

			}

	}
	else
	{
			lcd_clear();
			lcd_puts(0, 0, (int8_t *)">");
			lcd_puts(0, 1, (int8_t *)"FOCUS  : Disable");
//			lcd_puts(1, 1, (int8_t *)"         ");
//			lcd_puts(2, 1, (int8_t *)"         ");
//			lcd_puts(3, 1, (int8_t *)"         ");
	}
}

void update_screen_data()
{
	char buffer[3];

	switch (current_pos.position_cursor)
	{
	case intensity:
		if(depth_press)
		{
//			sprintf(buffer, "%02d", data_reg.intensity);
			lcd_puts(1, 7, (int8_t *)"MAX");
			depth_press = 0;
		}
		else
		{
			clr_data(intensity);
			sprintf(buffer, "%02d", data_reg.intensity);
			lcd_puts(1, 7, (int8_t *)buffer);
		}

		clr_select();
		lcd_puts(1, 0, (int8_t *)">");
		send_cmd(data_reg.intensity,intensity);
		break;

	case color:
		sprintf(buffer, "%02d", data_reg.color);
		lcd_puts(2, 7, (int8_t *)buffer);
		clr_select();
		lcd_puts(2, 0, (int8_t *)">");
		send_cmd(data_reg.color,color);
		break;

	case sensor:
		clr_data(sensor);
		clr_select();
		lcd_puts(3, 0, (int8_t *)">");
		send_cmd(data_reg.sensor,sensor);
		if (data_reg.sensor)
			lcd_puts(3, 7, (int8_t *)"ON");
		else
			lcd_puts(3, 7, (int8_t *)"OFF");
		break;

	case lamp:
		clr_data(lamp);
		clr_select();
		lcd_puts(1, 10, (int8_t *)">");
		send_cmd(data_reg.lamp,lamp);
		if (data_reg.lamp)
			lcd_puts(1, 17, (int8_t *)"ON");
		else
			lcd_puts(1, 17, (int8_t *)"OFF");
		break;

	case endo:
		clr_data(endo);
		clr_select();
		lcd_puts(2, 10, (int8_t *)">");
		send_cmd(data_reg.lamp,lamp);
		if (data_reg.endo)
			lcd_puts(2, 17, (int8_t *)"ON");
		else
			lcd_puts(2, 17, (int8_t *)"OFF");
		break;

	case depth:
		clr_data(depth);
		clr_select();
		lcd_puts(3, 10, (int8_t *)">");
		send_cmd(data_reg.depth,depth);
		if (data_reg.depth)
			lcd_puts(3, 17, (int8_t *)"ON");
		else
			lcd_puts(3, 17, (int8_t *)"OFF");
		break;
	}
}

void send_cmd(int8_t x, int8_t mode)
{
	uint8_t data[5];
	data[0] = '@';
	data[4] = '#';
	switch (mode)
	{
	case intensity:
		data[1] = 'I';
		data[2] = '0';
		data[3] = 48 + x;
		HAL_UART_Transmit(&huart1, &data[0], 5, 100);
		break;
	case color:
		if (x > 0)
		{
			data[1] = 'C';
			data[2] = '+';
			data[3] = 48 + x;
		}
		else
		{
			data[1] = 'C';
			data[2] = '-';
			data[3] = (48 + (x) * (-1));
		}
		HAL_UART_Transmit(&huart1, &data[0], 5, 100);
		break;
	case sensor:
		// data[1] = 'I';data[2] = '0';data[3] = 48+x;
		// HAL_UART_Transmit(&huart1, &data[0], 5, 100);
		break;

	case lamp:
		data[1] = 'L';
		data[2] = '_';
		data[3] = 48 + x;
		HAL_UART_Transmit(&huart1, &data[0], 5, 100);
		break;
	case endo:
		data[1] = 'E';
		data[2] = '_';
		data[3] = 48 + x;
		HAL_UART_Transmit(&huart1, &data[0], 5, 100);
		break;
	case depth:
		data[1] = 'D';
		data[2] = '_';
		data[3] = 48 + x;
		HAL_UART_Transmit(&huart1, &data[0], 5, 100);
		break;
	}
}



void page1_print(void)
{
	char buffer[3];
	lcd_puts(0, 0, (int8_t *)"______ COGNATE _____");
	lcd_puts(1, 1, (int8_t *)"INTEN");
	lcd_puts(2, 1, (int8_t *)"COLOR");
	lcd_puts(3, 1, (int8_t *)"SENSR");
	lcd_puts(1, 11, (int8_t *)"LAMP");
	lcd_puts(2, 11, (int8_t *)"ENDO");
	lcd_puts(3, 11, (int8_t *)"DEPTH");

//	lcd_puts(1, 0, (int8_t *)">");

	sprintf(buffer, "%02d", data_reg.intensity);
	lcd_puts(1, 7, (int8_t *)buffer);

	sprintf(buffer, "%02d", data_reg.color);
	lcd_puts(2, 7, (int8_t *)buffer);

	clr_data(sensor);
	if (data_reg.sensor)
		lcd_puts(3, 7, (int8_t *)"ON");
	else
		lcd_puts(3, 7, (int8_t *)"OFF");

	clr_data(lamp);
	if (data_reg.lamp)
		lcd_puts(1, 17, (int8_t *)"ON");
	else
		lcd_puts(1, 17, (int8_t *)"OFF");

	clr_data(endo);
	if (data_reg.endo)
		lcd_puts(2, 17, (int8_t *)"ON");
	else
		lcd_puts(2, 17, (int8_t *)"OFF");

	clr_data(depth);
	if (data_reg.depth)
		lcd_puts(3, 17, (int8_t *)"ON");
	else
		lcd_puts(3, 17, (int8_t *)"OFF");

	lcd_puts(1, 0, (int8_t *)">");
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{

	static uint32_t _time;

	if ((HAL_GetTick() - _time) >= 500)
	{

		if (GPIO_Pin == S_PRV_Pin)
		{

			key_pressed.prv = 1;
			interrupt_reg.key_flag = 1;
		}

		else if (GPIO_Pin == S_NEXT_Pin)
		{

			key_pressed.nxt = 1;
			interrupt_reg.key_flag = 1;
		}

		else if (GPIO_Pin == DEPTH_Pin)
		{

			key_pressed.depth = 1;
			interrupt_reg.key_flag = 1;
		}

		else if (GPIO_Pin == CHANGE_N_Pin)
		{

			key_pressed.neg = 1;
			interrupt_reg.key_flag = 1;
		}

		else if (GPIO_Pin == CHANGE_P_Pin)
		{

			key_pressed.pos = 1;
			interrupt_reg.key_flag = 1;
		}

		else if (GPIO_Pin == I2C_INT_Pin)
		{
			//			interrupt_reg.key_flag = 1;
			//			key_pressed.prv =1;
		}

		_time = HAL_GetTick();
	}


}

void beep_sound()
{
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
	HAL_Delay(35);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
	HAL_Delay(35);
	//	beep_sound_flag = 0;
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
	//	current_pos.position_cursor = 1;
	//	data_reg = {1,0,0,1,0,0};
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM6_Init();
  MX_I2C1_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim6);
	//	lcd_init();

	//	HAL_Delay(1000);
	//	home_page();
	//	HAL_Delay(1000);
	//	lcd_clear();

	HAL_Delay(1000);
	lcd_init();
	HAL_Delay(1000);
	home_page();
	HAL_Delay(1000);
	lcd_clear();
	page1_print();
	HAL_Delay(1000);
	//  	data_reg.sensor = 1;
	init_gesture();
	HAL_Delay(1000);
	uint8_t sns_status = 0;
	uint8_t page_change_flag = 0;

	uint32_t temp_time = HAL_GetTick();

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */



		if (interrupt_reg.key_flag)
		{

			if (HAL_GPIO_ReadPin(S_PRV_GPIO_Port, S_PRV_Pin) == 0)
			{
				temp_time = HAL_GetTick();
				//				HAL_Delay(1000);
				while ((HAL_GetTick() - temp_time) >= 2000)  // error
				{
					if (HAL_GPIO_ReadPin(S_PRV_GPIO_Port, S_PRV_Pin))
					{
						interrupt_reg.key_flag = 1;
						interrupt_reg.prv_long_press = 0;
						break;
					}
					interrupt_reg.key_flag = 0;
					interrupt_reg.prv_long_press = 1;
				}
			}

			if (HAL_GPIO_ReadPin(DEPTH_GPIO_Port, DEPTH_Pin) == 0)
			{
				temp_time = HAL_GetTick();
				//				HAL_Delay(1000);
				while ((HAL_GetTick() - temp_time) <= 2000)
				{
					if (HAL_GPIO_ReadPin(DEPTH_GPIO_Port, DEPTH_Pin))
					{
						interrupt_reg.key_flag = 1;
						interrupt_reg.depth_long_press = 0;
						break;
					}
					interrupt_reg.key_flag = 0;
					interrupt_reg.depth_long_press = 1;
				}
			}

			if (interrupt_reg.key_flag)
			{
				beep_sound();
				update_key_press();
				interrupt_reg.key_flag = 0;
				interrupt_reg.update_data = 1;
			}

			if (interrupt_reg.prv_long_press)
			{
				beep_sound();
				interrupt_reg.prv_long_press = 0;
				key_pressed.prv = 0;
				//				interrupt_reg.update_data = 0;
				data_reg.sensor = !data_reg.sensor;
				clr_data(sensor);
				if (data_reg.sensor)
					lcd_puts(3, 7, (int8_t *)"ON");
				else
					lcd_puts(3, 7, (int8_t *)"OFF");
				sns_status = 1;
			}

			if (interrupt_reg.depth_long_press)
			{
//				lcd_puts(0, 0, (int8_t *)"...");
				page_change_flag = 1;
				beep_sound();
				current_pos.key_number = _depth;
				interrupt_reg.depth_long_press = 0;
				key_pressed.depth = 0;
				interrupt_reg.key_flag =0;
//				interrupt_reg.update_data = 1;
			}
			//			else if (interrupt_reg.gesture_flag)
			//			{
			//				beep_sound();
			//				interrupt_reg.gesture_flag = 0;
			//				interrupt_reg.update_data = 1;
			//			}
		}

		if (data_reg.sensor)
		{
			HAL_Delay(100);
			if (gestureAvailable())
			{
				uint8_t gesture = readGesture();
				switch (gesture)
				{
				case 0:
					beep_sound();
					key_pressed.prv = 1;
					update_key_press();
					interrupt_reg.update_data = 1;
					break;

				case 1:
					beep_sound();
					key_pressed.nxt = 1;
					update_key_press();
					interrupt_reg.update_data = 1;
					break;

				case 2:
					beep_sound();
					key_pressed.neg = 1;
					update_key_press();
					interrupt_reg.update_data = 1;
					break;

				case 3:
					beep_sound();
					key_pressed.pos = 1;
					update_key_press();
					interrupt_reg.update_data = 1;
					break;

				default:
					break;
				}
			}
		}

		if (interrupt_reg.update_data)
		{
			update_new_data();

			if(pg_no == 1)
			{
				update_screen_data();
			}
			else
			{
			 update_screen_data_2();
			}
			interrupt_reg.update_data = 0;
		}

		if (page_change_flag)
		{
			clock_page();
			Total_Time_Print(timer_intrupt);
			HAL_Delay(2000);
			lcd_clear();
			page1_print();
			page_change_flag = 0;
			interrupt_reg.update_data = 0;
			interrupt_reg.key_flag =0;
		}

//		if (page_change_flag)
//		{
//			clock_page();
//			Total_Time_Print(timer_intrupt);
//			HAL_Delay(2000);
//			lcd_clear();
//			page1_print();
//			page_change_flag = 0;
//			interrupt_reg.update_data = 0;
//			interrupt_reg.key_flag =0;
//		}
	}
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.Timing = 0x0000020B;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
  htim6.Init.Prescaler = 32000-1;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 1000-1;
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 9600;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D4_Pin|D5_Pin|D6_Pin|D7_Pin
                          |E_Pin|RS_Pin|BUZZER_Pin|PA7_Pin
                          |LED2_Pin|LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PB0_Pin|GPIO_PIN_1|PB2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           E_Pin RS_Pin BUZZER_Pin PA7_Pin
                           LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
                          |E_Pin|RS_Pin|BUZZER_Pin|PA7_Pin
                          |LED2_Pin|LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PB0_Pin PB1 PB2_Pin PB10 */
  GPIO_InitStruct.Pin = PB0_Pin|GPIO_PIN_1|PB2_Pin|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : S_PRV_Pin S_NEXT_Pin DEPTH_Pin IR_N_Pin
                           CHANGE_N_Pin */
  GPIO_InitStruct.Pin = S_PRV_Pin|S_NEXT_Pin|DEPTH_Pin|IR_N_Pin
                          |CHANGE_N_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : CHANGE_P_Pin */
  GPIO_InitStruct.Pin = CHANGE_P_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(CHANGE_P_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : I2C_INT_Pin */
  GPIO_InitStruct.Pin = I2C_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(I2C_INT_GPIO_Port, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{
	}
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	   ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */







//void second_screen()
//{
//		char buffer[3];
////		lcd_puts(0, 0, (int8_t *)"______ COGNATE _____");
//		lcd_puts(1, 1, (int8_t *)"FOCUS");
//		lcd_puts(2, 1, (int8_t *)"SMALL");
//		lcd_puts(3, 1, (int8_t *)"Medium");
//		lcd_puts(1, 11, (int8_t *)"Wide");
//
//
//		lcd_puts(1, 8, (int8_t *)":");
//		lcd_puts(2, 8, (int8_t *)":");
//		lcd_puts(3, 8, (int8_t *)":");
//		lcd_puts(4, 8, (int8_t *)":");
//
//
//	//	lcd_puts(1, 0, (int8_t *)">");
//
//
//
//		clr_data(sensor);
//		if (data_reg.sensor)
//			lcd_puts(3, 7, (int8_t *)"ON");
//		else
//			lcd_puts(3, 7, (int8_t *)"OFF");
//
//		clr_data(lamp);
//		if (data_reg.lamp)
//			lcd_puts(1, 17, (int8_t *)"ON");
//
//		else
//			lcd_puts(1, 17, (int8_t *)"OFF");
//
//		clr_data(endo);
//		if (data_reg.endo)
//			lcd_puts(2, 17, (int8_t *)"ON");
//		else
//			lcd_puts(2, 17, (int8_t *)"OFF");
//
//		clr_data(depth);
//		if (data_reg.depth)
//			lcd_puts(3, 17, (int8_t *)"ON");
//		else
//			lcd_puts(3, 17, (int8_t *)"OFF");
//
//		lcd_puts(1, 0, (int8_t *)">");
//
//
//}
