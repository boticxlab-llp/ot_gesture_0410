
ot_gesture_updated.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a9c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000029c  08005b5c  08005b5c  00015b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005df8  08005df8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08005df8  08005df8  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005df8  08005df8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005df8  08005df8  00015df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005dfc  08005dfc  00015dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08005e00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  2000007c  08005e7c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f8  08005e7c  000201f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011b5a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026bd  00000000  00000000  00031bfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f98  00000000  00000000  000342c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea0  00000000  00000000  00035258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011635  00000000  00000000  000360f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000134d9  00000000  00000000  0004772d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00067788  00000000  00000000  0005ac06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c238e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bf0  00000000  00000000  000c23e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000007c 	.word	0x2000007c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005b44 	.word	0x08005b44

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000080 	.word	0x20000080
 8000104:	08005b44 	.word	0x08005b44

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <init_gesture>:
int _gestureDirInY = 0;
int _gestureSensitivity;
// _detectedGesture = GESTURE_NONE;

uint8_t init_gesture()
{
 8000234:	b590      	push	{r4, r7, lr}
 8000236:	b083      	sub	sp, #12
 8000238:	af00      	add	r7, sp, #0
	uint8_t temp;
	// verify device active
	temp = read8(APDS9960_ID);
 800023a:	1dfc      	adds	r4, r7, #7
 800023c:	2092      	movs	r0, #146	; 0x92
 800023e:	f000 fa65 	bl	800070c <read8>
 8000242:	0003      	movs	r3, r0
 8000244:	7023      	strb	r3, [r4, #0]
	if (temp != APDS9960_ID_1)
 8000246:	1dfb      	adds	r3, r7, #7
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	2bab      	cmp	r3, #171	; 0xab
 800024c:	d001      	beq.n	8000252 <init_gesture+0x1e>
	{
		return false;
 800024e:	2300      	movs	r3, #0
 8000250:	e0a7      	b.n	80003a2 <init_gesture+0x16e>
	}
	// Disable everything
	if (!(write8(APDS9960_ENABLE, 0x00)))
 8000252:	2100      	movs	r1, #0
 8000254:	2080      	movs	r0, #128	; 0x80
 8000256:	f000 fa33 	bl	80006c0 <write8>
 800025a:	1e03      	subs	r3, r0, #0
 800025c:	d101      	bne.n	8000262 <init_gesture+0x2e>
	{
		return false;
 800025e:	2300      	movs	r3, #0
 8000260:	e09f      	b.n	80003a2 <init_gesture+0x16e>
	}

	proximityEnabled = 0;
 8000262:	4b52      	ldr	r3, [pc, #328]	; (80003ac <init_gesture+0x178>)
 8000264:	2200      	movs	r2, #0
 8000266:	701a      	strb	r2, [r3, #0]
	gesture_enable = 0;
 8000268:	4b51      	ldr	r3, [pc, #324]	; (80003b0 <init_gesture+0x17c>)
 800026a:	2200      	movs	r2, #0
 800026c:	701a      	strb	r2, [r3, #0]
	// Upon power up, the wait time register is set to 0xFF.
	if (!(write8(APDS9960_WTIME, 0xFF)))
 800026e:	21ff      	movs	r1, #255	; 0xff
 8000270:	2083      	movs	r0, #131	; 0x83
 8000272:	f000 fa25 	bl	80006c0 <write8>
 8000276:	1e03      	subs	r3, r0, #0
 8000278:	d101      	bne.n	800027e <init_gesture+0x4a>
	{
		return false;
 800027a:	2300      	movs	r3, #0
 800027c:	e091      	b.n	80003a2 <init_gesture+0x16e>
  time the LDR pin is sinking current during a gesture pulse
  2- 16μs
  Gesture Pulses - 8
  */
	// 16us, 16 pulses // default is: 0x40 = 8us, 1 pulse
	if (!(write8(APDS9960_GPULSE, 0x8F)))
 800027e:	218f      	movs	r1, #143	; 0x8f
 8000280:	20a6      	movs	r0, #166	; 0xa6
 8000282:	f000 fa1d 	bl	80006c0 <write8>
 8000286:	1e03      	subs	r3, r0, #0
 8000288:	d101      	bne.n	800028e <init_gesture+0x5a>
	{
		return false;
 800028a:	2300      	movs	r3, #0
 800028c:	e089      	b.n	80003a2 <init_gesture+0x16e>
	}

	/* The proximity pulse count register bits set the number of pulses to be output on the LDR pin.	*/

	// 16us, 16 pulses // default is: 0x40 = 8us, 1 pulse
	if (!(write8(APDS9960_PPULSE, 0x8F)))
 800028e:	218f      	movs	r1, #143	; 0x8f
 8000290:	208e      	movs	r0, #142	; 0x8e
 8000292:	f000 fa15 	bl	80006c0 <write8>
 8000296:	1e03      	subs	r3, r0, #0
 8000298:	d101      	bne.n	800029e <init_gesture+0x6a>
	{
		return false;
 800029a:	2300      	movs	r3, #0
 800029c:	e081      	b.n	80003a2 <init_gesture+0x16e>
	}

	// setGestureIntEnable

	temp = read8(APDS9960_GCONF4); // READ CONF4
 800029e:	1dfc      	adds	r4, r7, #7
 80002a0:	20ab      	movs	r0, #171	; 0xab
 80002a2:	f000 fa33 	bl	800070c <read8>
 80002a6:	0003      	movs	r3, r0
 80002a8:	7023      	strb	r3, [r4, #0]
	temp |= 0x02;
 80002aa:	1dfb      	adds	r3, r7, #7
 80002ac:	1dfa      	adds	r2, r7, #7
 80002ae:	7812      	ldrb	r2, [r2, #0]
 80002b0:	2102      	movs	r1, #2
 80002b2:	430a      	orrs	r2, r1
 80002b4:	701a      	strb	r2, [r3, #0]
	write8(APDS9960_GCONF4, temp); // // wite CONF4
 80002b6:	1dfb      	adds	r3, r7, #7
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	0019      	movs	r1, r3
 80002bc:	20ab      	movs	r0, #171	; 0xab
 80002be:	f000 f9ff 	bl	80006c0 <write8>

	// setGestureMode
	temp = read8(APDS9960_GCONF4); // READ CONF4
 80002c2:	1dfc      	adds	r4, r7, #7
 80002c4:	20ab      	movs	r0, #171	; 0xab
 80002c6:	f000 fa21 	bl	800070c <read8>
 80002ca:	0003      	movs	r3, r0
 80002cc:	7023      	strb	r3, [r4, #0]
	temp |= 0x01;
 80002ce:	1dfb      	adds	r3, r7, #7
 80002d0:	1dfa      	adds	r2, r7, #7
 80002d2:	7812      	ldrb	r2, [r2, #0]
 80002d4:	2101      	movs	r1, #1
 80002d6:	430a      	orrs	r2, r1
 80002d8:	701a      	strb	r2, [r3, #0]
	write8(APDS9960_GCONF4, temp); // // wite CONF4
 80002da:	1dfb      	adds	r3, r7, #7
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	0019      	movs	r1, r3
 80002e0:	20ab      	movs	r0, #171	; 0xab
 80002e2:	f000 f9ed 	bl	80006c0 <write8>
	gesture_enable = 1;
 80002e6:	4b32      	ldr	r3, [pc, #200]	; (80003b0 <init_gesture+0x17c>)
 80002e8:	2201      	movs	r2, #1
 80002ea:	701a      	strb	r2, [r3, #0]

	// enablePower
	temp = read8(APDS9960_ENABLE); // READ APDS9960_ENABLE
 80002ec:	1dfc      	adds	r4, r7, #7
 80002ee:	2080      	movs	r0, #128	; 0x80
 80002f0:	f000 fa0c 	bl	800070c <read8>
 80002f4:	0003      	movs	r3, r0
 80002f6:	7023      	strb	r3, [r4, #0]
	temp |= 0x01;
 80002f8:	1dfb      	adds	r3, r7, #7
 80002fa:	1dfa      	adds	r2, r7, #7
 80002fc:	7812      	ldrb	r2, [r2, #0]
 80002fe:	2101      	movs	r1, #1
 8000300:	430a      	orrs	r2, r1
 8000302:	701a      	strb	r2, [r3, #0]
	write8(APDS9960_ENABLE, temp); // // wite APDS9960_ENABLE
 8000304:	1dfb      	adds	r3, r7, #7
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	0019      	movs	r1, r3
 800030a:	2080      	movs	r0, #128	; 0x80
 800030c:	f000 f9d8 	bl	80006c0 <write8>

	// enableWait
	temp = read8(APDS9960_ENABLE); // READ APDS9960_ENABLE
 8000310:	1dfc      	adds	r4, r7, #7
 8000312:	2080      	movs	r0, #128	; 0x80
 8000314:	f000 f9fa 	bl	800070c <read8>
 8000318:	0003      	movs	r3, r0
 800031a:	7023      	strb	r3, [r4, #0]
	temp |= 0x68;
 800031c:	1dfb      	adds	r3, r7, #7
 800031e:	1dfa      	adds	r2, r7, #7
 8000320:	7812      	ldrb	r2, [r2, #0]
 8000322:	2168      	movs	r1, #104	; 0x68
 8000324:	430a      	orrs	r2, r1
 8000326:	701a      	strb	r2, [r3, #0]
	write8(APDS9960_ENABLE, temp); // // wite APDS9960_ENABLE
 8000328:	1dfb      	adds	r3, r7, #7
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	0019      	movs	r1, r3
 800032e:	2080      	movs	r0, #128	; 0x80
 8000330:	f000 f9c6 	bl	80006c0 <write8>
	temp = read8(APDS9960_ENABLE); // READ APDS9960_ENABLE
 8000334:	1dfc      	adds	r4, r7, #7
 8000336:	2080      	movs	r0, #128	; 0x80
 8000338:	f000 f9e8 	bl	800070c <read8>
 800033c:	0003      	movs	r3, r0
 800033e:	7023      	strb	r3, [r4, #0]
	// ADC Integration Time Register (0x81)
	// set ADC integration time to 10 ms
	temp = 256 - (10 / 2.78);
 8000340:	1dfb      	adds	r3, r7, #7
 8000342:	22fc      	movs	r2, #252	; 0xfc
 8000344:	701a      	strb	r2, [r3, #0]
	write8(APDS9960_ATIME, temp); // // wite APDS9960_ATIME
 8000346:	1dfb      	adds	r3, r7, #7
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	0019      	movs	r1, r3
 800034c:	2081      	movs	r0, #129	; 0x81
 800034e:	f000 f9b7 	bl	80006c0 <write8>

	// set ADC gain 4x (0x00 => 1x, 0x01 => 4x, 0x02 => 16x, 0x03 => 64x)
	write8(APDS9960_ATIME, 0x02); // // wite APDS9960_ATIME
 8000352:	2102      	movs	r1, #2
 8000354:	2081      	movs	r0, #129	; 0x81
 8000356:	f000 f9b3 	bl	80006c0 <write8>

	if (sensitivity > 100)
 800035a:	4b16      	ldr	r3, [pc, #88]	; (80003b4 <init_gesture+0x180>)
 800035c:	781b      	ldrb	r3, [r3, #0]
 800035e:	2b64      	cmp	r3, #100	; 0x64
 8000360:	d902      	bls.n	8000368 <init_gesture+0x134>
	{
		sensitivity = 100;
 8000362:	4b14      	ldr	r3, [pc, #80]	; (80003b4 <init_gesture+0x180>)
 8000364:	2264      	movs	r2, #100	; 0x64
 8000366:	701a      	strb	r2, [r3, #0]
	}
	_gestureSensitivity = 100 - sensitivity;
 8000368:	4b12      	ldr	r3, [pc, #72]	; (80003b4 <init_gesture+0x180>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	001a      	movs	r2, r3
 800036e:	2364      	movs	r3, #100	; 0x64
 8000370:	1a9a      	subs	r2, r3, r2
 8000372:	4b11      	ldr	r3, [pc, #68]	; (80003b8 <init_gesture+0x184>)
 8000374:	601a      	str	r2, [r3, #0]

	HAL_Delay(10);
 8000376:	200a      	movs	r0, #10
 8000378:	f002 faea 	bl	8002950 <HAL_Delay>

	// enablePower
	temp = read8(APDS9960_ENABLE); // READ APDS9960_ENABLE
 800037c:	1dfc      	adds	r4, r7, #7
 800037e:	2080      	movs	r0, #128	; 0x80
 8000380:	f000 f9c4 	bl	800070c <read8>
 8000384:	0003      	movs	r3, r0
 8000386:	7023      	strb	r3, [r4, #0]
	temp |= 0x01;
 8000388:	1dfb      	adds	r3, r7, #7
 800038a:	1dfa      	adds	r2, r7, #7
 800038c:	7812      	ldrb	r2, [r2, #0]
 800038e:	2101      	movs	r1, #1
 8000390:	430a      	orrs	r2, r1
 8000392:	701a      	strb	r2, [r3, #0]
	write8(APDS9960_ENABLE, temp); // // wite APDS9960_ENABLE
 8000394:	1dfb      	adds	r3, r7, #7
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	0019      	movs	r1, r3
 800039a:	2080      	movs	r0, #128	; 0x80
 800039c:	f000 f990 	bl	80006c0 <write8>

	return true;
 80003a0:	2301      	movs	r3, #1
}
 80003a2:	0018      	movs	r0, r3
 80003a4:	46bd      	mov	sp, r7
 80003a6:	b003      	add	sp, #12
 80003a8:	bd90      	pop	{r4, r7, pc}
 80003aa:	46c0      	nop			; (mov r8, r8)
 80003ac:	20000099 	.word	0x20000099
 80003b0:	20000098 	.word	0x20000098
 80003b4:	20000002 	.word	0x20000002
 80003b8:	200000ac 	.word	0x200000ac

080003bc <gestureFIFOAvailable>:

uint8_t gestureFIFOAvailable()
{
 80003bc:	b590      	push	{r4, r7, lr}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0
	uint8_t _bytes;
	_bytes = read8(APDS9960_GSTATUS); // operational condition of the gesture state machine.
 80003c2:	1dfc      	adds	r4, r7, #7
 80003c4:	20af      	movs	r0, #175	; 0xaf
 80003c6:	f000 f9a1 	bl	800070c <read8>
 80003ca:	0003      	movs	r3, r0
 80003cc:	7023      	strb	r3, [r4, #0]
	if ((_bytes & 0x01) == 0x00)
 80003ce:	1dfb      	adds	r3, r7, #7
 80003d0:	781b      	ldrb	r3, [r3, #0]
 80003d2:	2201      	movs	r2, #1
 80003d4:	4013      	ands	r3, r2
 80003d6:	d101      	bne.n	80003dc <gestureFIFOAvailable+0x20>
	{
		return false;
 80003d8:	2300      	movs	r3, #0
 80003da:	e00d      	b.n	80003f8 <gestureFIFOAvailable+0x3c>
	}

	_bytes = read8(APDS9960_GFLVL); // number of datasets that are currently available in the FIFO for read.
 80003dc:	1dfc      	adds	r4, r7, #7
 80003de:	20ae      	movs	r0, #174	; 0xae
 80003e0:	f000 f994 	bl	800070c <read8>
 80003e4:	0003      	movs	r3, r0
 80003e6:	7023      	strb	r3, [r4, #0]
	if (_bytes == 0x00)
 80003e8:	1dfb      	adds	r3, r7, #7
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d101      	bne.n	80003f4 <gestureFIFOAvailable+0x38>
	{
		return false;
 80003f0:	2300      	movs	r3, #0
 80003f2:	e001      	b.n	80003f8 <gestureFIFOAvailable+0x3c>
	}

	return _bytes;
 80003f4:	1dfb      	adds	r3, r7, #7
 80003f6:	781b      	ldrb	r3, [r3, #0]
}
 80003f8:	0018      	movs	r0, r3
 80003fa:	46bd      	mov	sp, r7
 80003fc:	b003      	add	sp, #12
 80003fe:	bd90      	pop	{r4, r7, pc}

08000400 <readGesture>:

uint8_t readGesture()
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
	uint8_t gesture = _detectedGesture;
 8000406:	1dfb      	adds	r3, r7, #7
 8000408:	4a05      	ldr	r2, [pc, #20]	; (8000420 <readGesture+0x20>)
 800040a:	7812      	ldrb	r2, [r2, #0]
 800040c:	701a      	strb	r2, [r3, #0]

	_detectedGesture = GESTURE_NONE;
 800040e:	4b04      	ldr	r3, [pc, #16]	; (8000420 <readGesture+0x20>)
 8000410:	22ff      	movs	r2, #255	; 0xff
 8000412:	701a      	strb	r2, [r3, #0]

	return gesture;
 8000414:	1dfb      	adds	r3, r7, #7
 8000416:	781b      	ldrb	r3, [r3, #0]
}
 8000418:	0018      	movs	r0, r3
 800041a:	46bd      	mov	sp, r7
 800041c:	b002      	add	sp, #8
 800041e:	bd80      	pop	{r7, pc}
 8000420:	2000009a 	.word	0x2000009a

08000424 <handleGesture>:

int32_t handleGesture()
{
 8000424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000426:	b0ab      	sub	sp, #172	; 0xac
 8000428:	af04      	add	r7, sp, #16
	const uint8_t gestureThreshold = 40;
 800042a:	2393      	movs	r3, #147	; 0x93
 800042c:	18fb      	adds	r3, r7, r3
 800042e:	2228      	movs	r2, #40	; 0x28
 8000430:	701a      	strb	r2, [r3, #0]

	while (1)
	{

		uint8_t available = gestureFIFOAvailable();
 8000432:	2592      	movs	r5, #146	; 0x92
 8000434:	197c      	adds	r4, r7, r5
 8000436:	f7ff ffc1 	bl	80003bc <gestureFIFOAvailable>
 800043a:	0003      	movs	r3, r0
 800043c:	7023      	strb	r3, [r4, #0]
		if (available <= 0)
 800043e:	197b      	adds	r3, r7, r5
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d101      	bne.n	800044a <handleGesture+0x26>
			return 0;
 8000446:	2300      	movs	r3, #0
 8000448:	e0da      	b.n	8000600 <handleGesture+0x1dc>
		uint8_t fifo_data[128];

		//		uint8_t ret;
		if ((HAL_I2C_Mem_Read(&hi2c1, APDS9960_I2C_ADDR, APDS9960_GFIFO_U, 0x01, &fifo_data[0], (available * 4), 10)) != HAL_OK)
 800044a:	4b6f      	ldr	r3, [pc, #444]	; (8000608 <handleGesture+0x1e4>)
 800044c:	8819      	ldrh	r1, [r3, #0]
 800044e:	2392      	movs	r3, #146	; 0x92
 8000450:	18fb      	adds	r3, r7, r3
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	b29b      	uxth	r3, r3
 8000456:	009b      	lsls	r3, r3, #2
 8000458:	b29b      	uxth	r3, r3
 800045a:	486c      	ldr	r0, [pc, #432]	; (800060c <handleGesture+0x1e8>)
 800045c:	220a      	movs	r2, #10
 800045e:	9202      	str	r2, [sp, #8]
 8000460:	9301      	str	r3, [sp, #4]
 8000462:	1d3b      	adds	r3, r7, #4
 8000464:	9300      	str	r3, [sp, #0]
 8000466:	2301      	movs	r3, #1
 8000468:	22fc      	movs	r2, #252	; 0xfc
 800046a:	f002 fefd 	bl	8003268 <HAL_I2C_Mem_Read>
 800046e:	1e03      	subs	r3, r0, #0
 8000470:	d001      	beq.n	8000476 <handleGesture+0x52>
		{
			return false;
 8000472:	2300      	movs	r3, #0
 8000474:	e0c4      	b.n	8000600 <handleGesture+0x1dc>
		}

		//	    if (bytes_read == 0)
		//	      return 0;
		for (int i = 0; i + 3 < (available * 4); i += 4)
 8000476:	2300      	movs	r3, #0
 8000478:	2294      	movs	r2, #148	; 0x94
 800047a:	18ba      	adds	r2, r7, r2
 800047c:	6013      	str	r3, [r2, #0]
 800047e:	e0b3      	b.n	80005e8 <handleGesture+0x1c4>
		{
			uint8_t u, d, l, r;
			u = fifo_data[i];
 8000480:	2491      	movs	r4, #145	; 0x91
 8000482:	193b      	adds	r3, r7, r4
 8000484:	1d39      	adds	r1, r7, #4
 8000486:	2094      	movs	r0, #148	; 0x94
 8000488:	183a      	adds	r2, r7, r0
 800048a:	6812      	ldr	r2, [r2, #0]
 800048c:	188a      	adds	r2, r1, r2
 800048e:	7812      	ldrb	r2, [r2, #0]
 8000490:	701a      	strb	r2, [r3, #0]
			d = fifo_data[i + 1];
 8000492:	183b      	adds	r3, r7, r0
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	1c5a      	adds	r2, r3, #1
 8000498:	2590      	movs	r5, #144	; 0x90
 800049a:	197b      	adds	r3, r7, r5
 800049c:	1d39      	adds	r1, r7, #4
 800049e:	5c8a      	ldrb	r2, [r1, r2]
 80004a0:	701a      	strb	r2, [r3, #0]
			l = fifo_data[i + 2];
 80004a2:	183b      	adds	r3, r7, r0
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	1c9a      	adds	r2, r3, #2
 80004a8:	268f      	movs	r6, #143	; 0x8f
 80004aa:	19bb      	adds	r3, r7, r6
 80004ac:	1d39      	adds	r1, r7, #4
 80004ae:	5c8a      	ldrb	r2, [r1, r2]
 80004b0:	701a      	strb	r2, [r3, #0]
			r = fifo_data[i + 3];
 80004b2:	183b      	adds	r3, r7, r0
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	1cda      	adds	r2, r3, #3
 80004b8:	208e      	movs	r0, #142	; 0x8e
 80004ba:	183b      	adds	r3, r7, r0
 80004bc:	1d39      	adds	r1, r7, #4
 80004be:	5c8a      	ldrb	r2, [r1, r2]
 80004c0:	701a      	strb	r2, [r3, #0]
			//	          debugPrint(&huart2, "l");
			//	          debugPrintln(&huart2, l);
			//	          debugPrint(&huart2, "r");
			//	          debugPrintln(&huart2, r);

			if (u < gestureThreshold && d < gestureThreshold && l < gestureThreshold && r < gestureThreshold)
 80004c2:	193a      	adds	r2, r7, r4
 80004c4:	2193      	movs	r1, #147	; 0x93
 80004c6:	187b      	adds	r3, r7, r1
 80004c8:	7812      	ldrb	r2, [r2, #0]
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	429a      	cmp	r2, r3
 80004ce:	d262      	bcs.n	8000596 <handleGesture+0x172>
 80004d0:	197a      	adds	r2, r7, r5
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	7812      	ldrb	r2, [r2, #0]
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	429a      	cmp	r2, r3
 80004da:	d25c      	bcs.n	8000596 <handleGesture+0x172>
 80004dc:	19ba      	adds	r2, r7, r6
 80004de:	187b      	adds	r3, r7, r1
 80004e0:	7812      	ldrb	r2, [r2, #0]
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	429a      	cmp	r2, r3
 80004e6:	d256      	bcs.n	8000596 <handleGesture+0x172>
 80004e8:	183a      	adds	r2, r7, r0
 80004ea:	187b      	adds	r3, r7, r1
 80004ec:	7812      	ldrb	r2, [r2, #0]
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	429a      	cmp	r2, r3
 80004f2:	d250      	bcs.n	8000596 <handleGesture+0x172>
			{
				_gestureIn = true;
 80004f4:	4b46      	ldr	r3, [pc, #280]	; (8000610 <handleGesture+0x1ec>)
 80004f6:	2201      	movs	r2, #1
 80004f8:	701a      	strb	r2, [r3, #0]
				if (_gestureDirInX != 0 || _gestureDirInY != 0)
 80004fa:	4b46      	ldr	r3, [pc, #280]	; (8000614 <handleGesture+0x1f0>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d103      	bne.n	800050a <handleGesture+0xe6>
 8000502:	4b45      	ldr	r3, [pc, #276]	; (8000618 <handleGesture+0x1f4>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d067      	beq.n	80005da <handleGesture+0x1b6>
				{
					int totalX = _gestureDirInX - _gestureDirectionX;
 800050a:	4b42      	ldr	r3, [pc, #264]	; (8000614 <handleGesture+0x1f0>)
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	4b43      	ldr	r3, [pc, #268]	; (800061c <handleGesture+0x1f8>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	1ad3      	subs	r3, r2, r3
 8000514:	2188      	movs	r1, #136	; 0x88
 8000516:	187a      	adds	r2, r7, r1
 8000518:	6013      	str	r3, [r2, #0]
					int totalY = _gestureDirInY - _gestureDirectionY;
 800051a:	4b3f      	ldr	r3, [pc, #252]	; (8000618 <handleGesture+0x1f4>)
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	4b40      	ldr	r3, [pc, #256]	; (8000620 <handleGesture+0x1fc>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	1ad3      	subs	r3, r2, r3
 8000524:	2284      	movs	r2, #132	; 0x84
 8000526:	18ba      	adds	r2, r7, r2
 8000528:	6013      	str	r3, [r2, #0]
					//		          debugPrint(&huart2, "out");
					//		          debugPrint(&huart2, totalX);
					//		          debugPrint(&huart2, ", ");
					//		          debugPrintln(&huart2, totalY);

					if (totalX < -_gestureSensitivity)
 800052a:	4b3e      	ldr	r3, [pc, #248]	; (8000624 <handleGesture+0x200>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	425b      	negs	r3, r3
 8000530:	187a      	adds	r2, r7, r1
 8000532:	6812      	ldr	r2, [r2, #0]
 8000534:	429a      	cmp	r2, r3
 8000536:	da02      	bge.n	800053e <handleGesture+0x11a>
					{
						_detectedGesture = GESTURE_LEFT;
 8000538:	4b3b      	ldr	r3, [pc, #236]	; (8000628 <handleGesture+0x204>)
 800053a:	2202      	movs	r2, #2
 800053c:	701a      	strb	r2, [r3, #0]
					}
					if (totalX > _gestureSensitivity)
 800053e:	4b39      	ldr	r3, [pc, #228]	; (8000624 <handleGesture+0x200>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	2288      	movs	r2, #136	; 0x88
 8000544:	18ba      	adds	r2, r7, r2
 8000546:	6812      	ldr	r2, [r2, #0]
 8000548:	429a      	cmp	r2, r3
 800054a:	dd02      	ble.n	8000552 <handleGesture+0x12e>
					{
						_detectedGesture = GESTURE_RIGHT;
 800054c:	4b36      	ldr	r3, [pc, #216]	; (8000628 <handleGesture+0x204>)
 800054e:	2203      	movs	r2, #3
 8000550:	701a      	strb	r2, [r3, #0]
					}
					if (totalY < -_gestureSensitivity)
 8000552:	4b34      	ldr	r3, [pc, #208]	; (8000624 <handleGesture+0x200>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	425b      	negs	r3, r3
 8000558:	2284      	movs	r2, #132	; 0x84
 800055a:	18ba      	adds	r2, r7, r2
 800055c:	6812      	ldr	r2, [r2, #0]
 800055e:	429a      	cmp	r2, r3
 8000560:	da02      	bge.n	8000568 <handleGesture+0x144>
					{
						_detectedGesture = GESTURE_DOWN;
 8000562:	4b31      	ldr	r3, [pc, #196]	; (8000628 <handleGesture+0x204>)
 8000564:	2201      	movs	r2, #1
 8000566:	701a      	strb	r2, [r3, #0]
					}
					if (totalY > _gestureSensitivity)
 8000568:	4b2e      	ldr	r3, [pc, #184]	; (8000624 <handleGesture+0x200>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	2284      	movs	r2, #132	; 0x84
 800056e:	18ba      	adds	r2, r7, r2
 8000570:	6812      	ldr	r2, [r2, #0]
 8000572:	429a      	cmp	r2, r3
 8000574:	dd02      	ble.n	800057c <handleGesture+0x158>
					{
						_detectedGesture = GESTURE_UP;
 8000576:	4b2c      	ldr	r3, [pc, #176]	; (8000628 <handleGesture+0x204>)
 8000578:	2200      	movs	r2, #0
 800057a:	701a      	strb	r2, [r3, #0]
					}
					_gestureDirectionX = 0;
 800057c:	4b27      	ldr	r3, [pc, #156]	; (800061c <handleGesture+0x1f8>)
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
					_gestureDirectionY = 0;
 8000582:	4b27      	ldr	r3, [pc, #156]	; (8000620 <handleGesture+0x1fc>)
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
					_gestureDirInX = 0;
 8000588:	4b22      	ldr	r3, [pc, #136]	; (8000614 <handleGesture+0x1f0>)
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
					_gestureDirInY = 0;
 800058e:	4b22      	ldr	r3, [pc, #136]	; (8000618 <handleGesture+0x1f4>)
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
				}
				continue;
 8000594:	e021      	b.n	80005da <handleGesture+0x1b6>
			}

			_gestureDirectionX = r - l;
 8000596:	238e      	movs	r3, #142	; 0x8e
 8000598:	18fb      	adds	r3, r7, r3
 800059a:	781a      	ldrb	r2, [r3, #0]
 800059c:	238f      	movs	r3, #143	; 0x8f
 800059e:	18fb      	adds	r3, r7, r3
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	1ad2      	subs	r2, r2, r3
 80005a4:	4b1d      	ldr	r3, [pc, #116]	; (800061c <handleGesture+0x1f8>)
 80005a6:	601a      	str	r2, [r3, #0]
			_gestureDirectionY = u - d;
 80005a8:	2391      	movs	r3, #145	; 0x91
 80005aa:	18fb      	adds	r3, r7, r3
 80005ac:	781a      	ldrb	r2, [r3, #0]
 80005ae:	2390      	movs	r3, #144	; 0x90
 80005b0:	18fb      	adds	r3, r7, r3
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	1ad2      	subs	r2, r2, r3
 80005b6:	4b1a      	ldr	r3, [pc, #104]	; (8000620 <handleGesture+0x1fc>)
 80005b8:	601a      	str	r2, [r3, #0]
			if (_gestureIn)
 80005ba:	4b15      	ldr	r3, [pc, #84]	; (8000610 <handleGesture+0x1ec>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d00c      	beq.n	80005dc <handleGesture+0x1b8>
			{
				_gestureIn = false;
 80005c2:	4b13      	ldr	r3, [pc, #76]	; (8000610 <handleGesture+0x1ec>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	701a      	strb	r2, [r3, #0]
				_gestureDirInX = _gestureDirectionX;
 80005c8:	4b14      	ldr	r3, [pc, #80]	; (800061c <handleGesture+0x1f8>)
 80005ca:	681a      	ldr	r2, [r3, #0]
 80005cc:	4b11      	ldr	r3, [pc, #68]	; (8000614 <handleGesture+0x1f0>)
 80005ce:	601a      	str	r2, [r3, #0]
				_gestureDirInY = _gestureDirectionY;
 80005d0:	4b13      	ldr	r3, [pc, #76]	; (8000620 <handleGesture+0x1fc>)
 80005d2:	681a      	ldr	r2, [r3, #0]
 80005d4:	4b10      	ldr	r3, [pc, #64]	; (8000618 <handleGesture+0x1f4>)
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	e000      	b.n	80005dc <handleGesture+0x1b8>
				continue;
 80005da:	46c0      	nop			; (mov r8, r8)
		for (int i = 0; i + 3 < (available * 4); i += 4)
 80005dc:	2294      	movs	r2, #148	; 0x94
 80005de:	18bb      	adds	r3, r7, r2
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	3304      	adds	r3, #4
 80005e4:	18ba      	adds	r2, r7, r2
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	2394      	movs	r3, #148	; 0x94
 80005ea:	18fb      	adds	r3, r7, r3
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	1cda      	adds	r2, r3, #3
 80005f0:	2392      	movs	r3, #146	; 0x92
 80005f2:	18fb      	adds	r3, r7, r3
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	009b      	lsls	r3, r3, #2
 80005f8:	429a      	cmp	r2, r3
 80005fa:	da00      	bge.n	80005fe <handleGesture+0x1da>
 80005fc:	e740      	b.n	8000480 <handleGesture+0x5c>
	{
 80005fe:	e718      	b.n	8000432 <handleGesture+0xe>
			}
		}
	}
}
 8000600:	0018      	movs	r0, r3
 8000602:	46bd      	mov	sp, r7
 8000604:	b027      	add	sp, #156	; 0x9c
 8000606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000608:	20000000 	.word	0x20000000
 800060c:	200000c4 	.word	0x200000c4
 8000610:	2000009b 	.word	0x2000009b
 8000614:	200000a4 	.word	0x200000a4
 8000618:	200000a8 	.word	0x200000a8
 800061c:	2000009c 	.word	0x2000009c
 8000620:	200000a0 	.word	0x200000a0
 8000624:	200000ac 	.word	0x200000ac
 8000628:	2000009a 	.word	0x2000009a

0800062c <gestureAvailable>:

uint8_t gestureAvailable()
{
 800062c:	b590      	push	{r4, r7, lr}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
	uint8_t r;
	// enable gesture

	// setGestureMode
	r = read8(APDS9960_ENABLE); // READ CONF4
 8000632:	1dfc      	adds	r4, r7, #7
 8000634:	2080      	movs	r0, #128	; 0x80
 8000636:	f000 f869 	bl	800070c <read8>
 800063a:	0003      	movs	r3, r0
 800063c:	7023      	strb	r3, [r4, #0]
	if ((r & 0b01000000) != 0)
 800063e:	1dfb      	adds	r3, r7, #7
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2240      	movs	r2, #64	; 0x40
 8000644:	4013      	ands	r3, r2
 8000646:	d003      	beq.n	8000650 <gestureAvailable+0x24>
	{
		gesture_enable = true;
 8000648:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <gestureAvailable+0x90>)
 800064a:	2201      	movs	r2, #1
 800064c:	701a      	strb	r2, [r3, #0]
 800064e:	e019      	b.n	8000684 <gestureAvailable+0x58>
		// return true;
	}
	else
	{
		r |= 0b01000001;
 8000650:	1dfb      	adds	r3, r7, #7
 8000652:	1dfa      	adds	r2, r7, #7
 8000654:	7812      	ldrb	r2, [r2, #0]
 8000656:	2141      	movs	r1, #65	; 0x41
 8000658:	430a      	orrs	r2, r1
 800065a:	701a      	strb	r2, [r3, #0]
		write8(APDS9960_ENABLE, r);
 800065c:	1dfb      	adds	r3, r7, #7
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	0019      	movs	r1, r3
 8000662:	2080      	movs	r0, #128	; 0x80
 8000664:	f000 f82c 	bl	80006c0 <write8>
		r = read8(APDS9960_ENABLE); // READ CONF4
 8000668:	1dfc      	adds	r4, r7, #7
 800066a:	2080      	movs	r0, #128	; 0x80
 800066c:	f000 f84e 	bl	800070c <read8>
 8000670:	0003      	movs	r3, r0
 8000672:	7023      	strb	r3, [r4, #0]
		if ((r & 0b01000000) != 0)
 8000674:	1dfb      	adds	r3, r7, #7
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	2240      	movs	r2, #64	; 0x40
 800067a:	4013      	ands	r3, r2
 800067c:	d002      	beq.n	8000684 <gestureAvailable+0x58>
		{
			gesture_enable = true;
 800067e:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <gestureAvailable+0x90>)
 8000680:	2201      	movs	r2, #1
 8000682:	701a      	strb	r2, [r3, #0]
			// return true;
		}
	}

	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) != 0)
 8000684:	2380      	movs	r3, #128	; 0x80
 8000686:	021a      	lsls	r2, r3, #8
 8000688:	2390      	movs	r3, #144	; 0x90
 800068a:	05db      	lsls	r3, r3, #23
 800068c:	0011      	movs	r1, r2
 800068e:	0018      	movs	r0, r3
 8000690:	f002 fbd0 	bl	8002e34 <HAL_GPIO_ReadPin>
 8000694:	1e03      	subs	r3, r0, #0
 8000696:	d001      	beq.n	800069c <gestureAvailable+0x70>
	{
		return 0;
 8000698:	2300      	movs	r3, #0
 800069a:	e00b      	b.n	80006b4 <gestureAvailable+0x88>
	}

	if (!gestureFIFOAvailable())
 800069c:	f7ff fe8e 	bl	80003bc <gestureFIFOAvailable>
 80006a0:	1e03      	subs	r3, r0, #0
 80006a2:	d101      	bne.n	80006a8 <gestureAvailable+0x7c>
	{
		return false;
 80006a4:	2300      	movs	r3, #0
 80006a6:	e005      	b.n	80006b4 <gestureAvailable+0x88>
	}

	handleGesture();
 80006a8:	f7ff febc 	bl	8000424 <handleGesture>
	//			r = read8(APDS9960_GCONF4); // READ CONF4
	//			r &= 0xFE;
	//			write8(APDS9960_GCONF4,r); // // wite CONF4
	//			gesture_enable = 1;
	//	  }
	HAL_Delay(10);
 80006ac:	200a      	movs	r0, #10
 80006ae:	f002 f94f 	bl	8002950 <HAL_Delay>

	return (_detectedGesture == GESTURE_NONE) ? 0 : 1;
 80006b2:	2301      	movs	r3, #1
}
 80006b4:	0018      	movs	r0, r3
 80006b6:	46bd      	mov	sp, r7
 80006b8:	b003      	add	sp, #12
 80006ba:	bd90      	pop	{r4, r7, pc}
 80006bc:	20000098 	.word	0x20000098

080006c0 <write8>:

uint8_t write8(uint8_t reg, uint8_t value)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b086      	sub	sp, #24
 80006c4:	af04      	add	r7, sp, #16
 80006c6:	0002      	movs	r2, r0
 80006c8:	1dfb      	adds	r3, r7, #7
 80006ca:	701a      	strb	r2, [r3, #0]
 80006cc:	1dbb      	adds	r3, r7, #6
 80006ce:	1c0a      	adds	r2, r1, #0
 80006d0:	701a      	strb	r2, [r3, #0]

	if ((HAL_I2C_Mem_Write(&hi2c1, APDS9960_I2C_ADDR, reg, 0x01, &value, 0x01, 10)) != HAL_OK)
 80006d2:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <write8+0x44>)
 80006d4:	8819      	ldrh	r1, [r3, #0]
 80006d6:	1dfb      	adds	r3, r7, #7
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	b29a      	uxth	r2, r3
 80006dc:	480a      	ldr	r0, [pc, #40]	; (8000708 <write8+0x48>)
 80006de:	230a      	movs	r3, #10
 80006e0:	9302      	str	r3, [sp, #8]
 80006e2:	2301      	movs	r3, #1
 80006e4:	9301      	str	r3, [sp, #4]
 80006e6:	1dbb      	adds	r3, r7, #6
 80006e8:	9300      	str	r3, [sp, #0]
 80006ea:	2301      	movs	r3, #1
 80006ec:	f002 fc8e 	bl	800300c <HAL_I2C_Mem_Write>
 80006f0:	1e03      	subs	r3, r0, #0
 80006f2:	d001      	beq.n	80006f8 <write8+0x38>
	{
		return false;
 80006f4:	2300      	movs	r3, #0
 80006f6:	e000      	b.n	80006fa <write8+0x3a>
	}

	return true;
 80006f8:	2301      	movs	r3, #1
}
 80006fa:	0018      	movs	r0, r3
 80006fc:	46bd      	mov	sp, r7
 80006fe:	b002      	add	sp, #8
 8000700:	bd80      	pop	{r7, pc}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	20000000 	.word	0x20000000
 8000708:	200000c4 	.word	0x200000c4

0800070c <read8>:

uint8_t read8(uint8_t reg)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b088      	sub	sp, #32
 8000710:	af04      	add	r7, sp, #16
 8000712:	0002      	movs	r2, r0
 8000714:	1dfb      	adds	r3, r7, #7
 8000716:	701a      	strb	r2, [r3, #0]

	uint8_t ret;
	if ((HAL_I2C_Mem_Read(&hi2c1, APDS9960_I2C_ADDR, reg, 0x01, &ret, 0x01, 10)) != HAL_OK)
 8000718:	4b0d      	ldr	r3, [pc, #52]	; (8000750 <read8+0x44>)
 800071a:	8819      	ldrh	r1, [r3, #0]
 800071c:	1dfb      	adds	r3, r7, #7
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	b29a      	uxth	r2, r3
 8000722:	480c      	ldr	r0, [pc, #48]	; (8000754 <read8+0x48>)
 8000724:	230a      	movs	r3, #10
 8000726:	9302      	str	r3, [sp, #8]
 8000728:	2301      	movs	r3, #1
 800072a:	9301      	str	r3, [sp, #4]
 800072c:	230f      	movs	r3, #15
 800072e:	18fb      	adds	r3, r7, r3
 8000730:	9300      	str	r3, [sp, #0]
 8000732:	2301      	movs	r3, #1
 8000734:	f002 fd98 	bl	8003268 <HAL_I2C_Mem_Read>
 8000738:	1e03      	subs	r3, r0, #0
 800073a:	d001      	beq.n	8000740 <read8+0x34>
	{
		return false;
 800073c:	2300      	movs	r3, #0
 800073e:	e002      	b.n	8000746 <read8+0x3a>
	}

	return ret;
 8000740:	230f      	movs	r3, #15
 8000742:	18fb      	adds	r3, r7, r3
 8000744:	781b      	ldrb	r3, [r3, #0]
}
 8000746:	0018      	movs	r0, r3
 8000748:	46bd      	mov	sp, r7
 800074a:	b004      	add	sp, #16
 800074c:	bd80      	pop	{r7, pc}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	20000000 	.word	0x20000000
 8000754:	200000c4 	.word	0x200000c4

08000758 <lcd_init>:

#include <lcd.h>

/*--------------- Initialize LCD ------------------*/
void lcd_init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0

	HAL_Delay(30);
 800075c:	201e      	movs	r0, #30
 800075e:	f002 f8f7 	bl	8002950 <HAL_Delay>

	PIN_LOW(D4_PORT, D4_PIN);
 8000762:	2390      	movs	r3, #144	; 0x90
 8000764:	05db      	lsls	r3, r3, #23
 8000766:	2200      	movs	r2, #0
 8000768:	2101      	movs	r1, #1
 800076a:	0018      	movs	r0, r3
 800076c:	f002 fb7f 	bl	8002e6e <HAL_GPIO_WritePin>
	PIN_HIGH(D5_PORT, D5_PIN);
 8000770:	2390      	movs	r3, #144	; 0x90
 8000772:	05db      	lsls	r3, r3, #23
 8000774:	2201      	movs	r2, #1
 8000776:	2102      	movs	r1, #2
 8000778:	0018      	movs	r0, r3
 800077a:	f002 fb78 	bl	8002e6e <HAL_GPIO_WritePin>
	PIN_LOW(D6_PORT, D6_PIN);
 800077e:	2390      	movs	r3, #144	; 0x90
 8000780:	05db      	lsls	r3, r3, #23
 8000782:	2200      	movs	r2, #0
 8000784:	2104      	movs	r1, #4
 8000786:	0018      	movs	r0, r3
 8000788:	f002 fb71 	bl	8002e6e <HAL_GPIO_WritePin>
	PIN_LOW(D7_PORT, D7_PIN);
 800078c:	2390      	movs	r3, #144	; 0x90
 800078e:	05db      	lsls	r3, r3, #23
 8000790:	2200      	movs	r2, #0
 8000792:	2108      	movs	r1, #8
 8000794:	0018      	movs	r0, r3
 8000796:	f002 fb6a 	bl	8002e6e <HAL_GPIO_WritePin>
	PIN_LOW(RS_PORT, RS_PIN);
 800079a:	2390      	movs	r3, #144	; 0x90
 800079c:	05db      	lsls	r3, r3, #23
 800079e:	2200      	movs	r2, #0
 80007a0:	2120      	movs	r1, #32
 80007a2:	0018      	movs	r0, r3
 80007a4:	f002 fb63 	bl	8002e6e <HAL_GPIO_WritePin>

	PIN_HIGH(EN_PORT, EN_PIN);
 80007a8:	2390      	movs	r3, #144	; 0x90
 80007aa:	05db      	lsls	r3, r3, #23
 80007ac:	2201      	movs	r2, #1
 80007ae:	2110      	movs	r1, #16
 80007b0:	0018      	movs	r0, r3
 80007b2:	f002 fb5c 	bl	8002e6e <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT, EN_PIN);
 80007b6:	2390      	movs	r3, #144	; 0x90
 80007b8:	05db      	lsls	r3, r3, #23
 80007ba:	2200      	movs	r2, #0
 80007bc:	2110      	movs	r1, #16
 80007be:	0018      	movs	r0, r3
 80007c0:	f002 fb55 	bl	8002e6e <HAL_GPIO_WritePin>

	HAL_Delay(50);
 80007c4:	2032      	movs	r0, #50	; 0x32
 80007c6:	f002 f8c3 	bl	8002950 <HAL_Delay>
	//	HAL_Delay(1);
	//	lcd_write (0,0x01);  // clear display
	//	HAL_Delay(1);
	//	lcd_write (0,0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
	//	HAL_Delay(1);
	lcd_write(0, 0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80007ca:	2128      	movs	r1, #40	; 0x28
 80007cc:	2000      	movs	r0, #0
 80007ce:	f000 f822 	bl	8000816 <lcd_write>
	HAL_Delay(1);
 80007d2:	2001      	movs	r0, #1
 80007d4:	f002 f8bc 	bl	8002950 <HAL_Delay>
	lcd_write(0, 0x0c);
 80007d8:	210c      	movs	r1, #12
 80007da:	2000      	movs	r0, #0
 80007dc:	f000 f81b 	bl	8000816 <lcd_write>
	HAL_Delay(1);
 80007e0:	2001      	movs	r0, #1
 80007e2:	f002 f8b5 	bl	8002950 <HAL_Delay>
	lcd_write(0, 0x06); // Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80007e6:	2106      	movs	r1, #6
 80007e8:	2000      	movs	r0, #0
 80007ea:	f000 f814 	bl	8000816 <lcd_write>
	HAL_Delay(1);
 80007ee:	2001      	movs	r0, #1
 80007f0:	f002 f8ae 	bl	8002950 <HAL_Delay>
	lcd_write(0, 0x01); // clear display
 80007f4:	2101      	movs	r1, #1
 80007f6:	2000      	movs	r0, #0
 80007f8:	f000 f80d 	bl	8000816 <lcd_write>
	HAL_Delay(1);
 80007fc:	2001      	movs	r0, #1
 80007fe:	f002 f8a7 	bl	8002950 <HAL_Delay>
	lcd_write(0, 0x80); // clear display
 8000802:	2180      	movs	r1, #128	; 0x80
 8000804:	2000      	movs	r0, #0
 8000806:	f000 f806 	bl	8000816 <lcd_write>
	HAL_Delay(1);
 800080a:	2001      	movs	r0, #1
 800080c:	f002 f8a0 	bl	8002950 <HAL_Delay>
}
 8000810:	46c0      	nop			; (mov r8, r8)
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <lcd_write>:

/*--------------- Write To LCD ---------------*/
void lcd_write(uint8_t type, uint8_t data)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	b082      	sub	sp, #8
 800081a:	af00      	add	r7, sp, #0
 800081c:	0002      	movs	r2, r0
 800081e:	1dfb      	adds	r3, r7, #7
 8000820:	701a      	strb	r2, [r3, #0]
 8000822:	1dbb      	adds	r3, r7, #6
 8000824:	1c0a      	adds	r2, r1, #0
 8000826:	701a      	strb	r2, [r3, #0]
	HAL_Delay(2);
 8000828:	2002      	movs	r0, #2
 800082a:	f002 f891 	bl	8002950 <HAL_Delay>
	if (type)
 800082e:	1dfb      	adds	r3, r7, #7
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d007      	beq.n	8000846 <lcd_write+0x30>
	{
		PIN_HIGH(RS_PORT, RS_PIN);
 8000836:	2390      	movs	r3, #144	; 0x90
 8000838:	05db      	lsls	r3, r3, #23
 800083a:	2201      	movs	r2, #1
 800083c:	2120      	movs	r1, #32
 800083e:	0018      	movs	r0, r3
 8000840:	f002 fb15 	bl	8002e6e <HAL_GPIO_WritePin>
 8000844:	e006      	b.n	8000854 <lcd_write+0x3e>
	}
	else
	{
		PIN_LOW(RS_PORT, RS_PIN);
 8000846:	2390      	movs	r3, #144	; 0x90
 8000848:	05db      	lsls	r3, r3, #23
 800084a:	2200      	movs	r2, #0
 800084c:	2120      	movs	r1, #32
 800084e:	0018      	movs	r0, r3
 8000850:	f002 fb0d 	bl	8002e6e <HAL_GPIO_WritePin>
	}

	// Send High Nibble
	if (data & 0x80)
 8000854:	1dbb      	adds	r3, r7, #6
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	b25b      	sxtb	r3, r3
 800085a:	2b00      	cmp	r3, #0
 800085c:	da07      	bge.n	800086e <lcd_write+0x58>
	{
		PIN_HIGH(D7_PORT, D7_PIN);
 800085e:	2390      	movs	r3, #144	; 0x90
 8000860:	05db      	lsls	r3, r3, #23
 8000862:	2201      	movs	r2, #1
 8000864:	2108      	movs	r1, #8
 8000866:	0018      	movs	r0, r3
 8000868:	f002 fb01 	bl	8002e6e <HAL_GPIO_WritePin>
 800086c:	e006      	b.n	800087c <lcd_write+0x66>
	}
	else
	{
		PIN_LOW(D7_PORT, D7_PIN);
 800086e:	2390      	movs	r3, #144	; 0x90
 8000870:	05db      	lsls	r3, r3, #23
 8000872:	2200      	movs	r2, #0
 8000874:	2108      	movs	r1, #8
 8000876:	0018      	movs	r0, r3
 8000878:	f002 faf9 	bl	8002e6e <HAL_GPIO_WritePin>
	}

	if (data & 0x40)
 800087c:	1dbb      	adds	r3, r7, #6
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2240      	movs	r2, #64	; 0x40
 8000882:	4013      	ands	r3, r2
 8000884:	d007      	beq.n	8000896 <lcd_write+0x80>
	{
		PIN_HIGH(D6_PORT, D6_PIN);
 8000886:	2390      	movs	r3, #144	; 0x90
 8000888:	05db      	lsls	r3, r3, #23
 800088a:	2201      	movs	r2, #1
 800088c:	2104      	movs	r1, #4
 800088e:	0018      	movs	r0, r3
 8000890:	f002 faed 	bl	8002e6e <HAL_GPIO_WritePin>
 8000894:	e006      	b.n	80008a4 <lcd_write+0x8e>
	}
	else
	{
		PIN_LOW(D6_PORT, D6_PIN);
 8000896:	2390      	movs	r3, #144	; 0x90
 8000898:	05db      	lsls	r3, r3, #23
 800089a:	2200      	movs	r2, #0
 800089c:	2104      	movs	r1, #4
 800089e:	0018      	movs	r0, r3
 80008a0:	f002 fae5 	bl	8002e6e <HAL_GPIO_WritePin>
	}

	if (data & 0x20)
 80008a4:	1dbb      	adds	r3, r7, #6
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	2220      	movs	r2, #32
 80008aa:	4013      	ands	r3, r2
 80008ac:	d007      	beq.n	80008be <lcd_write+0xa8>
	{
		PIN_HIGH(D5_PORT, D5_PIN);
 80008ae:	2390      	movs	r3, #144	; 0x90
 80008b0:	05db      	lsls	r3, r3, #23
 80008b2:	2201      	movs	r2, #1
 80008b4:	2102      	movs	r1, #2
 80008b6:	0018      	movs	r0, r3
 80008b8:	f002 fad9 	bl	8002e6e <HAL_GPIO_WritePin>
 80008bc:	e006      	b.n	80008cc <lcd_write+0xb6>
	}
	else
	{
		PIN_LOW(D5_PORT, D5_PIN);
 80008be:	2390      	movs	r3, #144	; 0x90
 80008c0:	05db      	lsls	r3, r3, #23
 80008c2:	2200      	movs	r2, #0
 80008c4:	2102      	movs	r1, #2
 80008c6:	0018      	movs	r0, r3
 80008c8:	f002 fad1 	bl	8002e6e <HAL_GPIO_WritePin>
	}

	if (data & 0x10)
 80008cc:	1dbb      	adds	r3, r7, #6
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2210      	movs	r2, #16
 80008d2:	4013      	ands	r3, r2
 80008d4:	d007      	beq.n	80008e6 <lcd_write+0xd0>
	{
		PIN_HIGH(D4_PORT, D4_PIN);
 80008d6:	2390      	movs	r3, #144	; 0x90
 80008d8:	05db      	lsls	r3, r3, #23
 80008da:	2201      	movs	r2, #1
 80008dc:	2101      	movs	r1, #1
 80008de:	0018      	movs	r0, r3
 80008e0:	f002 fac5 	bl	8002e6e <HAL_GPIO_WritePin>
 80008e4:	e006      	b.n	80008f4 <lcd_write+0xde>
	}
	else
	{
		PIN_LOW(D4_PORT, D4_PIN);
 80008e6:	2390      	movs	r3, #144	; 0x90
 80008e8:	05db      	lsls	r3, r3, #23
 80008ea:	2200      	movs	r2, #0
 80008ec:	2101      	movs	r1, #1
 80008ee:	0018      	movs	r0, r3
 80008f0:	f002 fabd 	bl	8002e6e <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT, EN_PIN);
 80008f4:	2390      	movs	r3, #144	; 0x90
 80008f6:	05db      	lsls	r3, r3, #23
 80008f8:	2201      	movs	r2, #1
 80008fa:	2110      	movs	r1, #16
 80008fc:	0018      	movs	r0, r3
 80008fe:	f002 fab6 	bl	8002e6e <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT, EN_PIN);
 8000902:	2390      	movs	r3, #144	; 0x90
 8000904:	05db      	lsls	r3, r3, #23
 8000906:	2200      	movs	r2, #0
 8000908:	2110      	movs	r1, #16
 800090a:	0018      	movs	r0, r3
 800090c:	f002 faaf 	bl	8002e6e <HAL_GPIO_WritePin>

	// Send Low Nibble
	if (data & 0x08)
 8000910:	1dbb      	adds	r3, r7, #6
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2208      	movs	r2, #8
 8000916:	4013      	ands	r3, r2
 8000918:	d007      	beq.n	800092a <lcd_write+0x114>
	{
		PIN_HIGH(D7_PORT, D7_PIN);
 800091a:	2390      	movs	r3, #144	; 0x90
 800091c:	05db      	lsls	r3, r3, #23
 800091e:	2201      	movs	r2, #1
 8000920:	2108      	movs	r1, #8
 8000922:	0018      	movs	r0, r3
 8000924:	f002 faa3 	bl	8002e6e <HAL_GPIO_WritePin>
 8000928:	e006      	b.n	8000938 <lcd_write+0x122>
	}
	else
	{
		PIN_LOW(D7_PORT, D7_PIN);
 800092a:	2390      	movs	r3, #144	; 0x90
 800092c:	05db      	lsls	r3, r3, #23
 800092e:	2200      	movs	r2, #0
 8000930:	2108      	movs	r1, #8
 8000932:	0018      	movs	r0, r3
 8000934:	f002 fa9b 	bl	8002e6e <HAL_GPIO_WritePin>
	}

	if (data & 0x04)
 8000938:	1dbb      	adds	r3, r7, #6
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	2204      	movs	r2, #4
 800093e:	4013      	ands	r3, r2
 8000940:	d007      	beq.n	8000952 <lcd_write+0x13c>
	{
		PIN_HIGH(D6_PORT, D6_PIN);
 8000942:	2390      	movs	r3, #144	; 0x90
 8000944:	05db      	lsls	r3, r3, #23
 8000946:	2201      	movs	r2, #1
 8000948:	2104      	movs	r1, #4
 800094a:	0018      	movs	r0, r3
 800094c:	f002 fa8f 	bl	8002e6e <HAL_GPIO_WritePin>
 8000950:	e006      	b.n	8000960 <lcd_write+0x14a>
	}
	else
	{
		PIN_LOW(D6_PORT, D6_PIN);
 8000952:	2390      	movs	r3, #144	; 0x90
 8000954:	05db      	lsls	r3, r3, #23
 8000956:	2200      	movs	r2, #0
 8000958:	2104      	movs	r1, #4
 800095a:	0018      	movs	r0, r3
 800095c:	f002 fa87 	bl	8002e6e <HAL_GPIO_WritePin>
	}

	if (data & 0x02)
 8000960:	1dbb      	adds	r3, r7, #6
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	2202      	movs	r2, #2
 8000966:	4013      	ands	r3, r2
 8000968:	d007      	beq.n	800097a <lcd_write+0x164>
	{
		PIN_HIGH(D5_PORT, D5_PIN);
 800096a:	2390      	movs	r3, #144	; 0x90
 800096c:	05db      	lsls	r3, r3, #23
 800096e:	2201      	movs	r2, #1
 8000970:	2102      	movs	r1, #2
 8000972:	0018      	movs	r0, r3
 8000974:	f002 fa7b 	bl	8002e6e <HAL_GPIO_WritePin>
 8000978:	e006      	b.n	8000988 <lcd_write+0x172>
	}
	else
	{
		PIN_LOW(D5_PORT, D5_PIN);
 800097a:	2390      	movs	r3, #144	; 0x90
 800097c:	05db      	lsls	r3, r3, #23
 800097e:	2200      	movs	r2, #0
 8000980:	2102      	movs	r1, #2
 8000982:	0018      	movs	r0, r3
 8000984:	f002 fa73 	bl	8002e6e <HAL_GPIO_WritePin>
	}

	if (data & 0x01)
 8000988:	1dbb      	adds	r3, r7, #6
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2201      	movs	r2, #1
 800098e:	4013      	ands	r3, r2
 8000990:	d007      	beq.n	80009a2 <lcd_write+0x18c>
	{
		PIN_HIGH(D4_PORT, D4_PIN);
 8000992:	2390      	movs	r3, #144	; 0x90
 8000994:	05db      	lsls	r3, r3, #23
 8000996:	2201      	movs	r2, #1
 8000998:	2101      	movs	r1, #1
 800099a:	0018      	movs	r0, r3
 800099c:	f002 fa67 	bl	8002e6e <HAL_GPIO_WritePin>
 80009a0:	e006      	b.n	80009b0 <lcd_write+0x19a>
	}
	else
	{
		PIN_LOW(D4_PORT, D4_PIN);
 80009a2:	2390      	movs	r3, #144	; 0x90
 80009a4:	05db      	lsls	r3, r3, #23
 80009a6:	2200      	movs	r2, #0
 80009a8:	2101      	movs	r1, #1
 80009aa:	0018      	movs	r0, r3
 80009ac:	f002 fa5f 	bl	8002e6e <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT, EN_PIN);
 80009b0:	2390      	movs	r3, #144	; 0x90
 80009b2:	05db      	lsls	r3, r3, #23
 80009b4:	2201      	movs	r2, #1
 80009b6:	2110      	movs	r1, #16
 80009b8:	0018      	movs	r0, r3
 80009ba:	f002 fa58 	bl	8002e6e <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT, EN_PIN);
 80009be:	2390      	movs	r3, #144	; 0x90
 80009c0:	05db      	lsls	r3, r3, #23
 80009c2:	2200      	movs	r2, #0
 80009c4:	2110      	movs	r1, #16
 80009c6:	0018      	movs	r0, r3
 80009c8:	f002 fa51 	bl	8002e6e <HAL_GPIO_WritePin>
}
 80009cc:	46c0      	nop			; (mov r8, r8)
 80009ce:	46bd      	mov	sp, r7
 80009d0:	b002      	add	sp, #8
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <lcd_puts>:

void lcd_puts(uint8_t x, uint8_t y, int8_t *string)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	603a      	str	r2, [r7, #0]
 80009dc:	1dfb      	adds	r3, r7, #7
 80009de:	1c02      	adds	r2, r0, #0
 80009e0:	701a      	strb	r2, [r3, #0]
 80009e2:	1dbb      	adds	r3, r7, #6
 80009e4:	1c0a      	adds	r2, r1, #0
 80009e6:	701a      	strb	r2, [r3, #0]
		break;
	}
#endif

#ifdef LCD20xN // For LCD20x4
	switch (x)
 80009e8:	1dfb      	adds	r3, r7, #7
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2b03      	cmp	r3, #3
 80009ee:	d023      	beq.n	8000a38 <lcd_puts+0x64>
 80009f0:	dc37      	bgt.n	8000a62 <lcd_puts+0x8e>
 80009f2:	2b02      	cmp	r3, #2
 80009f4:	d017      	beq.n	8000a26 <lcd_puts+0x52>
 80009f6:	dc34      	bgt.n	8000a62 <lcd_puts+0x8e>
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d002      	beq.n	8000a02 <lcd_puts+0x2e>
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d009      	beq.n	8000a14 <lcd_puts+0x40>
 8000a00:	e023      	b.n	8000a4a <lcd_puts+0x76>
	{

	case 0: // Row 0
		lcd_write(0, 0x80 + 0x00 + y);
 8000a02:	1dbb      	adds	r3, r7, #6
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	3b80      	subs	r3, #128	; 0x80
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	0019      	movs	r1, r3
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	f7ff ff02 	bl	8000816 <lcd_write>
		break;
 8000a12:	e01a      	b.n	8000a4a <lcd_puts+0x76>
	case 1: // Row 1
		lcd_write(0, 0x80 + 0x40 + y);
 8000a14:	1dbb      	adds	r3, r7, #6
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	3b40      	subs	r3, #64	; 0x40
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	0019      	movs	r1, r3
 8000a1e:	2000      	movs	r0, #0
 8000a20:	f7ff fef9 	bl	8000816 <lcd_write>
		break;
 8000a24:	e011      	b.n	8000a4a <lcd_puts+0x76>
	case 2: // Row 2
		lcd_write(0, 0x80 + 0x14 + y);
 8000a26:	1dbb      	adds	r3, r7, #6
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	3b6c      	subs	r3, #108	; 0x6c
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	0019      	movs	r1, r3
 8000a30:	2000      	movs	r0, #0
 8000a32:	f7ff fef0 	bl	8000816 <lcd_write>
		break;
 8000a36:	e008      	b.n	8000a4a <lcd_puts+0x76>
	case 3: // Row 3
		lcd_write(0, 0x80 + 0x54 + y);
 8000a38:	1dbb      	adds	r3, r7, #6
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	3b2c      	subs	r3, #44	; 0x2c
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	0019      	movs	r1, r3
 8000a42:	2000      	movs	r0, #0
 8000a44:	f7ff fee7 	bl	8000816 <lcd_write>
		break;
 8000a48:	46c0      	nop			; (mov r8, r8)
	}
#endif

	while (*string)
 8000a4a:	e00a      	b.n	8000a62 <lcd_puts+0x8e>
	{
		lcd_write(1, *string);
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	b25b      	sxtb	r3, r3
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	0019      	movs	r1, r3
 8000a56:	2001      	movs	r0, #1
 8000a58:	f7ff fedd 	bl	8000816 <lcd_write>
		string++;
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	603b      	str	r3, [r7, #0]
	while (*string)
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	b25b      	sxtb	r3, r3
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d1ef      	bne.n	8000a4c <lcd_puts+0x78>
	}
}
 8000a6c:	46c0      	nop			; (mov r8, r8)
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	46bd      	mov	sp, r7
 8000a72:	b002      	add	sp, #8
 8000a74:	bd80      	pop	{r7, pc}
	...

08000a78 <clr_data>:

void clr_data(uint8_t pos)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	0002      	movs	r2, r0
 8000a80:	1dfb      	adds	r3, r7, #7
 8000a82:	701a      	strb	r2, [r3, #0]

	switch (pos)
 8000a84:	1dfb      	adds	r3, r7, #7
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b0a      	cmp	r3, #10
 8000a8a:	d900      	bls.n	8000a8e <clr_data+0x16>
 8000a8c:	e0c8      	b.n	8000c20 <clr_data+0x1a8>
 8000a8e:	009a      	lsls	r2, r3, #2
 8000a90:	4b65      	ldr	r3, [pc, #404]	; (8000c28 <clr_data+0x1b0>)
 8000a92:	18d3      	adds	r3, r2, r3
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	469f      	mov	pc, r3
	{
	case _intensity:
		lcd_puts(1, 7, (int8_t *)"  ");
 8000a98:	4b64      	ldr	r3, [pc, #400]	; (8000c2c <clr_data+0x1b4>)
 8000a9a:	001a      	movs	r2, r3
 8000a9c:	2107      	movs	r1, #7
 8000a9e:	2001      	movs	r0, #1
 8000aa0:	f7ff ff98 	bl	80009d4 <lcd_puts>
		lcd_puts(1, 8, (int8_t *)"  ");
 8000aa4:	4b61      	ldr	r3, [pc, #388]	; (8000c2c <clr_data+0x1b4>)
 8000aa6:	001a      	movs	r2, r3
 8000aa8:	2108      	movs	r1, #8
 8000aaa:	2001      	movs	r0, #1
 8000aac:	f7ff ff92 	bl	80009d4 <lcd_puts>
		lcd_puts(1, 9, (int8_t *)"  ");
 8000ab0:	4b5e      	ldr	r3, [pc, #376]	; (8000c2c <clr_data+0x1b4>)
 8000ab2:	001a      	movs	r2, r3
 8000ab4:	2109      	movs	r1, #9
 8000ab6:	2001      	movs	r0, #1
 8000ab8:	f7ff ff8c 	bl	80009d4 <lcd_puts>
		break;
 8000abc:	e0b0      	b.n	8000c20 <clr_data+0x1a8>
	case _color:
		lcd_puts(2, 7, (int8_t *)"  ");
 8000abe:	4b5b      	ldr	r3, [pc, #364]	; (8000c2c <clr_data+0x1b4>)
 8000ac0:	001a      	movs	r2, r3
 8000ac2:	2107      	movs	r1, #7
 8000ac4:	2002      	movs	r0, #2
 8000ac6:	f7ff ff85 	bl	80009d4 <lcd_puts>
		break;
 8000aca:	e0a9      	b.n	8000c20 <clr_data+0x1a8>
	case _sensor:
		lcd_puts(3, 7, (int8_t *)"  ");
 8000acc:	4b57      	ldr	r3, [pc, #348]	; (8000c2c <clr_data+0x1b4>)
 8000ace:	001a      	movs	r2, r3
 8000ad0:	2107      	movs	r1, #7
 8000ad2:	2003      	movs	r0, #3
 8000ad4:	f7ff ff7e 	bl	80009d4 <lcd_puts>
		lcd_puts(3, 8, (int8_t *)"  ");
 8000ad8:	4b54      	ldr	r3, [pc, #336]	; (8000c2c <clr_data+0x1b4>)
 8000ada:	001a      	movs	r2, r3
 8000adc:	2108      	movs	r1, #8
 8000ade:	2003      	movs	r0, #3
 8000ae0:	f7ff ff78 	bl	80009d4 <lcd_puts>
		lcd_puts(3, 9, (int8_t *)"  ");
 8000ae4:	4b51      	ldr	r3, [pc, #324]	; (8000c2c <clr_data+0x1b4>)
 8000ae6:	001a      	movs	r2, r3
 8000ae8:	2109      	movs	r1, #9
 8000aea:	2003      	movs	r0, #3
 8000aec:	f7ff ff72 	bl	80009d4 <lcd_puts>
		break;
 8000af0:	e096      	b.n	8000c20 <clr_data+0x1a8>

	case _lamp:
		lcd_puts(1, 17, (int8_t *)"  ");
 8000af2:	4b4e      	ldr	r3, [pc, #312]	; (8000c2c <clr_data+0x1b4>)
 8000af4:	001a      	movs	r2, r3
 8000af6:	2111      	movs	r1, #17
 8000af8:	2001      	movs	r0, #1
 8000afa:	f7ff ff6b 	bl	80009d4 <lcd_puts>
		lcd_puts(1, 18, (int8_t *)"  ");
 8000afe:	4b4b      	ldr	r3, [pc, #300]	; (8000c2c <clr_data+0x1b4>)
 8000b00:	001a      	movs	r2, r3
 8000b02:	2112      	movs	r1, #18
 8000b04:	2001      	movs	r0, #1
 8000b06:	f7ff ff65 	bl	80009d4 <lcd_puts>
		lcd_puts(1, 19, (int8_t *)"  ");
 8000b0a:	4b48      	ldr	r3, [pc, #288]	; (8000c2c <clr_data+0x1b4>)
 8000b0c:	001a      	movs	r2, r3
 8000b0e:	2113      	movs	r1, #19
 8000b10:	2001      	movs	r0, #1
 8000b12:	f7ff ff5f 	bl	80009d4 <lcd_puts>
		break;
 8000b16:	e083      	b.n	8000c20 <clr_data+0x1a8>
	case _endo:
		lcd_puts(2, 17, (int8_t *)"  ");
 8000b18:	4b44      	ldr	r3, [pc, #272]	; (8000c2c <clr_data+0x1b4>)
 8000b1a:	001a      	movs	r2, r3
 8000b1c:	2111      	movs	r1, #17
 8000b1e:	2002      	movs	r0, #2
 8000b20:	f7ff ff58 	bl	80009d4 <lcd_puts>
		lcd_puts(2, 18, (int8_t *)"  ");
 8000b24:	4b41      	ldr	r3, [pc, #260]	; (8000c2c <clr_data+0x1b4>)
 8000b26:	001a      	movs	r2, r3
 8000b28:	2112      	movs	r1, #18
 8000b2a:	2002      	movs	r0, #2
 8000b2c:	f7ff ff52 	bl	80009d4 <lcd_puts>
		lcd_puts(2, 19, (int8_t *)"  ");
 8000b30:	4b3e      	ldr	r3, [pc, #248]	; (8000c2c <clr_data+0x1b4>)
 8000b32:	001a      	movs	r2, r3
 8000b34:	2113      	movs	r1, #19
 8000b36:	2002      	movs	r0, #2
 8000b38:	f7ff ff4c 	bl	80009d4 <lcd_puts>
		break;
 8000b3c:	e070      	b.n	8000c20 <clr_data+0x1a8>
	case _depth:
		lcd_puts(3, 17, (int8_t *)" ");
 8000b3e:	4b3c      	ldr	r3, [pc, #240]	; (8000c30 <clr_data+0x1b8>)
 8000b40:	001a      	movs	r2, r3
 8000b42:	2111      	movs	r1, #17
 8000b44:	2003      	movs	r0, #3
 8000b46:	f7ff ff45 	bl	80009d4 <lcd_puts>
		lcd_puts(3, 18, (int8_t *)" ");
 8000b4a:	4b39      	ldr	r3, [pc, #228]	; (8000c30 <clr_data+0x1b8>)
 8000b4c:	001a      	movs	r2, r3
 8000b4e:	2112      	movs	r1, #18
 8000b50:	2003      	movs	r0, #3
 8000b52:	f7ff ff3f 	bl	80009d4 <lcd_puts>
		lcd_puts(3, 19, (int8_t *)" ");
 8000b56:	4b36      	ldr	r3, [pc, #216]	; (8000c30 <clr_data+0x1b8>)
 8000b58:	001a      	movs	r2, r3
 8000b5a:	2113      	movs	r1, #19
 8000b5c:	2003      	movs	r0, #3
 8000b5e:	f7ff ff39 	bl	80009d4 <lcd_puts>
		break;
 8000b62:	e05d      	b.n	8000c20 <clr_data+0x1a8>

	case _focus:
		lcd_puts(0, 10, (int8_t *)" ");
 8000b64:	4b32      	ldr	r3, [pc, #200]	; (8000c30 <clr_data+0x1b8>)
 8000b66:	001a      	movs	r2, r3
 8000b68:	210a      	movs	r1, #10
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f7ff ff32 	bl	80009d4 <lcd_puts>
		lcd_puts(0, 11, (int8_t *)" ");
 8000b70:	4b2f      	ldr	r3, [pc, #188]	; (8000c30 <clr_data+0x1b8>)
 8000b72:	001a      	movs	r2, r3
 8000b74:	210b      	movs	r1, #11
 8000b76:	2000      	movs	r0, #0
 8000b78:	f7ff ff2c 	bl	80009d4 <lcd_puts>
		lcd_puts(0, 12, (int8_t *)" ");
 8000b7c:	4b2c      	ldr	r3, [pc, #176]	; (8000c30 <clr_data+0x1b8>)
 8000b7e:	001a      	movs	r2, r3
 8000b80:	210c      	movs	r1, #12
 8000b82:	2000      	movs	r0, #0
 8000b84:	f7ff ff26 	bl	80009d4 <lcd_puts>
		lcd_puts(0, 13, (int8_t *)" ");
 8000b88:	4b29      	ldr	r3, [pc, #164]	; (8000c30 <clr_data+0x1b8>)
 8000b8a:	001a      	movs	r2, r3
 8000b8c:	210d      	movs	r1, #13
 8000b8e:	2000      	movs	r0, #0
 8000b90:	f7ff ff20 	bl	80009d4 <lcd_puts>
		lcd_puts(0, 14, (int8_t *)" ");
 8000b94:	4b26      	ldr	r3, [pc, #152]	; (8000c30 <clr_data+0x1b8>)
 8000b96:	001a      	movs	r2, r3
 8000b98:	210e      	movs	r1, #14
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	f7ff ff1a 	bl	80009d4 <lcd_puts>
		lcd_puts(0, 15, (int8_t *)" ");
 8000ba0:	4b23      	ldr	r3, [pc, #140]	; (8000c30 <clr_data+0x1b8>)
 8000ba2:	001a      	movs	r2, r3
 8000ba4:	210f      	movs	r1, #15
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	f7ff ff14 	bl	80009d4 <lcd_puts>
		break;
 8000bac:	e038      	b.n	8000c20 <clr_data+0x1a8>


	case _small:
		lcd_puts(1, 10, (int8_t *)" ");
 8000bae:	4b20      	ldr	r3, [pc, #128]	; (8000c30 <clr_data+0x1b8>)
 8000bb0:	001a      	movs	r2, r3
 8000bb2:	210a      	movs	r1, #10
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	f7ff ff0d 	bl	80009d4 <lcd_puts>
		lcd_puts(1, 10, (int8_t *)" ");
 8000bba:	4b1d      	ldr	r3, [pc, #116]	; (8000c30 <clr_data+0x1b8>)
 8000bbc:	001a      	movs	r2, r3
 8000bbe:	210a      	movs	r1, #10
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	f7ff ff07 	bl	80009d4 <lcd_puts>
		lcd_puts(1, 10, (int8_t *)" ");
 8000bc6:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <clr_data+0x1b8>)
 8000bc8:	001a      	movs	r2, r3
 8000bca:	210a      	movs	r1, #10
 8000bcc:	2001      	movs	r0, #1
 8000bce:	f7ff ff01 	bl	80009d4 <lcd_puts>
		break;
 8000bd2:	e025      	b.n	8000c20 <clr_data+0x1a8>



	case _medium:
		lcd_puts(2, 10, (int8_t *)" ");
 8000bd4:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <clr_data+0x1b8>)
 8000bd6:	001a      	movs	r2, r3
 8000bd8:	210a      	movs	r1, #10
 8000bda:	2002      	movs	r0, #2
 8000bdc:	f7ff fefa 	bl	80009d4 <lcd_puts>
		lcd_puts(2, 10, (int8_t *)" ");
 8000be0:	4b13      	ldr	r3, [pc, #76]	; (8000c30 <clr_data+0x1b8>)
 8000be2:	001a      	movs	r2, r3
 8000be4:	210a      	movs	r1, #10
 8000be6:	2002      	movs	r0, #2
 8000be8:	f7ff fef4 	bl	80009d4 <lcd_puts>
		lcd_puts(2, 10, (int8_t *)" ");
 8000bec:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <clr_data+0x1b8>)
 8000bee:	001a      	movs	r2, r3
 8000bf0:	210a      	movs	r1, #10
 8000bf2:	2002      	movs	r0, #2
 8000bf4:	f7ff feee 	bl	80009d4 <lcd_puts>
		break;
 8000bf8:	e012      	b.n	8000c20 <clr_data+0x1a8>


	case _wide:
		lcd_puts(3, 10, (int8_t *)" ");
 8000bfa:	4b0d      	ldr	r3, [pc, #52]	; (8000c30 <clr_data+0x1b8>)
 8000bfc:	001a      	movs	r2, r3
 8000bfe:	210a      	movs	r1, #10
 8000c00:	2003      	movs	r0, #3
 8000c02:	f7ff fee7 	bl	80009d4 <lcd_puts>
		lcd_puts(3, 10, (int8_t *)" ");
 8000c06:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <clr_data+0x1b8>)
 8000c08:	001a      	movs	r2, r3
 8000c0a:	210a      	movs	r1, #10
 8000c0c:	2003      	movs	r0, #3
 8000c0e:	f7ff fee1 	bl	80009d4 <lcd_puts>
		lcd_puts(3, 10, (int8_t *)" ");
 8000c12:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <clr_data+0x1b8>)
 8000c14:	001a      	movs	r2, r3
 8000c16:	210a      	movs	r1, #10
 8000c18:	2003      	movs	r0, #3
 8000c1a:	f7ff fedb 	bl	80009d4 <lcd_puts>
		break;
 8000c1e:	46c0      	nop			; (mov r8, r8)
	}
}
 8000c20:	46c0      	nop			; (mov r8, r8)
 8000c22:	46bd      	mov	sp, r7
 8000c24:	b002      	add	sp, #8
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	08005ce4 	.word	0x08005ce4
 8000c2c:	08005b5c 	.word	0x08005b5c
 8000c30:	08005b60 	.word	0x08005b60

08000c34 <clr_select>:
void clr_select()
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
	lcd_puts(1, 0, (int8_t *)" ");
 8000c38:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <clr_select+0x54>)
 8000c3a:	001a      	movs	r2, r3
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	2001      	movs	r0, #1
 8000c40:	f7ff fec8 	bl	80009d4 <lcd_puts>
	lcd_puts(2, 0, (int8_t *)" ");
 8000c44:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <clr_select+0x54>)
 8000c46:	001a      	movs	r2, r3
 8000c48:	2100      	movs	r1, #0
 8000c4a:	2002      	movs	r0, #2
 8000c4c:	f7ff fec2 	bl	80009d4 <lcd_puts>
	lcd_puts(3, 0, (int8_t *)" ");
 8000c50:	4b0d      	ldr	r3, [pc, #52]	; (8000c88 <clr_select+0x54>)
 8000c52:	001a      	movs	r2, r3
 8000c54:	2100      	movs	r1, #0
 8000c56:	2003      	movs	r0, #3
 8000c58:	f7ff febc 	bl	80009d4 <lcd_puts>
	lcd_puts(1, 10, (int8_t *)" ");
 8000c5c:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <clr_select+0x54>)
 8000c5e:	001a      	movs	r2, r3
 8000c60:	210a      	movs	r1, #10
 8000c62:	2001      	movs	r0, #1
 8000c64:	f7ff feb6 	bl	80009d4 <lcd_puts>
	lcd_puts(2, 10, (int8_t *)" ");
 8000c68:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <clr_select+0x54>)
 8000c6a:	001a      	movs	r2, r3
 8000c6c:	210a      	movs	r1, #10
 8000c6e:	2002      	movs	r0, #2
 8000c70:	f7ff feb0 	bl	80009d4 <lcd_puts>
	lcd_puts(3, 10, (int8_t *)" ");
 8000c74:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <clr_select+0x54>)
 8000c76:	001a      	movs	r2, r3
 8000c78:	210a      	movs	r1, #10
 8000c7a:	2003      	movs	r0, #3
 8000c7c:	f7ff feaa 	bl	80009d4 <lcd_puts>
}
 8000c80:	46c0      	nop			; (mov r8, r8)
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	08005b60 	.word	0x08005b60

08000c8c <lcd_clear>:
void lcd_clear(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
	lcd_write(0, 0x01);
 8000c90:	2101      	movs	r1, #1
 8000c92:	2000      	movs	r0, #0
 8000c94:	f7ff fdbf 	bl	8000816 <lcd_write>
}
 8000c98:	46c0      	nop			; (mov r8, r8)
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
	...

08000ca0 <clock_page>:
	current = current % 60;
	run_time->seconds = current;
}

void clock_page(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
	lcd_clear();
 8000ca4:	f7ff fff2 	bl	8000c8c <lcd_clear>
	lcd_puts(0, 1, (int8_t *)"OTL Total Run Time");
 8000ca8:	4b0d      	ldr	r3, [pc, #52]	; (8000ce0 <clock_page+0x40>)
 8000caa:	001a      	movs	r2, r3
 8000cac:	2101      	movs	r1, #1
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f7ff fe90 	bl	80009d4 <lcd_puts>
	lcd_puts(1, 3, (int8_t *)"Hours");
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <clock_page+0x44>)
 8000cb6:	001a      	movs	r2, r3
 8000cb8:	2103      	movs	r1, #3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	f7ff fe8a 	bl	80009d4 <lcd_puts>
	lcd_puts(2, 3, (int8_t *)"Minutes");
 8000cc0:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <clock_page+0x48>)
 8000cc2:	001a      	movs	r2, r3
 8000cc4:	2103      	movs	r1, #3
 8000cc6:	2002      	movs	r0, #2
 8000cc8:	f7ff fe84 	bl	80009d4 <lcd_puts>
	lcd_puts(3, 3, (int8_t *)"Seconds");
 8000ccc:	4b07      	ldr	r3, [pc, #28]	; (8000cec <clock_page+0x4c>)
 8000cce:	001a      	movs	r2, r3
 8000cd0:	2103      	movs	r1, #3
 8000cd2:	2003      	movs	r0, #3
 8000cd4:	f7ff fe7e 	bl	80009d4 <lcd_puts>
}
 8000cd8:	46c0      	nop			; (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	08005bc0 	.word	0x08005bc0
 8000ce4:	08005bd4 	.word	0x08005bd4
 8000ce8:	08005bdc 	.word	0x08005bdc
 8000cec:	08005be4 	.word	0x08005be4

08000cf0 <Total_Time_Print>:

void Total_Time_Print(uint32_t total)
{
 8000cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cf2:	b087      	sub	sp, #28
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	char buffer[3];
	uint32_t current = total;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	617b      	str	r3, [r7, #20]
	uint8_t h = current / (60 * 60);
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	22e1      	movs	r2, #225	; 0xe1
 8000d00:	0111      	lsls	r1, r2, #4
 8000d02:	0018      	movs	r0, r3
 8000d04:	f7ff fa0a 	bl	800011c <__udivsi3>
 8000d08:	0003      	movs	r3, r0
 8000d0a:	001a      	movs	r2, r3
 8000d0c:	2413      	movs	r4, #19
 8000d0e:	193b      	adds	r3, r7, r4
 8000d10:	701a      	strb	r2, [r3, #0]
	current = current % 3600;
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	22e1      	movs	r2, #225	; 0xe1
 8000d16:	0111      	lsls	r1, r2, #4
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f7ff fa85 	bl	8000228 <__aeabi_uidivmod>
 8000d1e:	000b      	movs	r3, r1
 8000d20:	617b      	str	r3, [r7, #20]
	uint8_t m = current / 60;
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	213c      	movs	r1, #60	; 0x3c
 8000d26:	0018      	movs	r0, r3
 8000d28:	f7ff f9f8 	bl	800011c <__udivsi3>
 8000d2c:	0003      	movs	r3, r0
 8000d2e:	001a      	movs	r2, r3
 8000d30:	2512      	movs	r5, #18
 8000d32:	197b      	adds	r3, r7, r5
 8000d34:	701a      	strb	r2, [r3, #0]
	current = current % 60;
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	213c      	movs	r1, #60	; 0x3c
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f7ff fa74 	bl	8000228 <__aeabi_uidivmod>
 8000d40:	000b      	movs	r3, r1
 8000d42:	617b      	str	r3, [r7, #20]
	uint8_t s = current;
 8000d44:	2611      	movs	r6, #17
 8000d46:	19bb      	adds	r3, r7, r6
 8000d48:	697a      	ldr	r2, [r7, #20]
 8000d4a:	701a      	strb	r2, [r3, #0]
	//		current = current %60;
	//		run_time->seconds = current;

	// clock_page();

	sprintf(buffer, "%02d", h); // run_time->hour
 8000d4c:	193b      	adds	r3, r7, r4
 8000d4e:	781a      	ldrb	r2, [r3, #0]
 8000d50:	4914      	ldr	r1, [pc, #80]	; (8000da4 <Total_Time_Print+0xb4>)
 8000d52:	240c      	movs	r4, #12
 8000d54:	193b      	adds	r3, r7, r4
 8000d56:	0018      	movs	r0, r3
 8000d58:	f004 fa8a 	bl	8005270 <siprintf>
	lcd_puts(1, 0, (int8_t *)buffer);
 8000d5c:	193b      	adds	r3, r7, r4
 8000d5e:	001a      	movs	r2, r3
 8000d60:	2100      	movs	r1, #0
 8000d62:	2001      	movs	r0, #1
 8000d64:	f7ff fe36 	bl	80009d4 <lcd_puts>
	sprintf(buffer, "%02d", m);
 8000d68:	197b      	adds	r3, r7, r5
 8000d6a:	781a      	ldrb	r2, [r3, #0]
 8000d6c:	490d      	ldr	r1, [pc, #52]	; (8000da4 <Total_Time_Print+0xb4>)
 8000d6e:	193b      	adds	r3, r7, r4
 8000d70:	0018      	movs	r0, r3
 8000d72:	f004 fa7d 	bl	8005270 <siprintf>
	lcd_puts(2, 0, (int8_t *)buffer);
 8000d76:	193b      	adds	r3, r7, r4
 8000d78:	001a      	movs	r2, r3
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	2002      	movs	r0, #2
 8000d7e:	f7ff fe29 	bl	80009d4 <lcd_puts>
	sprintf(buffer, "%02d", s);
 8000d82:	19bb      	adds	r3, r7, r6
 8000d84:	781a      	ldrb	r2, [r3, #0]
 8000d86:	4907      	ldr	r1, [pc, #28]	; (8000da4 <Total_Time_Print+0xb4>)
 8000d88:	193b      	adds	r3, r7, r4
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f004 fa70 	bl	8005270 <siprintf>
	lcd_puts(3, 0, (int8_t *)buffer);
 8000d90:	193b      	adds	r3, r7, r4
 8000d92:	001a      	movs	r2, r3
 8000d94:	2100      	movs	r1, #0
 8000d96:	2003      	movs	r0, #3
 8000d98:	f7ff fe1c 	bl	80009d4 <lcd_puts>
}
 8000d9c:	46c0      	nop			; (mov r8, r8)
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	b007      	add	sp, #28
 8000da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000da4:	08005b84 	.word	0x08005b84

08000da8 <home_page>:

void home_page()
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
	lcd_clear();
 8000dac:	f7ff ff6e 	bl	8000c8c <lcd_clear>
	lcd_puts(0, 3, (int8_t *)"COGNATE INDIA");
 8000db0:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <home_page+0x34>)
 8000db2:	001a      	movs	r2, r3
 8000db4:	2103      	movs	r1, #3
 8000db6:	2000      	movs	r0, #0
 8000db8:	f7ff fe0c 	bl	80009d4 <lcd_puts>
	// lcd_puts(1, 3,(int8_t*) "Hours");
	lcd_puts(2, 3, (int8_t *)"VISION SERIES");
 8000dbc:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <home_page+0x38>)
 8000dbe:	001a      	movs	r2, r3
 8000dc0:	2103      	movs	r1, #3
 8000dc2:	2002      	movs	r0, #2
 8000dc4:	f7ff fe06 	bl	80009d4 <lcd_puts>
	lcd_puts(3, 5, (int8_t *)"LED LIGHT");
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <home_page+0x3c>)
 8000dca:	001a      	movs	r2, r3
 8000dcc:	2105      	movs	r1, #5
 8000dce:	2003      	movs	r0, #3
 8000dd0:	f7ff fe00 	bl	80009d4 <lcd_puts>
}
 8000dd4:	46c0      	nop			; (mov r8, r8)
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	08005bec 	.word	0x08005bec
 8000de0:	08005bfc 	.word	0x08005bfc
 8000de4:	08005c0c 	.word	0x08005c0c

08000de8 <update_key_press>:
	sprintf(buffer, "%02d", _data);
	lcd_puts(3, 2, buffer); // x = 2, y = 3
}

uint8_t update_key_press()
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
	if (key_pressed.prv)
 8000dec:	4b4b      	ldr	r3, [pc, #300]	; (8000f1c <update_key_press+0x134>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	07db      	lsls	r3, r3, #31
 8000df2:	0fdb      	lsrs	r3, r3, #31
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d00b      	beq.n	8000e12 <update_key_press+0x2a>
	{
		current_pos.key_number = _prv;
 8000dfa:	4b49      	ldr	r3, [pc, #292]	; (8000f20 <update_key_press+0x138>)
 8000dfc:	785a      	ldrb	r2, [r3, #1]
 8000dfe:	2107      	movs	r1, #7
 8000e00:	438a      	bics	r2, r1
 8000e02:	705a      	strb	r2, [r3, #1]
		key_pressed.prv = 0;
 8000e04:	4a45      	ldr	r2, [pc, #276]	; (8000f1c <update_key_press+0x134>)
 8000e06:	7813      	ldrb	r3, [r2, #0]
 8000e08:	2101      	movs	r1, #1
 8000e0a:	438b      	bics	r3, r1
 8000e0c:	7013      	strb	r3, [r2, #0]
		return _prv;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e081      	b.n	8000f16 <update_key_press+0x12e>
	}
	else if (key_pressed.nxt)
 8000e12:	4b42      	ldr	r3, [pc, #264]	; (8000f1c <update_key_press+0x134>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	079b      	lsls	r3, r3, #30
 8000e18:	0fdb      	lsrs	r3, r3, #31
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d00e      	beq.n	8000e3e <update_key_press+0x56>
	{
		key_pressed.nxt = 0;
 8000e20:	4a3e      	ldr	r2, [pc, #248]	; (8000f1c <update_key_press+0x134>)
 8000e22:	7813      	ldrb	r3, [r2, #0]
 8000e24:	2102      	movs	r1, #2
 8000e26:	438b      	bics	r3, r1
 8000e28:	7013      	strb	r3, [r2, #0]
		current_pos.key_number = _nxt;
 8000e2a:	4b3d      	ldr	r3, [pc, #244]	; (8000f20 <update_key_press+0x138>)
 8000e2c:	785a      	ldrb	r2, [r3, #1]
 8000e2e:	2107      	movs	r1, #7
 8000e30:	438a      	bics	r2, r1
 8000e32:	1c11      	adds	r1, r2, #0
 8000e34:	2201      	movs	r2, #1
 8000e36:	430a      	orrs	r2, r1
 8000e38:	705a      	strb	r2, [r3, #1]

		return _nxt;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e06b      	b.n	8000f16 <update_key_press+0x12e>
	}
	else if (key_pressed.depth)
 8000e3e:	4b37      	ldr	r3, [pc, #220]	; (8000f1c <update_key_press+0x134>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	075b      	lsls	r3, r3, #29
 8000e44:	0fdb      	lsrs	r3, r3, #31
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d037      	beq.n	8000ebc <update_key_press+0xd4>
	{
		key_pressed.depth = 0;
 8000e4c:	4a33      	ldr	r2, [pc, #204]	; (8000f1c <update_key_press+0x134>)
 8000e4e:	7813      	ldrb	r3, [r2, #0]
 8000e50:	2104      	movs	r1, #4
 8000e52:	438b      	bics	r3, r1
 8000e54:	7013      	strb	r3, [r2, #0]
		current_pos.key_number = _depth;
 8000e56:	4b32      	ldr	r3, [pc, #200]	; (8000f20 <update_key_press+0x138>)
 8000e58:	785a      	ldrb	r2, [r3, #1]
 8000e5a:	2107      	movs	r1, #7
 8000e5c:	438a      	bics	r2, r1
 8000e5e:	1c11      	adds	r1, r2, #0
 8000e60:	2202      	movs	r2, #2
 8000e62:	430a      	orrs	r2, r1
 8000e64:	705a      	strb	r2, [r3, #1]
		data_reg.depth = !data_reg.depth;
 8000e66:	4b2f      	ldr	r3, [pc, #188]	; (8000f24 <update_key_press+0x13c>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	b25b      	sxtb	r3, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	09db      	lsrs	r3, r3, #7
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	4b2b      	ldr	r3, [pc, #172]	; (8000f24 <update_key_press+0x13c>)
 8000e76:	01d0      	lsls	r0, r2, #7
 8000e78:	781a      	ldrb	r2, [r3, #0]
 8000e7a:	217f      	movs	r1, #127	; 0x7f
 8000e7c:	400a      	ands	r2, r1
 8000e7e:	1c11      	adds	r1, r2, #0
 8000e80:	1c02      	adds	r2, r0, #0
 8000e82:	430a      	orrs	r2, r1
 8000e84:	701a      	strb	r2, [r3, #0]
		clr_data(depth);
 8000e86:	2006      	movs	r0, #6
 8000e88:	f7ff fdf6 	bl	8000a78 <clr_data>
		clr_select();
 8000e8c:	f7ff fed2 	bl	8000c34 <clr_select>
//		lcd_puts(3, 10, (int8_t *)">");
		if (data_reg.depth)
 8000e90:	4b24      	ldr	r3, [pc, #144]	; (8000f24 <update_key_press+0x13c>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	227f      	movs	r2, #127	; 0x7f
 8000e96:	4393      	bics	r3, r2
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d006      	beq.n	8000eac <update_key_press+0xc4>
			lcd_puts(3, 17, (int8_t *)"ON");
 8000e9e:	4b22      	ldr	r3, [pc, #136]	; (8000f28 <update_key_press+0x140>)
 8000ea0:	001a      	movs	r2, r3
 8000ea2:	2111      	movs	r1, #17
 8000ea4:	2003      	movs	r0, #3
 8000ea6:	f7ff fd95 	bl	80009d4 <lcd_puts>
 8000eaa:	e005      	b.n	8000eb8 <update_key_press+0xd0>
		else
			lcd_puts(3, 17, (int8_t *)"OFF");
 8000eac:	4b1f      	ldr	r3, [pc, #124]	; (8000f2c <update_key_press+0x144>)
 8000eae:	001a      	movs	r2, r3
 8000eb0:	2111      	movs	r1, #17
 8000eb2:	2003      	movs	r0, #3
 8000eb4:	f7ff fd8e 	bl	80009d4 <lcd_puts>

		return _depth;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	e02c      	b.n	8000f16 <update_key_press+0x12e>
	}
	else if (key_pressed.pos)
 8000ebc:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <update_key_press+0x134>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	071b      	lsls	r3, r3, #28
 8000ec2:	0fdb      	lsrs	r3, r3, #31
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d00e      	beq.n	8000ee8 <update_key_press+0x100>
	{
		key_pressed.pos = 0;
 8000eca:	4a14      	ldr	r2, [pc, #80]	; (8000f1c <update_key_press+0x134>)
 8000ecc:	7813      	ldrb	r3, [r2, #0]
 8000ece:	2108      	movs	r1, #8
 8000ed0:	438b      	bics	r3, r1
 8000ed2:	7013      	strb	r3, [r2, #0]
		current_pos.key_number = _pos;
 8000ed4:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <update_key_press+0x138>)
 8000ed6:	785a      	ldrb	r2, [r3, #1]
 8000ed8:	2107      	movs	r1, #7
 8000eda:	438a      	bics	r2, r1
 8000edc:	1c11      	adds	r1, r2, #0
 8000ede:	2204      	movs	r2, #4
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	705a      	strb	r2, [r3, #1]
		return _pos;
 8000ee4:	2304      	movs	r3, #4
 8000ee6:	e016      	b.n	8000f16 <update_key_press+0x12e>
	}
	else if (key_pressed.neg)
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <update_key_press+0x134>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	06db      	lsls	r3, r3, #27
 8000eee:	0fdb      	lsrs	r3, r3, #31
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d00e      	beq.n	8000f14 <update_key_press+0x12c>
	{
		key_pressed.neg = 0;
 8000ef6:	4a09      	ldr	r2, [pc, #36]	; (8000f1c <update_key_press+0x134>)
 8000ef8:	7813      	ldrb	r3, [r2, #0]
 8000efa:	2110      	movs	r1, #16
 8000efc:	438b      	bics	r3, r1
 8000efe:	7013      	strb	r3, [r2, #0]
		current_pos.key_number = _neg;
 8000f00:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <update_key_press+0x138>)
 8000f02:	785a      	ldrb	r2, [r3, #1]
 8000f04:	2107      	movs	r1, #7
 8000f06:	438a      	bics	r2, r1
 8000f08:	1c11      	adds	r1, r2, #0
 8000f0a:	2203      	movs	r2, #3
 8000f0c:	430a      	orrs	r2, r1
 8000f0e:	705a      	strb	r2, [r3, #1]
		return _neg;
 8000f10:	2303      	movs	r3, #3
 8000f12:	e000      	b.n	8000f16 <update_key_press+0x12e>
	}

	return 0;
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	0018      	movs	r0, r3
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	200000bc 	.word	0x200000bc
 8000f20:	20000004 	.word	0x20000004
 8000f24:	20000008 	.word	0x20000008
 8000f28:	08005c20 	.word	0x08005c20
 8000f2c:	08005c24 	.word	0x08005c24

08000f30 <set_data_positive>:
//	current_pos.position_cursor =  sensor;
//	data_reg.sensor = !data_reg.sensor;
//
// }
void set_data_positive()
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
	if(pg2_fc == 0)
 8000f34:	4b4c      	ldr	r3, [pc, #304]	; (8001068 <set_data_positive+0x138>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d15f      	bne.n	8000ffc <set_data_positive+0xcc>
	{
		switch (current_pos.position_cursor)
 8000f3c:	4b4b      	ldr	r3, [pc, #300]	; (800106c <set_data_positive+0x13c>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	b25b      	sxtb	r3, r3
 8000f42:	2b07      	cmp	r3, #7
 8000f44:	d900      	bls.n	8000f48 <set_data_positive+0x18>
 8000f46:	e08c      	b.n	8001062 <set_data_positive+0x132>
 8000f48:	009a      	lsls	r2, r3, #2
 8000f4a:	4b49      	ldr	r3, [pc, #292]	; (8001070 <set_data_positive+0x140>)
 8000f4c:	18d3      	adds	r3, r2, r3
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	469f      	mov	pc, r3
		{
		case intensity:
			data_reg.intensity++;
 8000f52:	4b48      	ldr	r3, [pc, #288]	; (8001074 <set_data_positive+0x144>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	071b      	lsls	r3, r3, #28
 8000f58:	0f1b      	lsrs	r3, r3, #28
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	1c1a      	adds	r2, r3, #0
 8000f60:	230f      	movs	r3, #15
 8000f62:	4013      	ands	r3, r2
 8000f64:	b2da      	uxtb	r2, r3
 8000f66:	4b43      	ldr	r3, [pc, #268]	; (8001074 <set_data_positive+0x144>)
 8000f68:	210f      	movs	r1, #15
 8000f6a:	400a      	ands	r2, r1
 8000f6c:	0010      	movs	r0, r2
 8000f6e:	781a      	ldrb	r2, [r3, #0]
 8000f70:	210f      	movs	r1, #15
 8000f72:	438a      	bics	r2, r1
 8000f74:	1c11      	adds	r1, r2, #0
 8000f76:	1c02      	adds	r2, r0, #0
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	701a      	strb	r2, [r3, #0]
			if (data_reg.intensity >= 10)
 8000f7c:	4b3d      	ldr	r3, [pc, #244]	; (8001074 <set_data_positive+0x144>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	071b      	lsls	r3, r3, #28
 8000f82:	0f1b      	lsrs	r3, r3, #28
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	2b09      	cmp	r3, #9
 8000f88:	d800      	bhi.n	8000f8c <set_data_positive+0x5c>
 8000f8a:	e067      	b.n	800105c <set_data_positive+0x12c>
				data_reg.intensity = 10;
 8000f8c:	4b39      	ldr	r3, [pc, #228]	; (8001074 <set_data_positive+0x144>)
 8000f8e:	781a      	ldrb	r2, [r3, #0]
 8000f90:	210f      	movs	r1, #15
 8000f92:	438a      	bics	r2, r1
 8000f94:	1c11      	adds	r1, r2, #0
 8000f96:	220a      	movs	r2, #10
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	701a      	strb	r2, [r3, #0]
			break;
 8000f9c:	e05e      	b.n	800105c <set_data_positive+0x12c>
		case color:
			data_reg.color++;
 8000f9e:	4b35      	ldr	r3, [pc, #212]	; (8001074 <set_data_positive+0x144>)
 8000fa0:	785b      	ldrb	r3, [r3, #1]
 8000fa2:	b25b      	sxtb	r3, r3
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	b25a      	sxtb	r2, r3
 8000fac:	4b31      	ldr	r3, [pc, #196]	; (8001074 <set_data_positive+0x144>)
 8000fae:	705a      	strb	r2, [r3, #1]
			if (data_reg.color > 5)
 8000fb0:	4b30      	ldr	r3, [pc, #192]	; (8001074 <set_data_positive+0x144>)
 8000fb2:	785b      	ldrb	r3, [r3, #1]
 8000fb4:	b25b      	sxtb	r3, r3
 8000fb6:	2b05      	cmp	r3, #5
 8000fb8:	dd52      	ble.n	8001060 <set_data_positive+0x130>
				data_reg.color = 5;
 8000fba:	4b2e      	ldr	r3, [pc, #184]	; (8001074 <set_data_positive+0x144>)
 8000fbc:	2205      	movs	r2, #5
 8000fbe:	705a      	strb	r2, [r3, #1]
			break;
 8000fc0:	e04e      	b.n	8001060 <set_data_positive+0x130>
		case sensor:
			data_reg.sensor = on;
 8000fc2:	4b2c      	ldr	r3, [pc, #176]	; (8001074 <set_data_positive+0x144>)
 8000fc4:	781a      	ldrb	r2, [r3, #0]
 8000fc6:	2110      	movs	r1, #16
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	701a      	strb	r2, [r3, #0]
			break;
 8000fcc:	e049      	b.n	8001062 <set_data_positive+0x132>
		case lamp:
			data_reg.lamp = on;
 8000fce:	4b29      	ldr	r3, [pc, #164]	; (8001074 <set_data_positive+0x144>)
 8000fd0:	781a      	ldrb	r2, [r3, #0]
 8000fd2:	2120      	movs	r1, #32
 8000fd4:	430a      	orrs	r2, r1
 8000fd6:	701a      	strb	r2, [r3, #0]
			break;
 8000fd8:	e043      	b.n	8001062 <set_data_positive+0x132>
		case endo:
			data_reg.endo = on;
 8000fda:	4b26      	ldr	r3, [pc, #152]	; (8001074 <set_data_positive+0x144>)
 8000fdc:	781a      	ldrb	r2, [r3, #0]
 8000fde:	2140      	movs	r1, #64	; 0x40
 8000fe0:	430a      	orrs	r2, r1
 8000fe2:	701a      	strb	r2, [r3, #0]
			break;
 8000fe4:	e03d      	b.n	8001062 <set_data_positive+0x132>
		case depth:
			data_reg.depth = on;
 8000fe6:	4b23      	ldr	r3, [pc, #140]	; (8001074 <set_data_positive+0x144>)
 8000fe8:	781a      	ldrb	r2, [r3, #0]
 8000fea:	2180      	movs	r1, #128	; 0x80
 8000fec:	4249      	negs	r1, r1
 8000fee:	430a      	orrs	r2, r1
 8000ff0:	701a      	strb	r2, [r3, #0]
			break;
 8000ff2:	e036      	b.n	8001062 <set_data_positive+0x132>
		case 7:
			pg2_fc = on;
 8000ff4:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <set_data_positive+0x138>)
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	701a      	strb	r2, [r3, #0]
			break;
 8000ffa:	e032      	b.n	8001062 <set_data_positive+0x132>
		}
	}

	else
	{
		switch (current_pos.position_cursor)
 8000ffc:	4b1b      	ldr	r3, [pc, #108]	; (800106c <set_data_positive+0x13c>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	b25b      	sxtb	r3, r3
 8001002:	2b07      	cmp	r3, #7
 8001004:	d008      	beq.n	8001018 <set_data_positive+0xe8>
 8001006:	dc2c      	bgt.n	8001062 <set_data_positive+0x132>
 8001008:	2b03      	cmp	r3, #3
 800100a:	d01d      	beq.n	8001048 <set_data_positive+0x118>
 800100c:	dc29      	bgt.n	8001062 <set_data_positive+0x132>
 800100e:	2b01      	cmp	r3, #1
 8001010:	d006      	beq.n	8001020 <set_data_positive+0xf0>
 8001012:	2b02      	cmp	r3, #2
 8001014:	d00e      	beq.n	8001034 <set_data_positive+0x104>
			break;

		}

	}
}
 8001016:	e024      	b.n	8001062 <set_data_positive+0x132>
			pg2_fc = on;
 8001018:	4b13      	ldr	r3, [pc, #76]	; (8001068 <set_data_positive+0x138>)
 800101a:	2201      	movs	r2, #1
 800101c:	701a      	strb	r2, [r3, #0]
			break;
 800101e:	e020      	b.n	8001062 <set_data_positive+0x132>
			pg3_sm = on;
 8001020:	4b15      	ldr	r3, [pc, #84]	; (8001078 <set_data_positive+0x148>)
 8001022:	2201      	movs	r2, #1
 8001024:	701a      	strb	r2, [r3, #0]
			pg3_md = off;
 8001026:	4b15      	ldr	r3, [pc, #84]	; (800107c <set_data_positive+0x14c>)
 8001028:	2200      	movs	r2, #0
 800102a:	701a      	strb	r2, [r3, #0]
			pg3_wd = off;
 800102c:	4b14      	ldr	r3, [pc, #80]	; (8001080 <set_data_positive+0x150>)
 800102e:	2200      	movs	r2, #0
 8001030:	701a      	strb	r2, [r3, #0]
			break;
 8001032:	e016      	b.n	8001062 <set_data_positive+0x132>
			pg3_sm = off;
 8001034:	4b10      	ldr	r3, [pc, #64]	; (8001078 <set_data_positive+0x148>)
 8001036:	2200      	movs	r2, #0
 8001038:	701a      	strb	r2, [r3, #0]
			pg3_md = on;
 800103a:	4b10      	ldr	r3, [pc, #64]	; (800107c <set_data_positive+0x14c>)
 800103c:	2201      	movs	r2, #1
 800103e:	701a      	strb	r2, [r3, #0]
			pg3_wd = off;
 8001040:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <set_data_positive+0x150>)
 8001042:	2200      	movs	r2, #0
 8001044:	701a      	strb	r2, [r3, #0]
			break;
 8001046:	e00c      	b.n	8001062 <set_data_positive+0x132>
			pg3_sm = off;
 8001048:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <set_data_positive+0x148>)
 800104a:	2200      	movs	r2, #0
 800104c:	701a      	strb	r2, [r3, #0]
			pg3_md = off;
 800104e:	4b0b      	ldr	r3, [pc, #44]	; (800107c <set_data_positive+0x14c>)
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]
			pg3_wd = on;
 8001054:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <set_data_positive+0x150>)
 8001056:	2201      	movs	r2, #1
 8001058:	701a      	strb	r2, [r3, #0]
			break;
 800105a:	e002      	b.n	8001062 <set_data_positive+0x132>
			break;
 800105c:	46c0      	nop			; (mov r8, r8)
 800105e:	e000      	b.n	8001062 <set_data_positive+0x132>
			break;
 8001060:	46c0      	nop			; (mov r8, r8)
}
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	200000b6 	.word	0x200000b6
 800106c:	20000004 	.word	0x20000004
 8001070:	08005d10 	.word	0x08005d10
 8001074:	20000008 	.word	0x20000008
 8001078:	200000b7 	.word	0x200000b7
 800107c:	200000b8 	.word	0x200000b8
 8001080:	200000b9 	.word	0x200000b9

08001084 <set_data_negative>:

void set_data_negative()
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
	if(pg2_fc == 0)
 8001088:	4b42      	ldr	r3, [pc, #264]	; (8001194 <set_data_negative+0x110>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d15d      	bne.n	800114c <set_data_negative+0xc8>
	{

		switch (current_pos.position_cursor)
 8001090:	4b41      	ldr	r3, [pc, #260]	; (8001198 <set_data_negative+0x114>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	b25b      	sxtb	r3, r3
 8001096:	2b07      	cmp	r3, #7
 8001098:	d900      	bls.n	800109c <set_data_negative+0x18>
 800109a:	e078      	b.n	800118e <set_data_negative+0x10a>
 800109c:	009a      	lsls	r2, r3, #2
 800109e:	4b3f      	ldr	r3, [pc, #252]	; (800119c <set_data_negative+0x118>)
 80010a0:	18d3      	adds	r3, r2, r3
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	469f      	mov	pc, r3
		{
		case intensity:
			data_reg.intensity--;
 80010a6:	4b3e      	ldr	r3, [pc, #248]	; (80011a0 <set_data_negative+0x11c>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	071b      	lsls	r3, r3, #28
 80010ac:	0f1b      	lsrs	r3, r3, #28
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	330f      	adds	r3, #15
 80010b2:	1c1a      	adds	r2, r3, #0
 80010b4:	230f      	movs	r3, #15
 80010b6:	4013      	ands	r3, r2
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	4b39      	ldr	r3, [pc, #228]	; (80011a0 <set_data_negative+0x11c>)
 80010bc:	210f      	movs	r1, #15
 80010be:	400a      	ands	r2, r1
 80010c0:	0010      	movs	r0, r2
 80010c2:	781a      	ldrb	r2, [r3, #0]
 80010c4:	210f      	movs	r1, #15
 80010c6:	438a      	bics	r2, r1
 80010c8:	1c11      	adds	r1, r2, #0
 80010ca:	1c02      	adds	r2, r0, #0
 80010cc:	430a      	orrs	r2, r1
 80010ce:	701a      	strb	r2, [r3, #0]
			if (data_reg.intensity <= 1)
 80010d0:	4b33      	ldr	r3, [pc, #204]	; (80011a0 <set_data_negative+0x11c>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	071b      	lsls	r3, r3, #28
 80010d6:	0f1b      	lsrs	r3, r3, #28
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d854      	bhi.n	8001188 <set_data_negative+0x104>
				data_reg.intensity = 1;
 80010de:	4b30      	ldr	r3, [pc, #192]	; (80011a0 <set_data_negative+0x11c>)
 80010e0:	781a      	ldrb	r2, [r3, #0]
 80010e2:	210f      	movs	r1, #15
 80010e4:	438a      	bics	r2, r1
 80010e6:	1c11      	adds	r1, r2, #0
 80010e8:	2201      	movs	r2, #1
 80010ea:	430a      	orrs	r2, r1
 80010ec:	701a      	strb	r2, [r3, #0]
			break;
 80010ee:	e04b      	b.n	8001188 <set_data_negative+0x104>
		case color:
			data_reg.color--;
 80010f0:	4b2b      	ldr	r3, [pc, #172]	; (80011a0 <set_data_negative+0x11c>)
 80010f2:	785b      	ldrb	r3, [r3, #1]
 80010f4:	b25b      	sxtb	r3, r3
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	3b01      	subs	r3, #1
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	b25a      	sxtb	r2, r3
 80010fe:	4b28      	ldr	r3, [pc, #160]	; (80011a0 <set_data_negative+0x11c>)
 8001100:	705a      	strb	r2, [r3, #1]
			if (data_reg.color < -5)
 8001102:	4b27      	ldr	r3, [pc, #156]	; (80011a0 <set_data_negative+0x11c>)
 8001104:	785b      	ldrb	r3, [r3, #1]
 8001106:	b25b      	sxtb	r3, r3
 8001108:	3305      	adds	r3, #5
 800110a:	da3f      	bge.n	800118c <set_data_negative+0x108>
				data_reg.color = -5;
 800110c:	4b24      	ldr	r3, [pc, #144]	; (80011a0 <set_data_negative+0x11c>)
 800110e:	22fb      	movs	r2, #251	; 0xfb
 8001110:	705a      	strb	r2, [r3, #1]
			break;
 8001112:	e03b      	b.n	800118c <set_data_negative+0x108>
		case sensor:
			data_reg.sensor = off;
 8001114:	4b22      	ldr	r3, [pc, #136]	; (80011a0 <set_data_negative+0x11c>)
 8001116:	781a      	ldrb	r2, [r3, #0]
 8001118:	2110      	movs	r1, #16
 800111a:	438a      	bics	r2, r1
 800111c:	701a      	strb	r2, [r3, #0]
			break;
 800111e:	e036      	b.n	800118e <set_data_negative+0x10a>
		case lamp:
			data_reg.lamp = off;
 8001120:	4b1f      	ldr	r3, [pc, #124]	; (80011a0 <set_data_negative+0x11c>)
 8001122:	781a      	ldrb	r2, [r3, #0]
 8001124:	2120      	movs	r1, #32
 8001126:	438a      	bics	r2, r1
 8001128:	701a      	strb	r2, [r3, #0]
			break;
 800112a:	e030      	b.n	800118e <set_data_negative+0x10a>
		case endo:
			data_reg.endo = off;
 800112c:	4b1c      	ldr	r3, [pc, #112]	; (80011a0 <set_data_negative+0x11c>)
 800112e:	781a      	ldrb	r2, [r3, #0]
 8001130:	2140      	movs	r1, #64	; 0x40
 8001132:	438a      	bics	r2, r1
 8001134:	701a      	strb	r2, [r3, #0]
			break;
 8001136:	e02a      	b.n	800118e <set_data_negative+0x10a>
		case depth:
			data_reg.depth = off;
 8001138:	4b19      	ldr	r3, [pc, #100]	; (80011a0 <set_data_negative+0x11c>)
 800113a:	781a      	ldrb	r2, [r3, #0]
 800113c:	217f      	movs	r1, #127	; 0x7f
 800113e:	400a      	ands	r2, r1
 8001140:	701a      	strb	r2, [r3, #0]
			break;
 8001142:	e024      	b.n	800118e <set_data_negative+0x10a>
		case 7:
			pg2_fc = off;
 8001144:	4b13      	ldr	r3, [pc, #76]	; (8001194 <set_data_negative+0x110>)
 8001146:	2200      	movs	r2, #0
 8001148:	701a      	strb	r2, [r3, #0]
			break;
 800114a:	e020      	b.n	800118e <set_data_negative+0x10a>
		}
	}

	else
	{
		switch (current_pos.position_cursor)
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <set_data_negative+0x114>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	b25b      	sxtb	r3, r3
 8001152:	2b07      	cmp	r3, #7
 8001154:	d008      	beq.n	8001168 <set_data_negative+0xe4>
 8001156:	dc1a      	bgt.n	800118e <set_data_negative+0x10a>
 8001158:	2b03      	cmp	r3, #3
 800115a:	d011      	beq.n	8001180 <set_data_negative+0xfc>
 800115c:	dc17      	bgt.n	800118e <set_data_negative+0x10a>
 800115e:	2b01      	cmp	r3, #1
 8001160:	d006      	beq.n	8001170 <set_data_negative+0xec>
 8001162:	2b02      	cmp	r3, #2
 8001164:	d008      	beq.n	8001178 <set_data_negative+0xf4>
			break;

		}

	}
}
 8001166:	e012      	b.n	800118e <set_data_negative+0x10a>
			pg2_fc = off;
 8001168:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <set_data_negative+0x110>)
 800116a:	2200      	movs	r2, #0
 800116c:	701a      	strb	r2, [r3, #0]
			break;
 800116e:	e00e      	b.n	800118e <set_data_negative+0x10a>
			pg3_sm = off;
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <set_data_negative+0x120>)
 8001172:	2200      	movs	r2, #0
 8001174:	701a      	strb	r2, [r3, #0]
			break;
 8001176:	e00a      	b.n	800118e <set_data_negative+0x10a>
			pg3_md = off;
 8001178:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <set_data_negative+0x124>)
 800117a:	2200      	movs	r2, #0
 800117c:	701a      	strb	r2, [r3, #0]
			break;
 800117e:	e006      	b.n	800118e <set_data_negative+0x10a>
			pg3_wd = off;
 8001180:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <set_data_negative+0x128>)
 8001182:	2200      	movs	r2, #0
 8001184:	701a      	strb	r2, [r3, #0]
			break;
 8001186:	e002      	b.n	800118e <set_data_negative+0x10a>
			break;
 8001188:	46c0      	nop			; (mov r8, r8)
 800118a:	e000      	b.n	800118e <set_data_negative+0x10a>
			break;
 800118c:	46c0      	nop			; (mov r8, r8)
}
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	200000b6 	.word	0x200000b6
 8001198:	20000004 	.word	0x20000004
 800119c:	08005d30 	.word	0x08005d30
 80011a0:	20000008 	.word	0x20000008
 80011a4:	200000b7 	.word	0x200000b7
 80011a8:	200000b8 	.word	0x200000b8
 80011ac:	200000b9 	.word	0x200000b9

080011b0 <update_new_data>:


void update_new_data()
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
	switch (current_pos.key_number)
 80011b4:	4b2e      	ldr	r3, [pc, #184]	; (8001270 <update_new_data+0xc0>)
 80011b6:	785b      	ldrb	r3, [r3, #1]
 80011b8:	075b      	lsls	r3, r3, #29
 80011ba:	0f5b      	lsrs	r3, r3, #29
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	2b04      	cmp	r3, #4
 80011c0:	d853      	bhi.n	800126a <update_new_data+0xba>
 80011c2:	009a      	lsls	r2, r3, #2
 80011c4:	4b2b      	ldr	r3, [pc, #172]	; (8001274 <update_new_data+0xc4>)
 80011c6:	18d3      	adds	r3, r2, r3
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	469f      	mov	pc, r3
	{
	case _prv:
		current_pos.position_cursor--;
 80011cc:	4b28      	ldr	r3, [pc, #160]	; (8001270 <update_new_data+0xc0>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	b25b      	sxtb	r3, r3
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	3b01      	subs	r3, #1
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	b25a      	sxtb	r2, r3
 80011da:	4b25      	ldr	r3, [pc, #148]	; (8001270 <update_new_data+0xc0>)
 80011dc:	701a      	strb	r2, [r3, #0]
//		{
//			lcd_clear();
//			page_2_print();
//		}

		if (current_pos.position_cursor <= 0)
 80011de:	4b24      	ldr	r3, [pc, #144]	; (8001270 <update_new_data+0xc0>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	b25b      	sxtb	r3, r3
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	dc3d      	bgt.n	8001264 <update_new_data+0xb4>
		{
//			lcd_clear();
			current_pos.position_cursor = 7;
 80011e8:	4b21      	ldr	r3, [pc, #132]	; (8001270 <update_new_data+0xc0>)
 80011ea:	2207      	movs	r2, #7
 80011ec:	701a      	strb	r2, [r3, #0]

		}
		break;
 80011ee:	e039      	b.n	8001264 <update_new_data+0xb4>
	case _nxt:
		current_pos.position_cursor++;
 80011f0:	4b1f      	ldr	r3, [pc, #124]	; (8001270 <update_new_data+0xc0>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	b25b      	sxtb	r3, r3
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	3301      	adds	r3, #1
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	b25a      	sxtb	r2, r3
 80011fe:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <update_new_data+0xc0>)
 8001200:	701a      	strb	r2, [r3, #0]
//		if (current_pos.position_cursor == 7)
//		{
//			page_2_print();
//		}

		if (current_pos.position_cursor > 7)
 8001202:	4b1b      	ldr	r3, [pc, #108]	; (8001270 <update_new_data+0xc0>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	b25b      	sxtb	r3, r3
 8001208:	2b07      	cmp	r3, #7
 800120a:	dd2d      	ble.n	8001268 <update_new_data+0xb8>
		{

				current_pos.position_cursor = 1;
 800120c:	4b18      	ldr	r3, [pc, #96]	; (8001270 <update_new_data+0xc0>)
 800120e:	2201      	movs	r2, #1
 8001210:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001212:	e029      	b.n	8001268 <update_new_data+0xb8>
	case _depth:
//		data_reg.depth = !data_reg.depth;
		if (data_reg.depth)
 8001214:	4b18      	ldr	r3, [pc, #96]	; (8001278 <update_new_data+0xc8>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	227f      	movs	r2, #127	; 0x7f
 800121a:	4393      	bics	r3, r2
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2b00      	cmp	r3, #0
 8001220:	d00e      	beq.n	8001240 <update_new_data+0x90>
		{
			current_pos.position_cursor = intensity;
 8001222:	4b13      	ldr	r3, [pc, #76]	; (8001270 <update_new_data+0xc0>)
 8001224:	2201      	movs	r2, #1
 8001226:	701a      	strb	r2, [r3, #0]
			data_reg.intensity = 10;
 8001228:	4b13      	ldr	r3, [pc, #76]	; (8001278 <update_new_data+0xc8>)
 800122a:	781a      	ldrb	r2, [r3, #0]
 800122c:	210f      	movs	r1, #15
 800122e:	438a      	bics	r2, r1
 8001230:	1c11      	adds	r1, r2, #0
 8001232:	220a      	movs	r2, #10
 8001234:	430a      	orrs	r2, r1
 8001236:	701a      	strb	r2, [r3, #0]
			depth_press = 1;
 8001238:	4b10      	ldr	r3, [pc, #64]	; (800127c <update_new_data+0xcc>)
 800123a:	2201      	movs	r2, #1
 800123c:	701a      	strb	r2, [r3, #0]
		{
			current_pos.position_cursor = intensity;
			data_reg.intensity = 1;
//			data_reg.depth = off;
		}
		break;
 800123e:	e014      	b.n	800126a <update_new_data+0xba>
			current_pos.position_cursor = intensity;
 8001240:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <update_new_data+0xc0>)
 8001242:	2201      	movs	r2, #1
 8001244:	701a      	strb	r2, [r3, #0]
			data_reg.intensity = 1;
 8001246:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <update_new_data+0xc8>)
 8001248:	781a      	ldrb	r2, [r3, #0]
 800124a:	210f      	movs	r1, #15
 800124c:	438a      	bics	r2, r1
 800124e:	1c11      	adds	r1, r2, #0
 8001250:	2201      	movs	r2, #1
 8001252:	430a      	orrs	r2, r1
 8001254:	701a      	strb	r2, [r3, #0]
		break;
 8001256:	e008      	b.n	800126a <update_new_data+0xba>
	case _pos:
		set_data_positive();
 8001258:	f7ff fe6a 	bl	8000f30 <set_data_positive>
		break;
 800125c:	e005      	b.n	800126a <update_new_data+0xba>
	case _neg:
		set_data_negative();
 800125e:	f7ff ff11 	bl	8001084 <set_data_negative>
		break;
 8001262:	e002      	b.n	800126a <update_new_data+0xba>
		break;
 8001264:	46c0      	nop			; (mov r8, r8)
 8001266:	e000      	b.n	800126a <update_new_data+0xba>
		break;
 8001268:	46c0      	nop			; (mov r8, r8)

	}
}
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000004 	.word	0x20000004
 8001274:	08005d50 	.word	0x08005d50
 8001278:	20000008 	.word	0x20000008
 800127c:	200000b4 	.word	0x200000b4

08001280 <page_2_print>:

void page_2_print()
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
	lcd_puts(0, 0, (int8_t *)">");
 8001284:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <page_2_print+0x24>)
 8001286:	001a      	movs	r2, r3
 8001288:	2100      	movs	r1, #0
 800128a:	2000      	movs	r0, #0
 800128c:	f7ff fba2 	bl	80009d4 <lcd_puts>
	lcd_puts(0, 1, (int8_t *)"FOCUS  :");
 8001290:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <page_2_print+0x28>)
 8001292:	001a      	movs	r2, r3
 8001294:	2101      	movs	r1, #1
 8001296:	2000      	movs	r0, #0
 8001298:	f7ff fb9c 	bl	80009d4 <lcd_puts>

}
 800129c:	46c0      	nop			; (mov r8, r8)
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	46c0      	nop			; (mov r8, r8)
 80012a4:	08005c28 	.word	0x08005c28
 80012a8:	08005c2c 	.word	0x08005c2c

080012ac <page_3_print>:

void page_3_print()
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
	char buf[3];
	lcd_puts(0, 0, (int8_t *)">");
 80012b2:	4b2f      	ldr	r3, [pc, #188]	; (8001370 <page_3_print+0xc4>)
 80012b4:	001a      	movs	r2, r3
 80012b6:	2100      	movs	r1, #0
 80012b8:	2000      	movs	r0, #0
 80012ba:	f7ff fb8b 	bl	80009d4 <lcd_puts>
	lcd_puts(0, 1, (int8_t *)"FOCUS  :");
 80012be:	4b2d      	ldr	r3, [pc, #180]	; (8001374 <page_3_print+0xc8>)
 80012c0:	001a      	movs	r2, r3
 80012c2:	2101      	movs	r1, #1
 80012c4:	2000      	movs	r0, #0
 80012c6:	f7ff fb85 	bl	80009d4 <lcd_puts>
	lcd_puts(1, 1, (int8_t *)"SMALL  : ");
 80012ca:	4b2b      	ldr	r3, [pc, #172]	; (8001378 <page_3_print+0xcc>)
 80012cc:	001a      	movs	r2, r3
 80012ce:	2101      	movs	r1, #1
 80012d0:	2001      	movs	r0, #1
 80012d2:	f7ff fb7f 	bl	80009d4 <lcd_puts>
	lcd_puts(2, 1, (int8_t *)"Medium : ");
 80012d6:	4b29      	ldr	r3, [pc, #164]	; (800137c <page_3_print+0xd0>)
 80012d8:	001a      	movs	r2, r3
 80012da:	2101      	movs	r1, #1
 80012dc:	2002      	movs	r0, #2
 80012de:	f7ff fb79 	bl	80009d4 <lcd_puts>
	lcd_puts(3, 1, (int8_t *)"Wide   : ");
 80012e2:	4b27      	ldr	r3, [pc, #156]	; (8001380 <page_3_print+0xd4>)
 80012e4:	001a      	movs	r2, r3
 80012e6:	2101      	movs	r1, #1
 80012e8:	2003      	movs	r0, #3
 80012ea:	f7ff fb73 	bl	80009d4 <lcd_puts>



	clr_data(8);
 80012ee:	2008      	movs	r0, #8
 80012f0:	f7ff fbc2 	bl	8000a78 <clr_data>
	if (pg3_sm)
 80012f4:	4b23      	ldr	r3, [pc, #140]	; (8001384 <page_3_print+0xd8>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d006      	beq.n	800130a <page_3_print+0x5e>
		lcd_puts(1, 10, (int8_t *)"ON");
 80012fc:	4b22      	ldr	r3, [pc, #136]	; (8001388 <page_3_print+0xdc>)
 80012fe:	001a      	movs	r2, r3
 8001300:	210a      	movs	r1, #10
 8001302:	2001      	movs	r0, #1
 8001304:	f7ff fb66 	bl	80009d4 <lcd_puts>
 8001308:	e005      	b.n	8001316 <page_3_print+0x6a>
	else
		lcd_puts(1, 10, (int8_t *)"OFF");
 800130a:	4b20      	ldr	r3, [pc, #128]	; (800138c <page_3_print+0xe0>)
 800130c:	001a      	movs	r2, r3
 800130e:	210a      	movs	r1, #10
 8001310:	2001      	movs	r0, #1
 8001312:	f7ff fb5f 	bl	80009d4 <lcd_puts>

	clr_data(9);
 8001316:	2009      	movs	r0, #9
 8001318:	f7ff fbae 	bl	8000a78 <clr_data>
	if (pg3_md)
 800131c:	4b1c      	ldr	r3, [pc, #112]	; (8001390 <page_3_print+0xe4>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d006      	beq.n	8001332 <page_3_print+0x86>
		lcd_puts(2, 10, (int8_t *)"ON");
 8001324:	4b18      	ldr	r3, [pc, #96]	; (8001388 <page_3_print+0xdc>)
 8001326:	001a      	movs	r2, r3
 8001328:	210a      	movs	r1, #10
 800132a:	2002      	movs	r0, #2
 800132c:	f7ff fb52 	bl	80009d4 <lcd_puts>
 8001330:	e005      	b.n	800133e <page_3_print+0x92>
	else
		lcd_puts(2, 10, (int8_t *)"OFF");
 8001332:	4b16      	ldr	r3, [pc, #88]	; (800138c <page_3_print+0xe0>)
 8001334:	001a      	movs	r2, r3
 8001336:	210a      	movs	r1, #10
 8001338:	2002      	movs	r0, #2
 800133a:	f7ff fb4b 	bl	80009d4 <lcd_puts>

	clr_data(10);
 800133e:	200a      	movs	r0, #10
 8001340:	f7ff fb9a 	bl	8000a78 <clr_data>
	if (pg3_wd)
 8001344:	4b13      	ldr	r3, [pc, #76]	; (8001394 <page_3_print+0xe8>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d006      	beq.n	800135a <page_3_print+0xae>
		lcd_puts(3, 10, (int8_t *)"ON");
 800134c:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <page_3_print+0xdc>)
 800134e:	001a      	movs	r2, r3
 8001350:	210a      	movs	r1, #10
 8001352:	2003      	movs	r0, #3
 8001354:	f7ff fb3e 	bl	80009d4 <lcd_puts>
	else
		lcd_puts(3, 10, (int8_t *)"OFF");


}
 8001358:	e005      	b.n	8001366 <page_3_print+0xba>
		lcd_puts(3, 10, (int8_t *)"OFF");
 800135a:	4b0c      	ldr	r3, [pc, #48]	; (800138c <page_3_print+0xe0>)
 800135c:	001a      	movs	r2, r3
 800135e:	210a      	movs	r1, #10
 8001360:	2003      	movs	r0, #3
 8001362:	f7ff fb37 	bl	80009d4 <lcd_puts>
}
 8001366:	46c0      	nop			; (mov r8, r8)
 8001368:	46bd      	mov	sp, r7
 800136a:	b002      	add	sp, #8
 800136c:	bd80      	pop	{r7, pc}
 800136e:	46c0      	nop			; (mov r8, r8)
 8001370:	08005c28 	.word	0x08005c28
 8001374:	08005c2c 	.word	0x08005c2c
 8001378:	08005c38 	.word	0x08005c38
 800137c:	08005c44 	.word	0x08005c44
 8001380:	08005c50 	.word	0x08005c50
 8001384:	200000b7 	.word	0x200000b7
 8001388:	08005c20 	.word	0x08005c20
 800138c:	08005c24 	.word	0x08005c24
 8001390:	200000b8 	.word	0x200000b8
 8001394:	200000b9 	.word	0x200000b9

08001398 <update_screen_data_2>:

void update_screen_data_2()
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
	lcd_puts(0, 0, (int8_t *)">");
 800139c:	4b07      	ldr	r3, [pc, #28]	; (80013bc <update_screen_data_2+0x24>)
 800139e:	001a      	movs	r2, r3
 80013a0:	2100      	movs	r1, #0
 80013a2:	2000      	movs	r0, #0
 80013a4:	f7ff fb16 	bl	80009d4 <lcd_puts>
	lcd_puts(0, 10, (int8_t *)"Disable");
 80013a8:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <update_screen_data_2+0x28>)
 80013aa:	001a      	movs	r2, r3
 80013ac:	210a      	movs	r1, #10
 80013ae:	2000      	movs	r0, #0
 80013b0:	f7ff fb10 	bl	80009d4 <lcd_puts>
}
 80013b4:	46c0      	nop			; (mov r8, r8)
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	46c0      	nop			; (mov r8, r8)
 80013bc:	08005c28 	.word	0x08005c28
 80013c0:	08005c5c 	.word	0x08005c5c

080013c4 <update_screen_data_3>:

void update_screen_data_3()
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0



	switch(current_pos.position_cursor)
 80013c8:	4b92      	ldr	r3, [pc, #584]	; (8001614 <update_screen_data_3+0x250>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	b25b      	sxtb	r3, r3
 80013ce:	2b07      	cmp	r3, #7
 80013d0:	d00c      	beq.n	80013ec <update_screen_data_3+0x28>
 80013d2:	dd00      	ble.n	80013d6 <update_screen_data_3+0x12>
 80013d4:	e11b      	b.n	800160e <update_screen_data_3+0x24a>
 80013d6:	2b03      	cmp	r3, #3
 80013d8:	d100      	bne.n	80013dc <update_screen_data_3+0x18>
 80013da:	e0cd      	b.n	8001578 <update_screen_data_3+0x1b4>
 80013dc:	dd00      	ble.n	80013e0 <update_screen_data_3+0x1c>
 80013de:	e116      	b.n	800160e <update_screen_data_3+0x24a>
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d033      	beq.n	800144c <update_screen_data_3+0x88>
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d100      	bne.n	80013ea <update_screen_data_3+0x26>
 80013e8:	e07b      	b.n	80014e2 <update_screen_data_3+0x11e>
//		{
//			lcd_puts(3, 10, (int8_t *)"OFF");
//		}
//	}

}
 80013ea:	e110      	b.n	800160e <update_screen_data_3+0x24a>
		lcd_puts(0, 0, (int8_t *)">");
 80013ec:	4b8a      	ldr	r3, [pc, #552]	; (8001618 <update_screen_data_3+0x254>)
 80013ee:	001a      	movs	r2, r3
 80013f0:	2100      	movs	r1, #0
 80013f2:	2000      	movs	r0, #0
 80013f4:	f7ff faee 	bl	80009d4 <lcd_puts>
		lcd_puts(1, 0, (int8_t *)" ");
 80013f8:	4b88      	ldr	r3, [pc, #544]	; (800161c <update_screen_data_3+0x258>)
 80013fa:	001a      	movs	r2, r3
 80013fc:	2100      	movs	r1, #0
 80013fe:	2001      	movs	r0, #1
 8001400:	f7ff fae8 	bl	80009d4 <lcd_puts>
		lcd_puts(2, 0, (int8_t *)" ");
 8001404:	4b85      	ldr	r3, [pc, #532]	; (800161c <update_screen_data_3+0x258>)
 8001406:	001a      	movs	r2, r3
 8001408:	2100      	movs	r1, #0
 800140a:	2002      	movs	r0, #2
 800140c:	f7ff fae2 	bl	80009d4 <lcd_puts>
		lcd_puts(3, 0, (int8_t *)" ");
 8001410:	4b82      	ldr	r3, [pc, #520]	; (800161c <update_screen_data_3+0x258>)
 8001412:	001a      	movs	r2, r3
 8001414:	2100      	movs	r1, #0
 8001416:	2003      	movs	r0, #3
 8001418:	f7ff fadc 	bl	80009d4 <lcd_puts>
		if(pg2_fc)
 800141c:	4b80      	ldr	r3, [pc, #512]	; (8001620 <update_screen_data_3+0x25c>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d00c      	beq.n	800143e <update_screen_data_3+0x7a>
			lcd_puts(0, 15, (int8_t *)"  ");
 8001424:	4b7f      	ldr	r3, [pc, #508]	; (8001624 <update_screen_data_3+0x260>)
 8001426:	001a      	movs	r2, r3
 8001428:	210f      	movs	r1, #15
 800142a:	2000      	movs	r0, #0
 800142c:	f7ff fad2 	bl	80009d4 <lcd_puts>
			lcd_puts(0, 10, (int8_t *)"Enable");
 8001430:	4b7d      	ldr	r3, [pc, #500]	; (8001628 <update_screen_data_3+0x264>)
 8001432:	001a      	movs	r2, r3
 8001434:	210a      	movs	r1, #10
 8001436:	2000      	movs	r0, #0
 8001438:	f7ff facc 	bl	80009d4 <lcd_puts>
		break;
 800143c:	e0e7      	b.n	800160e <update_screen_data_3+0x24a>
			lcd_puts(0, 10, (int8_t *)"Disable");
 800143e:	4b7b      	ldr	r3, [pc, #492]	; (800162c <update_screen_data_3+0x268>)
 8001440:	001a      	movs	r2, r3
 8001442:	210a      	movs	r1, #10
 8001444:	2000      	movs	r0, #0
 8001446:	f7ff fac5 	bl	80009d4 <lcd_puts>
		break;
 800144a:	e0e0      	b.n	800160e <update_screen_data_3+0x24a>
		lcd_puts(0, 0, (int8_t *)" ");
 800144c:	4b73      	ldr	r3, [pc, #460]	; (800161c <update_screen_data_3+0x258>)
 800144e:	001a      	movs	r2, r3
 8001450:	2100      	movs	r1, #0
 8001452:	2000      	movs	r0, #0
 8001454:	f7ff fabe 	bl	80009d4 <lcd_puts>
		lcd_puts(1, 0, (int8_t *)">");
 8001458:	4b6f      	ldr	r3, [pc, #444]	; (8001618 <update_screen_data_3+0x254>)
 800145a:	001a      	movs	r2, r3
 800145c:	2100      	movs	r1, #0
 800145e:	2001      	movs	r0, #1
 8001460:	f7ff fab8 	bl	80009d4 <lcd_puts>
		lcd_puts(2, 0, (int8_t *)" ");
 8001464:	4b6d      	ldr	r3, [pc, #436]	; (800161c <update_screen_data_3+0x258>)
 8001466:	001a      	movs	r2, r3
 8001468:	2100      	movs	r1, #0
 800146a:	2002      	movs	r0, #2
 800146c:	f7ff fab2 	bl	80009d4 <lcd_puts>
		lcd_puts(3, 0, (int8_t *)" ");
 8001470:	4b6a      	ldr	r3, [pc, #424]	; (800161c <update_screen_data_3+0x258>)
 8001472:	001a      	movs	r2, r3
 8001474:	2100      	movs	r1, #0
 8001476:	2003      	movs	r0, #3
 8001478:	f7ff faac 	bl	80009d4 <lcd_puts>
		if(pg3_sm)
 800147c:	4b6c      	ldr	r3, [pc, #432]	; (8001630 <update_screen_data_3+0x26c>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d018      	beq.n	80014b6 <update_screen_data_3+0xf2>
			lcd_puts(1, 10, (int8_t *)"   ");
 8001484:	4b6b      	ldr	r3, [pc, #428]	; (8001634 <update_screen_data_3+0x270>)
 8001486:	001a      	movs	r2, r3
 8001488:	210a      	movs	r1, #10
 800148a:	2001      	movs	r0, #1
 800148c:	f7ff faa2 	bl	80009d4 <lcd_puts>
			lcd_puts(2, 10, (int8_t *)"OFF");
 8001490:	4b69      	ldr	r3, [pc, #420]	; (8001638 <update_screen_data_3+0x274>)
 8001492:	001a      	movs	r2, r3
 8001494:	210a      	movs	r1, #10
 8001496:	2002      	movs	r0, #2
 8001498:	f7ff fa9c 	bl	80009d4 <lcd_puts>
			lcd_puts(3, 10, (int8_t *)"OFF");
 800149c:	4b66      	ldr	r3, [pc, #408]	; (8001638 <update_screen_data_3+0x274>)
 800149e:	001a      	movs	r2, r3
 80014a0:	210a      	movs	r1, #10
 80014a2:	2003      	movs	r0, #3
 80014a4:	f7ff fa96 	bl	80009d4 <lcd_puts>
			lcd_puts(1, 10, (int8_t *)"ON");
 80014a8:	4b64      	ldr	r3, [pc, #400]	; (800163c <update_screen_data_3+0x278>)
 80014aa:	001a      	movs	r2, r3
 80014ac:	210a      	movs	r1, #10
 80014ae:	2001      	movs	r0, #1
 80014b0:	f7ff fa90 	bl	80009d4 <lcd_puts>
 80014b4:	e005      	b.n	80014c2 <update_screen_data_3+0xfe>
			lcd_puts(1, 10, (int8_t *)"OFF");
 80014b6:	4b60      	ldr	r3, [pc, #384]	; (8001638 <update_screen_data_3+0x274>)
 80014b8:	001a      	movs	r2, r3
 80014ba:	210a      	movs	r1, #10
 80014bc:	2001      	movs	r0, #1
 80014be:	f7ff fa89 	bl	80009d4 <lcd_puts>
		send_cmd(0,9);
 80014c2:	2109      	movs	r1, #9
 80014c4:	2000      	movs	r0, #0
 80014c6:	f000 f9df 	bl	8001888 <send_cmd>
		send_cmd(0,10);
 80014ca:	210a      	movs	r1, #10
 80014cc:	2000      	movs	r0, #0
 80014ce:	f000 f9db 	bl	8001888 <send_cmd>
		send_cmd(pg3_sm,8);
 80014d2:	4b57      	ldr	r3, [pc, #348]	; (8001630 <update_screen_data_3+0x26c>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	b25b      	sxtb	r3, r3
 80014d8:	2108      	movs	r1, #8
 80014da:	0018      	movs	r0, r3
 80014dc:	f000 f9d4 	bl	8001888 <send_cmd>
		break;
 80014e0:	e095      	b.n	800160e <update_screen_data_3+0x24a>
		lcd_puts(0, 0, (int8_t *)" ");
 80014e2:	4b4e      	ldr	r3, [pc, #312]	; (800161c <update_screen_data_3+0x258>)
 80014e4:	001a      	movs	r2, r3
 80014e6:	2100      	movs	r1, #0
 80014e8:	2000      	movs	r0, #0
 80014ea:	f7ff fa73 	bl	80009d4 <lcd_puts>
		lcd_puts(1, 0, (int8_t *)" ");
 80014ee:	4b4b      	ldr	r3, [pc, #300]	; (800161c <update_screen_data_3+0x258>)
 80014f0:	001a      	movs	r2, r3
 80014f2:	2100      	movs	r1, #0
 80014f4:	2001      	movs	r0, #1
 80014f6:	f7ff fa6d 	bl	80009d4 <lcd_puts>
		lcd_puts(2, 0, (int8_t *)">");
 80014fa:	4b47      	ldr	r3, [pc, #284]	; (8001618 <update_screen_data_3+0x254>)
 80014fc:	001a      	movs	r2, r3
 80014fe:	2100      	movs	r1, #0
 8001500:	2002      	movs	r0, #2
 8001502:	f7ff fa67 	bl	80009d4 <lcd_puts>
		lcd_puts(3, 0, (int8_t *)" ");
 8001506:	4b45      	ldr	r3, [pc, #276]	; (800161c <update_screen_data_3+0x258>)
 8001508:	001a      	movs	r2, r3
 800150a:	2100      	movs	r1, #0
 800150c:	2003      	movs	r0, #3
 800150e:	f7ff fa61 	bl	80009d4 <lcd_puts>
		if(pg3_md)
 8001512:	4b4b      	ldr	r3, [pc, #300]	; (8001640 <update_screen_data_3+0x27c>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d018      	beq.n	800154c <update_screen_data_3+0x188>
			lcd_puts(2, 10, (int8_t *)"   ");
 800151a:	4b46      	ldr	r3, [pc, #280]	; (8001634 <update_screen_data_3+0x270>)
 800151c:	001a      	movs	r2, r3
 800151e:	210a      	movs	r1, #10
 8001520:	2002      	movs	r0, #2
 8001522:	f7ff fa57 	bl	80009d4 <lcd_puts>
			lcd_puts(1, 10, (int8_t *)"OFF");
 8001526:	4b44      	ldr	r3, [pc, #272]	; (8001638 <update_screen_data_3+0x274>)
 8001528:	001a      	movs	r2, r3
 800152a:	210a      	movs	r1, #10
 800152c:	2001      	movs	r0, #1
 800152e:	f7ff fa51 	bl	80009d4 <lcd_puts>
			lcd_puts(2, 10, (int8_t *)"ON");
 8001532:	4b42      	ldr	r3, [pc, #264]	; (800163c <update_screen_data_3+0x278>)
 8001534:	001a      	movs	r2, r3
 8001536:	210a      	movs	r1, #10
 8001538:	2002      	movs	r0, #2
 800153a:	f7ff fa4b 	bl	80009d4 <lcd_puts>
			lcd_puts(3, 10, (int8_t *)"OFF");
 800153e:	4b3e      	ldr	r3, [pc, #248]	; (8001638 <update_screen_data_3+0x274>)
 8001540:	001a      	movs	r2, r3
 8001542:	210a      	movs	r1, #10
 8001544:	2003      	movs	r0, #3
 8001546:	f7ff fa45 	bl	80009d4 <lcd_puts>
 800154a:	e005      	b.n	8001558 <update_screen_data_3+0x194>
			lcd_puts(2, 10, (int8_t *)"OFF");
 800154c:	4b3a      	ldr	r3, [pc, #232]	; (8001638 <update_screen_data_3+0x274>)
 800154e:	001a      	movs	r2, r3
 8001550:	210a      	movs	r1, #10
 8001552:	2002      	movs	r0, #2
 8001554:	f7ff fa3e 	bl	80009d4 <lcd_puts>
		send_cmd(0,10);
 8001558:	210a      	movs	r1, #10
 800155a:	2000      	movs	r0, #0
 800155c:	f000 f994 	bl	8001888 <send_cmd>
		send_cmd(0,8);
 8001560:	2108      	movs	r1, #8
 8001562:	2000      	movs	r0, #0
 8001564:	f000 f990 	bl	8001888 <send_cmd>
		send_cmd(pg3_md,9);
 8001568:	4b35      	ldr	r3, [pc, #212]	; (8001640 <update_screen_data_3+0x27c>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	b25b      	sxtb	r3, r3
 800156e:	2109      	movs	r1, #9
 8001570:	0018      	movs	r0, r3
 8001572:	f000 f989 	bl	8001888 <send_cmd>
		break;
 8001576:	e04a      	b.n	800160e <update_screen_data_3+0x24a>
		lcd_puts(0, 0, (int8_t *)" ");
 8001578:	4b28      	ldr	r3, [pc, #160]	; (800161c <update_screen_data_3+0x258>)
 800157a:	001a      	movs	r2, r3
 800157c:	2100      	movs	r1, #0
 800157e:	2000      	movs	r0, #0
 8001580:	f7ff fa28 	bl	80009d4 <lcd_puts>
		lcd_puts(1, 0, (int8_t *)" ");
 8001584:	4b25      	ldr	r3, [pc, #148]	; (800161c <update_screen_data_3+0x258>)
 8001586:	001a      	movs	r2, r3
 8001588:	2100      	movs	r1, #0
 800158a:	2001      	movs	r0, #1
 800158c:	f7ff fa22 	bl	80009d4 <lcd_puts>
		lcd_puts(2, 0, (int8_t *)" ");
 8001590:	4b22      	ldr	r3, [pc, #136]	; (800161c <update_screen_data_3+0x258>)
 8001592:	001a      	movs	r2, r3
 8001594:	2100      	movs	r1, #0
 8001596:	2002      	movs	r0, #2
 8001598:	f7ff fa1c 	bl	80009d4 <lcd_puts>
		lcd_puts(3, 0, (int8_t *)">");
 800159c:	4b1e      	ldr	r3, [pc, #120]	; (8001618 <update_screen_data_3+0x254>)
 800159e:	001a      	movs	r2, r3
 80015a0:	2100      	movs	r1, #0
 80015a2:	2003      	movs	r0, #3
 80015a4:	f7ff fa16 	bl	80009d4 <lcd_puts>
		if(pg3_wd)
 80015a8:	4b26      	ldr	r3, [pc, #152]	; (8001644 <update_screen_data_3+0x280>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d018      	beq.n	80015e2 <update_screen_data_3+0x21e>
			lcd_puts(3, 10, (int8_t *)"   ");
 80015b0:	4b20      	ldr	r3, [pc, #128]	; (8001634 <update_screen_data_3+0x270>)
 80015b2:	001a      	movs	r2, r3
 80015b4:	210a      	movs	r1, #10
 80015b6:	2003      	movs	r0, #3
 80015b8:	f7ff fa0c 	bl	80009d4 <lcd_puts>
			lcd_puts(1, 10, (int8_t *)"OFF");
 80015bc:	4b1e      	ldr	r3, [pc, #120]	; (8001638 <update_screen_data_3+0x274>)
 80015be:	001a      	movs	r2, r3
 80015c0:	210a      	movs	r1, #10
 80015c2:	2001      	movs	r0, #1
 80015c4:	f7ff fa06 	bl	80009d4 <lcd_puts>
			lcd_puts(2, 10, (int8_t *)"OFF");
 80015c8:	4b1b      	ldr	r3, [pc, #108]	; (8001638 <update_screen_data_3+0x274>)
 80015ca:	001a      	movs	r2, r3
 80015cc:	210a      	movs	r1, #10
 80015ce:	2002      	movs	r0, #2
 80015d0:	f7ff fa00 	bl	80009d4 <lcd_puts>
			lcd_puts(3, 10, (int8_t *)"ON");
 80015d4:	4b19      	ldr	r3, [pc, #100]	; (800163c <update_screen_data_3+0x278>)
 80015d6:	001a      	movs	r2, r3
 80015d8:	210a      	movs	r1, #10
 80015da:	2003      	movs	r0, #3
 80015dc:	f7ff f9fa 	bl	80009d4 <lcd_puts>
 80015e0:	e005      	b.n	80015ee <update_screen_data_3+0x22a>
			lcd_puts(3, 10, (int8_t *)"OFF");
 80015e2:	4b15      	ldr	r3, [pc, #84]	; (8001638 <update_screen_data_3+0x274>)
 80015e4:	001a      	movs	r2, r3
 80015e6:	210a      	movs	r1, #10
 80015e8:	2003      	movs	r0, #3
 80015ea:	f7ff f9f3 	bl	80009d4 <lcd_puts>
		send_cmd(0,8);
 80015ee:	2108      	movs	r1, #8
 80015f0:	2000      	movs	r0, #0
 80015f2:	f000 f949 	bl	8001888 <send_cmd>
		send_cmd(0,9);
 80015f6:	2109      	movs	r1, #9
 80015f8:	2000      	movs	r0, #0
 80015fa:	f000 f945 	bl	8001888 <send_cmd>
		send_cmd(pg3_wd,10);
 80015fe:	4b11      	ldr	r3, [pc, #68]	; (8001644 <update_screen_data_3+0x280>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	b25b      	sxtb	r3, r3
 8001604:	210a      	movs	r1, #10
 8001606:	0018      	movs	r0, r3
 8001608:	f000 f93e 	bl	8001888 <send_cmd>
		break;
 800160c:	46c0      	nop			; (mov r8, r8)
}
 800160e:	46c0      	nop			; (mov r8, r8)
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000004 	.word	0x20000004
 8001618:	08005c28 	.word	0x08005c28
 800161c:	08005c64 	.word	0x08005c64
 8001620:	200000b6 	.word	0x200000b6
 8001624:	08005c68 	.word	0x08005c68
 8001628:	08005c6c 	.word	0x08005c6c
 800162c:	08005c5c 	.word	0x08005c5c
 8001630:	200000b7 	.word	0x200000b7
 8001634:	08005c74 	.word	0x08005c74
 8001638:	08005c24 	.word	0x08005c24
 800163c:	08005c20 	.word	0x08005c20
 8001640:	200000b8 	.word	0x200000b8
 8001644:	200000b9 	.word	0x200000b9

08001648 <update_screen_data>:




void update_screen_data()
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
	char buffer[3];

	switch (current_pos.position_cursor)
 800164e:	4b85      	ldr	r3, [pc, #532]	; (8001864 <update_screen_data+0x21c>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	b25b      	sxtb	r3, r3
 8001654:	2b06      	cmp	r3, #6
 8001656:	d900      	bls.n	800165a <update_screen_data+0x12>
 8001658:	e100      	b.n	800185c <update_screen_data+0x214>
 800165a:	009a      	lsls	r2, r3, #2
 800165c:	4b82      	ldr	r3, [pc, #520]	; (8001868 <update_screen_data+0x220>)
 800165e:	18d3      	adds	r3, r2, r3
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	469f      	mov	pc, r3
	{
	case intensity:
		if(depth_press)
 8001664:	4b81      	ldr	r3, [pc, #516]	; (800186c <update_screen_data+0x224>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d009      	beq.n	8001680 <update_screen_data+0x38>
		{
//			sprintf(buffer, "%02d", data_reg.intensity);
			lcd_puts(1, 7, (int8_t *)"MAX");
 800166c:	4b80      	ldr	r3, [pc, #512]	; (8001870 <update_screen_data+0x228>)
 800166e:	001a      	movs	r2, r3
 8001670:	2107      	movs	r1, #7
 8001672:	2001      	movs	r0, #1
 8001674:	f7ff f9ae 	bl	80009d4 <lcd_puts>
			depth_press = 0;
 8001678:	4b7c      	ldr	r3, [pc, #496]	; (800186c <update_screen_data+0x224>)
 800167a:	2200      	movs	r2, #0
 800167c:	701a      	strb	r2, [r3, #0]
 800167e:	e013      	b.n	80016a8 <update_screen_data+0x60>
		}
		else
		{
			clr_data(intensity);
 8001680:	2001      	movs	r0, #1
 8001682:	f7ff f9f9 	bl	8000a78 <clr_data>
			sprintf(buffer, "%02d", data_reg.intensity);
 8001686:	4b7b      	ldr	r3, [pc, #492]	; (8001874 <update_screen_data+0x22c>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	071b      	lsls	r3, r3, #28
 800168c:	0f1b      	lsrs	r3, r3, #28
 800168e:	b2db      	uxtb	r3, r3
 8001690:	001a      	movs	r2, r3
 8001692:	4979      	ldr	r1, [pc, #484]	; (8001878 <update_screen_data+0x230>)
 8001694:	1d3b      	adds	r3, r7, #4
 8001696:	0018      	movs	r0, r3
 8001698:	f003 fdea 	bl	8005270 <siprintf>
			lcd_puts(1, 7, (int8_t *)buffer);
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	001a      	movs	r2, r3
 80016a0:	2107      	movs	r1, #7
 80016a2:	2001      	movs	r0, #1
 80016a4:	f7ff f996 	bl	80009d4 <lcd_puts>
		}

		clr_select();
 80016a8:	f7ff fac4 	bl	8000c34 <clr_select>
		lcd_puts(1, 0, (int8_t *)">");
 80016ac:	4b73      	ldr	r3, [pc, #460]	; (800187c <update_screen_data+0x234>)
 80016ae:	001a      	movs	r2, r3
 80016b0:	2100      	movs	r1, #0
 80016b2:	2001      	movs	r0, #1
 80016b4:	f7ff f98e 	bl	80009d4 <lcd_puts>
		send_cmd(data_reg.intensity,intensity);
 80016b8:	4b6e      	ldr	r3, [pc, #440]	; (8001874 <update_screen_data+0x22c>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	071b      	lsls	r3, r3, #28
 80016be:	0f1b      	lsrs	r3, r3, #28
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	b25b      	sxtb	r3, r3
 80016c4:	2101      	movs	r1, #1
 80016c6:	0018      	movs	r0, r3
 80016c8:	f000 f8de 	bl	8001888 <send_cmd>
		break;
 80016cc:	e0c6      	b.n	800185c <update_screen_data+0x214>

	case color:
		sprintf(buffer, "%02d", data_reg.color);
 80016ce:	4b69      	ldr	r3, [pc, #420]	; (8001874 <update_screen_data+0x22c>)
 80016d0:	785b      	ldrb	r3, [r3, #1]
 80016d2:	b25b      	sxtb	r3, r3
 80016d4:	001a      	movs	r2, r3
 80016d6:	4968      	ldr	r1, [pc, #416]	; (8001878 <update_screen_data+0x230>)
 80016d8:	1d3b      	adds	r3, r7, #4
 80016da:	0018      	movs	r0, r3
 80016dc:	f003 fdc8 	bl	8005270 <siprintf>
		lcd_puts(2, 7, (int8_t *)buffer);
 80016e0:	1d3b      	adds	r3, r7, #4
 80016e2:	001a      	movs	r2, r3
 80016e4:	2107      	movs	r1, #7
 80016e6:	2002      	movs	r0, #2
 80016e8:	f7ff f974 	bl	80009d4 <lcd_puts>
		clr_select();
 80016ec:	f7ff faa2 	bl	8000c34 <clr_select>
		lcd_puts(2, 0, (int8_t *)">");
 80016f0:	4b62      	ldr	r3, [pc, #392]	; (800187c <update_screen_data+0x234>)
 80016f2:	001a      	movs	r2, r3
 80016f4:	2100      	movs	r1, #0
 80016f6:	2002      	movs	r0, #2
 80016f8:	f7ff f96c 	bl	80009d4 <lcd_puts>
		send_cmd(data_reg.color,color);
 80016fc:	4b5d      	ldr	r3, [pc, #372]	; (8001874 <update_screen_data+0x22c>)
 80016fe:	785b      	ldrb	r3, [r3, #1]
 8001700:	b25b      	sxtb	r3, r3
 8001702:	2102      	movs	r1, #2
 8001704:	0018      	movs	r0, r3
 8001706:	f000 f8bf 	bl	8001888 <send_cmd>
		break;
 800170a:	e0a7      	b.n	800185c <update_screen_data+0x214>

	case sensor:
		clr_data(sensor);
 800170c:	2003      	movs	r0, #3
 800170e:	f7ff f9b3 	bl	8000a78 <clr_data>
		clr_select();
 8001712:	f7ff fa8f 	bl	8000c34 <clr_select>
		lcd_puts(3, 0, (int8_t *)">");
 8001716:	4b59      	ldr	r3, [pc, #356]	; (800187c <update_screen_data+0x234>)
 8001718:	001a      	movs	r2, r3
 800171a:	2100      	movs	r1, #0
 800171c:	2003      	movs	r0, #3
 800171e:	f7ff f959 	bl	80009d4 <lcd_puts>
		send_cmd(data_reg.sensor,sensor);
 8001722:	4b54      	ldr	r3, [pc, #336]	; (8001874 <update_screen_data+0x22c>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	06db      	lsls	r3, r3, #27
 8001728:	0fdb      	lsrs	r3, r3, #31
 800172a:	b2db      	uxtb	r3, r3
 800172c:	b25b      	sxtb	r3, r3
 800172e:	2103      	movs	r1, #3
 8001730:	0018      	movs	r0, r3
 8001732:	f000 f8a9 	bl	8001888 <send_cmd>
		if (data_reg.sensor)
 8001736:	4b4f      	ldr	r3, [pc, #316]	; (8001874 <update_screen_data+0x22c>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2210      	movs	r2, #16
 800173c:	4013      	ands	r3, r2
 800173e:	b2db      	uxtb	r3, r3
 8001740:	2b00      	cmp	r3, #0
 8001742:	d006      	beq.n	8001752 <update_screen_data+0x10a>
			lcd_puts(3, 7, (int8_t *)"ON");
 8001744:	4b4e      	ldr	r3, [pc, #312]	; (8001880 <update_screen_data+0x238>)
 8001746:	001a      	movs	r2, r3
 8001748:	2107      	movs	r1, #7
 800174a:	2003      	movs	r0, #3
 800174c:	f7ff f942 	bl	80009d4 <lcd_puts>
		else
			lcd_puts(3, 7, (int8_t *)"OFF");
		break;
 8001750:	e084      	b.n	800185c <update_screen_data+0x214>
			lcd_puts(3, 7, (int8_t *)"OFF");
 8001752:	4b4c      	ldr	r3, [pc, #304]	; (8001884 <update_screen_data+0x23c>)
 8001754:	001a      	movs	r2, r3
 8001756:	2107      	movs	r1, #7
 8001758:	2003      	movs	r0, #3
 800175a:	f7ff f93b 	bl	80009d4 <lcd_puts>
		break;
 800175e:	e07d      	b.n	800185c <update_screen_data+0x214>

	case lamp:
		clr_data(lamp);
 8001760:	2004      	movs	r0, #4
 8001762:	f7ff f989 	bl	8000a78 <clr_data>
		clr_select();
 8001766:	f7ff fa65 	bl	8000c34 <clr_select>
		lcd_puts(1, 10, (int8_t *)">");
 800176a:	4b44      	ldr	r3, [pc, #272]	; (800187c <update_screen_data+0x234>)
 800176c:	001a      	movs	r2, r3
 800176e:	210a      	movs	r1, #10
 8001770:	2001      	movs	r0, #1
 8001772:	f7ff f92f 	bl	80009d4 <lcd_puts>
		send_cmd(data_reg.lamp,lamp);
 8001776:	4b3f      	ldr	r3, [pc, #252]	; (8001874 <update_screen_data+0x22c>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	069b      	lsls	r3, r3, #26
 800177c:	0fdb      	lsrs	r3, r3, #31
 800177e:	b2db      	uxtb	r3, r3
 8001780:	b25b      	sxtb	r3, r3
 8001782:	2104      	movs	r1, #4
 8001784:	0018      	movs	r0, r3
 8001786:	f000 f87f 	bl	8001888 <send_cmd>
		if (data_reg.lamp)
 800178a:	4b3a      	ldr	r3, [pc, #232]	; (8001874 <update_screen_data+0x22c>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	2220      	movs	r2, #32
 8001790:	4013      	ands	r3, r2
 8001792:	b2db      	uxtb	r3, r3
 8001794:	2b00      	cmp	r3, #0
 8001796:	d006      	beq.n	80017a6 <update_screen_data+0x15e>
			lcd_puts(1, 17, (int8_t *)"ON");
 8001798:	4b39      	ldr	r3, [pc, #228]	; (8001880 <update_screen_data+0x238>)
 800179a:	001a      	movs	r2, r3
 800179c:	2111      	movs	r1, #17
 800179e:	2001      	movs	r0, #1
 80017a0:	f7ff f918 	bl	80009d4 <lcd_puts>
		else
			lcd_puts(1, 17, (int8_t *)"OFF");
		break;
 80017a4:	e05a      	b.n	800185c <update_screen_data+0x214>
			lcd_puts(1, 17, (int8_t *)"OFF");
 80017a6:	4b37      	ldr	r3, [pc, #220]	; (8001884 <update_screen_data+0x23c>)
 80017a8:	001a      	movs	r2, r3
 80017aa:	2111      	movs	r1, #17
 80017ac:	2001      	movs	r0, #1
 80017ae:	f7ff f911 	bl	80009d4 <lcd_puts>
		break;
 80017b2:	e053      	b.n	800185c <update_screen_data+0x214>

	case endo:
		clr_data(endo);
 80017b4:	2005      	movs	r0, #5
 80017b6:	f7ff f95f 	bl	8000a78 <clr_data>
		clr_select();
 80017ba:	f7ff fa3b 	bl	8000c34 <clr_select>
		lcd_puts(2, 10, (int8_t *)">");
 80017be:	4b2f      	ldr	r3, [pc, #188]	; (800187c <update_screen_data+0x234>)
 80017c0:	001a      	movs	r2, r3
 80017c2:	210a      	movs	r1, #10
 80017c4:	2002      	movs	r0, #2
 80017c6:	f7ff f905 	bl	80009d4 <lcd_puts>
		send_cmd(data_reg.endo,endo);
 80017ca:	4b2a      	ldr	r3, [pc, #168]	; (8001874 <update_screen_data+0x22c>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	065b      	lsls	r3, r3, #25
 80017d0:	0fdb      	lsrs	r3, r3, #31
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	b25b      	sxtb	r3, r3
 80017d6:	2105      	movs	r1, #5
 80017d8:	0018      	movs	r0, r3
 80017da:	f000 f855 	bl	8001888 <send_cmd>
		if (data_reg.endo)
 80017de:	4b25      	ldr	r3, [pc, #148]	; (8001874 <update_screen_data+0x22c>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2240      	movs	r2, #64	; 0x40
 80017e4:	4013      	ands	r3, r2
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d006      	beq.n	80017fa <update_screen_data+0x1b2>
			lcd_puts(2, 17, (int8_t *)"ON");
 80017ec:	4b24      	ldr	r3, [pc, #144]	; (8001880 <update_screen_data+0x238>)
 80017ee:	001a      	movs	r2, r3
 80017f0:	2111      	movs	r1, #17
 80017f2:	2002      	movs	r0, #2
 80017f4:	f7ff f8ee 	bl	80009d4 <lcd_puts>
		else
			lcd_puts(2, 17, (int8_t *)"OFF");
		break;
 80017f8:	e030      	b.n	800185c <update_screen_data+0x214>
			lcd_puts(2, 17, (int8_t *)"OFF");
 80017fa:	4b22      	ldr	r3, [pc, #136]	; (8001884 <update_screen_data+0x23c>)
 80017fc:	001a      	movs	r2, r3
 80017fe:	2111      	movs	r1, #17
 8001800:	2002      	movs	r0, #2
 8001802:	f7ff f8e7 	bl	80009d4 <lcd_puts>
		break;
 8001806:	e029      	b.n	800185c <update_screen_data+0x214>

	case depth:
		clr_data(depth);
 8001808:	2006      	movs	r0, #6
 800180a:	f7ff f935 	bl	8000a78 <clr_data>
		clr_select();
 800180e:	f7ff fa11 	bl	8000c34 <clr_select>
		lcd_puts(3, 10, (int8_t *)">");
 8001812:	4b1a      	ldr	r3, [pc, #104]	; (800187c <update_screen_data+0x234>)
 8001814:	001a      	movs	r2, r3
 8001816:	210a      	movs	r1, #10
 8001818:	2003      	movs	r0, #3
 800181a:	f7ff f8db 	bl	80009d4 <lcd_puts>
		send_cmd(data_reg.depth,depth);
 800181e:	4b15      	ldr	r3, [pc, #84]	; (8001874 <update_screen_data+0x22c>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	061b      	lsls	r3, r3, #24
 8001824:	0fdb      	lsrs	r3, r3, #31
 8001826:	b2db      	uxtb	r3, r3
 8001828:	b25b      	sxtb	r3, r3
 800182a:	2106      	movs	r1, #6
 800182c:	0018      	movs	r0, r3
 800182e:	f000 f82b 	bl	8001888 <send_cmd>
		if (data_reg.depth)
 8001832:	4b10      	ldr	r3, [pc, #64]	; (8001874 <update_screen_data+0x22c>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	227f      	movs	r2, #127	; 0x7f
 8001838:	4393      	bics	r3, r2
 800183a:	b2db      	uxtb	r3, r3
 800183c:	2b00      	cmp	r3, #0
 800183e:	d006      	beq.n	800184e <update_screen_data+0x206>
			lcd_puts(3, 17, (int8_t *)"ON");
 8001840:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <update_screen_data+0x238>)
 8001842:	001a      	movs	r2, r3
 8001844:	2111      	movs	r1, #17
 8001846:	2003      	movs	r0, #3
 8001848:	f7ff f8c4 	bl	80009d4 <lcd_puts>
		else
			lcd_puts(3, 17, (int8_t *)"OFF");
		break;
 800184c:	e005      	b.n	800185a <update_screen_data+0x212>
			lcd_puts(3, 17, (int8_t *)"OFF");
 800184e:	4b0d      	ldr	r3, [pc, #52]	; (8001884 <update_screen_data+0x23c>)
 8001850:	001a      	movs	r2, r3
 8001852:	2111      	movs	r1, #17
 8001854:	2003      	movs	r0, #3
 8001856:	f7ff f8bd 	bl	80009d4 <lcd_puts>
		break;
 800185a:	46c0      	nop			; (mov r8, r8)
	}
}
 800185c:	46c0      	nop			; (mov r8, r8)
 800185e:	46bd      	mov	sp, r7
 8001860:	b002      	add	sp, #8
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20000004 	.word	0x20000004
 8001868:	08005d64 	.word	0x08005d64
 800186c:	200000b4 	.word	0x200000b4
 8001870:	08005c78 	.word	0x08005c78
 8001874:	20000008 	.word	0x20000008
 8001878:	08005c18 	.word	0x08005c18
 800187c:	08005c28 	.word	0x08005c28
 8001880:	08005c20 	.word	0x08005c20
 8001884:	08005c24 	.word	0x08005c24

08001888 <send_cmd>:

void send_cmd(int8_t x, int8_t mode)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	0002      	movs	r2, r0
 8001890:	1dfb      	adds	r3, r7, #7
 8001892:	701a      	strb	r2, [r3, #0]
 8001894:	1dbb      	adds	r3, r7, #6
 8001896:	1c0a      	adds	r2, r1, #0
 8001898:	701a      	strb	r2, [r3, #0]
	uint8_t data[5];
	data[0] = '@';
 800189a:	2108      	movs	r1, #8
 800189c:	187b      	adds	r3, r7, r1
 800189e:	2240      	movs	r2, #64	; 0x40
 80018a0:	701a      	strb	r2, [r3, #0]
	data[4] = '#';
 80018a2:	187b      	adds	r3, r7, r1
 80018a4:	2223      	movs	r2, #35	; 0x23
 80018a6:	711a      	strb	r2, [r3, #4]
	switch (mode)
 80018a8:	1dbb      	adds	r3, r7, #6
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	b25b      	sxtb	r3, r3
 80018ae:	2b0a      	cmp	r3, #10
 80018b0:	d900      	bls.n	80018b4 <send_cmd+0x2c>
 80018b2:	e0f3      	b.n	8001a9c <send_cmd+0x214>
 80018b4:	009a      	lsls	r2, r3, #2
 80018b6:	4b7b      	ldr	r3, [pc, #492]	; (8001aa4 <send_cmd+0x21c>)
 80018b8:	18d3      	adds	r3, r2, r3
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	469f      	mov	pc, r3
	{
	case intensity:
		data[1] = 'I';
 80018be:	2108      	movs	r1, #8
 80018c0:	187b      	adds	r3, r7, r1
 80018c2:	2249      	movs	r2, #73	; 0x49
 80018c4:	705a      	strb	r2, [r3, #1]
		data[2] = '0';
 80018c6:	187b      	adds	r3, r7, r1
 80018c8:	2230      	movs	r2, #48	; 0x30
 80018ca:	709a      	strb	r2, [r3, #2]
		data[3] = 48 + x;
 80018cc:	1dfb      	adds	r3, r7, #7
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	3330      	adds	r3, #48	; 0x30
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	187b      	adds	r3, r7, r1
 80018d6:	70da      	strb	r2, [r3, #3]
		HAL_UART_Transmit(&huart1, &data[0], 5, 100);
 80018d8:	1879      	adds	r1, r7, r1
 80018da:	4873      	ldr	r0, [pc, #460]	; (8001aa8 <send_cmd+0x220>)
 80018dc:	2364      	movs	r3, #100	; 0x64
 80018de:	2205      	movs	r2, #5
 80018e0:	f003 f87a 	bl	80049d8 <HAL_UART_Transmit>
		break;
 80018e4:	e0da      	b.n	8001a9c <send_cmd+0x214>
	case color:
		if (x > 0)
 80018e6:	1dfb      	adds	r3, r7, #7
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	b25b      	sxtb	r3, r3
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	dd0d      	ble.n	800190c <send_cmd+0x84>
		{
			data[1] = 'C';
 80018f0:	2108      	movs	r1, #8
 80018f2:	187b      	adds	r3, r7, r1
 80018f4:	2243      	movs	r2, #67	; 0x43
 80018f6:	705a      	strb	r2, [r3, #1]
			data[2] = '+';
 80018f8:	187b      	adds	r3, r7, r1
 80018fa:	222b      	movs	r2, #43	; 0x2b
 80018fc:	709a      	strb	r2, [r3, #2]
			data[3] = 48 + x;
 80018fe:	1dfb      	adds	r3, r7, #7
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	3330      	adds	r3, #48	; 0x30
 8001904:	b2da      	uxtb	r2, r3
 8001906:	187b      	adds	r3, r7, r1
 8001908:	70da      	strb	r2, [r3, #3]
 800190a:	e00d      	b.n	8001928 <send_cmd+0xa0>
		}
		else
		{
			data[1] = 'C';
 800190c:	2108      	movs	r1, #8
 800190e:	187b      	adds	r3, r7, r1
 8001910:	2243      	movs	r2, #67	; 0x43
 8001912:	705a      	strb	r2, [r3, #1]
			data[2] = '-';
 8001914:	187b      	adds	r3, r7, r1
 8001916:	222d      	movs	r2, #45	; 0x2d
 8001918:	709a      	strb	r2, [r3, #2]
			data[3] = (48 + (x) * (-1));
 800191a:	1dfb      	adds	r3, r7, #7
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2230      	movs	r2, #48	; 0x30
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	b2da      	uxtb	r2, r3
 8001924:	187b      	adds	r3, r7, r1
 8001926:	70da      	strb	r2, [r3, #3]
		}
		HAL_UART_Transmit(&huart1, &data[0], 5, 100);
 8001928:	2308      	movs	r3, #8
 800192a:	18f9      	adds	r1, r7, r3
 800192c:	485e      	ldr	r0, [pc, #376]	; (8001aa8 <send_cmd+0x220>)
 800192e:	2364      	movs	r3, #100	; 0x64
 8001930:	2205      	movs	r2, #5
 8001932:	f003 f851 	bl	80049d8 <HAL_UART_Transmit>
		break;
 8001936:	e0b1      	b.n	8001a9c <send_cmd+0x214>
		// data[1] = 'I';data[2] = '0';data[3] = 48+x;
		// HAL_UART_Transmit(&huart1, &data[0], 5, 100);
		break;

	case lamp:
		data[1] = 'L';
 8001938:	2108      	movs	r1, #8
 800193a:	187b      	adds	r3, r7, r1
 800193c:	224c      	movs	r2, #76	; 0x4c
 800193e:	705a      	strb	r2, [r3, #1]
		data[2] = '_';
 8001940:	187b      	adds	r3, r7, r1
 8001942:	225f      	movs	r2, #95	; 0x5f
 8001944:	709a      	strb	r2, [r3, #2]
		data[3] = 48 + x;
 8001946:	1dfb      	adds	r3, r7, #7
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	3330      	adds	r3, #48	; 0x30
 800194c:	b2da      	uxtb	r2, r3
 800194e:	187b      	adds	r3, r7, r1
 8001950:	70da      	strb	r2, [r3, #3]
		HAL_UART_Transmit(&huart1, &data[0], 5, 100);
 8001952:	1879      	adds	r1, r7, r1
 8001954:	4854      	ldr	r0, [pc, #336]	; (8001aa8 <send_cmd+0x220>)
 8001956:	2364      	movs	r3, #100	; 0x64
 8001958:	2205      	movs	r2, #5
 800195a:	f003 f83d 	bl	80049d8 <HAL_UART_Transmit>
		break;
 800195e:	e09d      	b.n	8001a9c <send_cmd+0x214>
	case endo:
		data[1] = 'E';
 8001960:	2108      	movs	r1, #8
 8001962:	187b      	adds	r3, r7, r1
 8001964:	2245      	movs	r2, #69	; 0x45
 8001966:	705a      	strb	r2, [r3, #1]
		data[2] = '_';
 8001968:	187b      	adds	r3, r7, r1
 800196a:	225f      	movs	r2, #95	; 0x5f
 800196c:	709a      	strb	r2, [r3, #2]
		data[3] = 48 + x;
 800196e:	1dfb      	adds	r3, r7, #7
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	3330      	adds	r3, #48	; 0x30
 8001974:	b2da      	uxtb	r2, r3
 8001976:	187b      	adds	r3, r7, r1
 8001978:	70da      	strb	r2, [r3, #3]
		HAL_UART_Transmit(&huart1, &data[0], 5, 100);
 800197a:	1879      	adds	r1, r7, r1
 800197c:	484a      	ldr	r0, [pc, #296]	; (8001aa8 <send_cmd+0x220>)
 800197e:	2364      	movs	r3, #100	; 0x64
 8001980:	2205      	movs	r2, #5
 8001982:	f003 f829 	bl	80049d8 <HAL_UART_Transmit>
		break;
 8001986:	e089      	b.n	8001a9c <send_cmd+0x214>
	case depth:
		data[1] = 'D';
 8001988:	2108      	movs	r1, #8
 800198a:	187b      	adds	r3, r7, r1
 800198c:	2244      	movs	r2, #68	; 0x44
 800198e:	705a      	strb	r2, [r3, #1]
		data[2] = '_';
 8001990:	187b      	adds	r3, r7, r1
 8001992:	225f      	movs	r2, #95	; 0x5f
 8001994:	709a      	strb	r2, [r3, #2]
		data[3] = 48 + x;
 8001996:	1dfb      	adds	r3, r7, #7
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	3330      	adds	r3, #48	; 0x30
 800199c:	b2da      	uxtb	r2, r3
 800199e:	187b      	adds	r3, r7, r1
 80019a0:	70da      	strb	r2, [r3, #3]
		HAL_UART_Transmit(&huart1, &data[0], 5, 100);
 80019a2:	1879      	adds	r1, r7, r1
 80019a4:	4840      	ldr	r0, [pc, #256]	; (8001aa8 <send_cmd+0x220>)
 80019a6:	2364      	movs	r3, #100	; 0x64
 80019a8:	2205      	movs	r2, #5
 80019aa:	f003 f815 	bl	80049d8 <HAL_UART_Transmit>
		break;
 80019ae:	e075      	b.n	8001a9c <send_cmd+0x214>
	case 8:

		if(x == 1)
 80019b0:	1dfb      	adds	r3, r7, #7
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	b25b      	sxtb	r3, r3
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d10a      	bne.n	80019d0 <send_cmd+0x148>
		{
			data[1] = 'F';
 80019ba:	2108      	movs	r1, #8
 80019bc:	187b      	adds	r3, r7, r1
 80019be:	2246      	movs	r2, #70	; 0x46
 80019c0:	705a      	strb	r2, [r3, #1]
			data[2] = '_';
 80019c2:	187b      	adds	r3, r7, r1
 80019c4:	225f      	movs	r2, #95	; 0x5f
 80019c6:	709a      	strb	r2, [r3, #2]
			data[3] = 48 + 1;
 80019c8:	187b      	adds	r3, r7, r1
 80019ca:	2231      	movs	r2, #49	; 0x31
 80019cc:	70da      	strb	r2, [r3, #3]
 80019ce:	e00e      	b.n	80019ee <send_cmd+0x166>
		}
		else if(x == 0)
 80019d0:	1dfb      	adds	r3, r7, #7
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	b25b      	sxtb	r3, r3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d109      	bne.n	80019ee <send_cmd+0x166>
		{
			data[1] = 'R';
 80019da:	2108      	movs	r1, #8
 80019dc:	187b      	adds	r3, r7, r1
 80019de:	2252      	movs	r2, #82	; 0x52
 80019e0:	705a      	strb	r2, [r3, #1]
			data[2] = 'E';
 80019e2:	187b      	adds	r3, r7, r1
 80019e4:	2245      	movs	r2, #69	; 0x45
 80019e6:	709a      	strb	r2, [r3, #2]
			data[3] = 'S';
 80019e8:	187b      	adds	r3, r7, r1
 80019ea:	2253      	movs	r2, #83	; 0x53
 80019ec:	70da      	strb	r2, [r3, #3]
		}

		HAL_UART_Transmit(&huart1, &data[0], 5, 100);
 80019ee:	2308      	movs	r3, #8
 80019f0:	18f9      	adds	r1, r7, r3
 80019f2:	482d      	ldr	r0, [pc, #180]	; (8001aa8 <send_cmd+0x220>)
 80019f4:	2364      	movs	r3, #100	; 0x64
 80019f6:	2205      	movs	r2, #5
 80019f8:	f002 ffee 	bl	80049d8 <HAL_UART_Transmit>
		break;
 80019fc:	e04e      	b.n	8001a9c <send_cmd+0x214>
	case 9:
		if(x == 1)
 80019fe:	1dfb      	adds	r3, r7, #7
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	b25b      	sxtb	r3, r3
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d10a      	bne.n	8001a1e <send_cmd+0x196>
		{
			data[1] = 'F';
 8001a08:	2108      	movs	r1, #8
 8001a0a:	187b      	adds	r3, r7, r1
 8001a0c:	2246      	movs	r2, #70	; 0x46
 8001a0e:	705a      	strb	r2, [r3, #1]
			data[2] = '_';
 8001a10:	187b      	adds	r3, r7, r1
 8001a12:	225f      	movs	r2, #95	; 0x5f
 8001a14:	709a      	strb	r2, [r3, #2]
			data[3] = 48 + 2;
 8001a16:	187b      	adds	r3, r7, r1
 8001a18:	2232      	movs	r2, #50	; 0x32
 8001a1a:	70da      	strb	r2, [r3, #3]
 8001a1c:	e00e      	b.n	8001a3c <send_cmd+0x1b4>
		}
		else if(x == 0)
 8001a1e:	1dfb      	adds	r3, r7, #7
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	b25b      	sxtb	r3, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d109      	bne.n	8001a3c <send_cmd+0x1b4>
		{
			data[1] = 'R';
 8001a28:	2108      	movs	r1, #8
 8001a2a:	187b      	adds	r3, r7, r1
 8001a2c:	2252      	movs	r2, #82	; 0x52
 8001a2e:	705a      	strb	r2, [r3, #1]
			data[2] = 'E';
 8001a30:	187b      	adds	r3, r7, r1
 8001a32:	2245      	movs	r2, #69	; 0x45
 8001a34:	709a      	strb	r2, [r3, #2]
			data[3] = 'S';
 8001a36:	187b      	adds	r3, r7, r1
 8001a38:	2253      	movs	r2, #83	; 0x53
 8001a3a:	70da      	strb	r2, [r3, #3]
		}
		HAL_UART_Transmit(&huart1, &data[0], 5, 100);
 8001a3c:	2308      	movs	r3, #8
 8001a3e:	18f9      	adds	r1, r7, r3
 8001a40:	4819      	ldr	r0, [pc, #100]	; (8001aa8 <send_cmd+0x220>)
 8001a42:	2364      	movs	r3, #100	; 0x64
 8001a44:	2205      	movs	r2, #5
 8001a46:	f002 ffc7 	bl	80049d8 <HAL_UART_Transmit>
		break;
 8001a4a:	e027      	b.n	8001a9c <send_cmd+0x214>
	case 10:
		if(x == 1)
 8001a4c:	1dfb      	adds	r3, r7, #7
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	b25b      	sxtb	r3, r3
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d10a      	bne.n	8001a6c <send_cmd+0x1e4>
		{
			data[1] = 'F';
 8001a56:	2108      	movs	r1, #8
 8001a58:	187b      	adds	r3, r7, r1
 8001a5a:	2246      	movs	r2, #70	; 0x46
 8001a5c:	705a      	strb	r2, [r3, #1]
			data[2] = '_';
 8001a5e:	187b      	adds	r3, r7, r1
 8001a60:	225f      	movs	r2, #95	; 0x5f
 8001a62:	709a      	strb	r2, [r3, #2]
			data[3] = 48 + 3;
 8001a64:	187b      	adds	r3, r7, r1
 8001a66:	2233      	movs	r2, #51	; 0x33
 8001a68:	70da      	strb	r2, [r3, #3]
 8001a6a:	e00e      	b.n	8001a8a <send_cmd+0x202>
		}
		else if(x == 0)
 8001a6c:	1dfb      	adds	r3, r7, #7
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	b25b      	sxtb	r3, r3
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d109      	bne.n	8001a8a <send_cmd+0x202>
		{
			data[1] = 'R';
 8001a76:	2108      	movs	r1, #8
 8001a78:	187b      	adds	r3, r7, r1
 8001a7a:	2252      	movs	r2, #82	; 0x52
 8001a7c:	705a      	strb	r2, [r3, #1]
			data[2] = 'E';
 8001a7e:	187b      	adds	r3, r7, r1
 8001a80:	2245      	movs	r2, #69	; 0x45
 8001a82:	709a      	strb	r2, [r3, #2]
			data[3] = 'S';
 8001a84:	187b      	adds	r3, r7, r1
 8001a86:	2253      	movs	r2, #83	; 0x53
 8001a88:	70da      	strb	r2, [r3, #3]
		}
		HAL_UART_Transmit(&huart1, &data[0], 5, 100);
 8001a8a:	2308      	movs	r3, #8
 8001a8c:	18f9      	adds	r1, r7, r3
 8001a8e:	4806      	ldr	r0, [pc, #24]	; (8001aa8 <send_cmd+0x220>)
 8001a90:	2364      	movs	r3, #100	; 0x64
 8001a92:	2205      	movs	r2, #5
 8001a94:	f002 ffa0 	bl	80049d8 <HAL_UART_Transmit>
		break;
 8001a98:	e000      	b.n	8001a9c <send_cmd+0x214>
		break;
 8001a9a:	46c0      	nop			; (mov r8, r8)
	}
}
 8001a9c:	46c0      	nop			; (mov r8, r8)
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	b004      	add	sp, #16
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	08005d80 	.word	0x08005d80
 8001aa8:	20000158 	.word	0x20000158

08001aac <page1_print>:



void page1_print(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
	char buffer[3];
	lcd_puts(0, 0, (int8_t *)"______ COGNATE _____");
 8001ab2:	4b58      	ldr	r3, [pc, #352]	; (8001c14 <page1_print+0x168>)
 8001ab4:	001a      	movs	r2, r3
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	2000      	movs	r0, #0
 8001aba:	f7fe ff8b 	bl	80009d4 <lcd_puts>
	lcd_puts(1, 1, (int8_t *)"INTEN");
 8001abe:	4b56      	ldr	r3, [pc, #344]	; (8001c18 <page1_print+0x16c>)
 8001ac0:	001a      	movs	r2, r3
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	2001      	movs	r0, #1
 8001ac6:	f7fe ff85 	bl	80009d4 <lcd_puts>
	lcd_puts(2, 1, (int8_t *)"COLOR");
 8001aca:	4b54      	ldr	r3, [pc, #336]	; (8001c1c <page1_print+0x170>)
 8001acc:	001a      	movs	r2, r3
 8001ace:	2101      	movs	r1, #1
 8001ad0:	2002      	movs	r0, #2
 8001ad2:	f7fe ff7f 	bl	80009d4 <lcd_puts>
	lcd_puts(3, 1, (int8_t *)"SENSR");
 8001ad6:	4b52      	ldr	r3, [pc, #328]	; (8001c20 <page1_print+0x174>)
 8001ad8:	001a      	movs	r2, r3
 8001ada:	2101      	movs	r1, #1
 8001adc:	2003      	movs	r0, #3
 8001ade:	f7fe ff79 	bl	80009d4 <lcd_puts>
	lcd_puts(1, 11, (int8_t *)"LAMP");
 8001ae2:	4b50      	ldr	r3, [pc, #320]	; (8001c24 <page1_print+0x178>)
 8001ae4:	001a      	movs	r2, r3
 8001ae6:	210b      	movs	r1, #11
 8001ae8:	2001      	movs	r0, #1
 8001aea:	f7fe ff73 	bl	80009d4 <lcd_puts>
	lcd_puts(2, 11, (int8_t *)"ENDO");
 8001aee:	4b4e      	ldr	r3, [pc, #312]	; (8001c28 <page1_print+0x17c>)
 8001af0:	001a      	movs	r2, r3
 8001af2:	210b      	movs	r1, #11
 8001af4:	2002      	movs	r0, #2
 8001af6:	f7fe ff6d 	bl	80009d4 <lcd_puts>
	lcd_puts(3, 11, (int8_t *)"DEPTH");
 8001afa:	4b4c      	ldr	r3, [pc, #304]	; (8001c2c <page1_print+0x180>)
 8001afc:	001a      	movs	r2, r3
 8001afe:	210b      	movs	r1, #11
 8001b00:	2003      	movs	r0, #3
 8001b02:	f7fe ff67 	bl	80009d4 <lcd_puts>

//	lcd_puts(1, 0, (int8_t *)">");

	sprintf(buffer, "%02d", data_reg.intensity);
 8001b06:	4b4a      	ldr	r3, [pc, #296]	; (8001c30 <page1_print+0x184>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	071b      	lsls	r3, r3, #28
 8001b0c:	0f1b      	lsrs	r3, r3, #28
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	001a      	movs	r2, r3
 8001b12:	4948      	ldr	r1, [pc, #288]	; (8001c34 <page1_print+0x188>)
 8001b14:	1d3b      	adds	r3, r7, #4
 8001b16:	0018      	movs	r0, r3
 8001b18:	f003 fbaa 	bl	8005270 <siprintf>
	lcd_puts(1, 7, (int8_t *)buffer);
 8001b1c:	1d3b      	adds	r3, r7, #4
 8001b1e:	001a      	movs	r2, r3
 8001b20:	2107      	movs	r1, #7
 8001b22:	2001      	movs	r0, #1
 8001b24:	f7fe ff56 	bl	80009d4 <lcd_puts>

	sprintf(buffer, "%02d", data_reg.color);
 8001b28:	4b41      	ldr	r3, [pc, #260]	; (8001c30 <page1_print+0x184>)
 8001b2a:	785b      	ldrb	r3, [r3, #1]
 8001b2c:	b25b      	sxtb	r3, r3
 8001b2e:	001a      	movs	r2, r3
 8001b30:	4940      	ldr	r1, [pc, #256]	; (8001c34 <page1_print+0x188>)
 8001b32:	1d3b      	adds	r3, r7, #4
 8001b34:	0018      	movs	r0, r3
 8001b36:	f003 fb9b 	bl	8005270 <siprintf>
	lcd_puts(2, 7, (int8_t *)buffer);
 8001b3a:	1d3b      	adds	r3, r7, #4
 8001b3c:	001a      	movs	r2, r3
 8001b3e:	2107      	movs	r1, #7
 8001b40:	2002      	movs	r0, #2
 8001b42:	f7fe ff47 	bl	80009d4 <lcd_puts>

	clr_data(sensor);
 8001b46:	2003      	movs	r0, #3
 8001b48:	f7fe ff96 	bl	8000a78 <clr_data>
	if (data_reg.sensor)
 8001b4c:	4b38      	ldr	r3, [pc, #224]	; (8001c30 <page1_print+0x184>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2210      	movs	r2, #16
 8001b52:	4013      	ands	r3, r2
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d006      	beq.n	8001b68 <page1_print+0xbc>
		lcd_puts(3, 7, (int8_t *)"ON");
 8001b5a:	4b37      	ldr	r3, [pc, #220]	; (8001c38 <page1_print+0x18c>)
 8001b5c:	001a      	movs	r2, r3
 8001b5e:	2107      	movs	r1, #7
 8001b60:	2003      	movs	r0, #3
 8001b62:	f7fe ff37 	bl	80009d4 <lcd_puts>
 8001b66:	e005      	b.n	8001b74 <page1_print+0xc8>
	else
		lcd_puts(3, 7, (int8_t *)"OFF");
 8001b68:	4b34      	ldr	r3, [pc, #208]	; (8001c3c <page1_print+0x190>)
 8001b6a:	001a      	movs	r2, r3
 8001b6c:	2107      	movs	r1, #7
 8001b6e:	2003      	movs	r0, #3
 8001b70:	f7fe ff30 	bl	80009d4 <lcd_puts>

	clr_data(lamp);
 8001b74:	2004      	movs	r0, #4
 8001b76:	f7fe ff7f 	bl	8000a78 <clr_data>
	if (data_reg.lamp)
 8001b7a:	4b2d      	ldr	r3, [pc, #180]	; (8001c30 <page1_print+0x184>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2220      	movs	r2, #32
 8001b80:	4013      	ands	r3, r2
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d006      	beq.n	8001b96 <page1_print+0xea>
		lcd_puts(1, 17, (int8_t *)"ON");
 8001b88:	4b2b      	ldr	r3, [pc, #172]	; (8001c38 <page1_print+0x18c>)
 8001b8a:	001a      	movs	r2, r3
 8001b8c:	2111      	movs	r1, #17
 8001b8e:	2001      	movs	r0, #1
 8001b90:	f7fe ff20 	bl	80009d4 <lcd_puts>
 8001b94:	e005      	b.n	8001ba2 <page1_print+0xf6>
	else
		lcd_puts(1, 17, (int8_t *)"OFF");
 8001b96:	4b29      	ldr	r3, [pc, #164]	; (8001c3c <page1_print+0x190>)
 8001b98:	001a      	movs	r2, r3
 8001b9a:	2111      	movs	r1, #17
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	f7fe ff19 	bl	80009d4 <lcd_puts>

	clr_data(endo);
 8001ba2:	2005      	movs	r0, #5
 8001ba4:	f7fe ff68 	bl	8000a78 <clr_data>
	if (data_reg.endo)
 8001ba8:	4b21      	ldr	r3, [pc, #132]	; (8001c30 <page1_print+0x184>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2240      	movs	r2, #64	; 0x40
 8001bae:	4013      	ands	r3, r2
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d006      	beq.n	8001bc4 <page1_print+0x118>
		lcd_puts(2, 17, (int8_t *)"ON");
 8001bb6:	4b20      	ldr	r3, [pc, #128]	; (8001c38 <page1_print+0x18c>)
 8001bb8:	001a      	movs	r2, r3
 8001bba:	2111      	movs	r1, #17
 8001bbc:	2002      	movs	r0, #2
 8001bbe:	f7fe ff09 	bl	80009d4 <lcd_puts>
 8001bc2:	e005      	b.n	8001bd0 <page1_print+0x124>
	else
		lcd_puts(2, 17, (int8_t *)"OFF");
 8001bc4:	4b1d      	ldr	r3, [pc, #116]	; (8001c3c <page1_print+0x190>)
 8001bc6:	001a      	movs	r2, r3
 8001bc8:	2111      	movs	r1, #17
 8001bca:	2002      	movs	r0, #2
 8001bcc:	f7fe ff02 	bl	80009d4 <lcd_puts>

	clr_data(depth);
 8001bd0:	2006      	movs	r0, #6
 8001bd2:	f7fe ff51 	bl	8000a78 <clr_data>
	if (data_reg.depth)
 8001bd6:	4b16      	ldr	r3, [pc, #88]	; (8001c30 <page1_print+0x184>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	227f      	movs	r2, #127	; 0x7f
 8001bdc:	4393      	bics	r3, r2
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d006      	beq.n	8001bf2 <page1_print+0x146>
		lcd_puts(3, 17, (int8_t *)"ON");
 8001be4:	4b14      	ldr	r3, [pc, #80]	; (8001c38 <page1_print+0x18c>)
 8001be6:	001a      	movs	r2, r3
 8001be8:	2111      	movs	r1, #17
 8001bea:	2003      	movs	r0, #3
 8001bec:	f7fe fef2 	bl	80009d4 <lcd_puts>
 8001bf0:	e005      	b.n	8001bfe <page1_print+0x152>
	else
		lcd_puts(3, 17, (int8_t *)"OFF");
 8001bf2:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <page1_print+0x190>)
 8001bf4:	001a      	movs	r2, r3
 8001bf6:	2111      	movs	r1, #17
 8001bf8:	2003      	movs	r0, #3
 8001bfa:	f7fe feeb 	bl	80009d4 <lcd_puts>

	lcd_puts(1, 0, (int8_t *)">");
 8001bfe:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <page1_print+0x194>)
 8001c00:	001a      	movs	r2, r3
 8001c02:	2100      	movs	r1, #0
 8001c04:	2001      	movs	r0, #1
 8001c06:	f7fe fee5 	bl	80009d4 <lcd_puts>
}
 8001c0a:	46c0      	nop			; (mov r8, r8)
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	b002      	add	sp, #8
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	08005c7c 	.word	0x08005c7c
 8001c18:	08005c94 	.word	0x08005c94
 8001c1c:	08005c9c 	.word	0x08005c9c
 8001c20:	08005ca4 	.word	0x08005ca4
 8001c24:	08005cac 	.word	0x08005cac
 8001c28:	08005cb4 	.word	0x08005cb4
 8001c2c:	08005cbc 	.word	0x08005cbc
 8001c30:	20000008 	.word	0x20000008
 8001c34:	08005c18 	.word	0x08005c18
 8001c38:	08005c20 	.word	0x08005c20
 8001c3c:	08005c24 	.word	0x08005c24
 8001c40:	08005c28 	.word	0x08005c28

08001c44 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	0002      	movs	r2, r0
 8001c4c:	1dbb      	adds	r3, r7, #6
 8001c4e:	801a      	strh	r2, [r3, #0]

	static uint32_t _time;

	if ((HAL_GetTick() - _time) >= 500)
 8001c50:	f000 fe74 	bl	800293c <HAL_GetTick>
 8001c54:	0002      	movs	r2, r0
 8001c56:	4b32      	ldr	r3, [pc, #200]	; (8001d20 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	1ad2      	subs	r2, r2, r3
 8001c5c:	23fa      	movs	r3, #250	; 0xfa
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d358      	bcc.n	8001d16 <HAL_GPIO_EXTI_Callback+0xd2>
	{

		if (GPIO_Pin == S_PRV_Pin)
 8001c64:	1dbb      	adds	r3, r7, #6
 8001c66:	881a      	ldrh	r2, [r3, #0]
 8001c68:	2380      	movs	r3, #128	; 0x80
 8001c6a:	011b      	lsls	r3, r3, #4
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d10a      	bne.n	8001c86 <HAL_GPIO_EXTI_Callback+0x42>
		{

			key_pressed.prv = 1;
 8001c70:	4a2c      	ldr	r2, [pc, #176]	; (8001d24 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001c72:	7813      	ldrb	r3, [r2, #0]
 8001c74:	2101      	movs	r1, #1
 8001c76:	430b      	orrs	r3, r1
 8001c78:	7013      	strb	r3, [r2, #0]
			interrupt_reg.key_flag = 1;
 8001c7a:	4a2b      	ldr	r2, [pc, #172]	; (8001d28 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001c7c:	7813      	ldrb	r3, [r2, #0]
 8001c7e:	2101      	movs	r1, #1
 8001c80:	430b      	orrs	r3, r1
 8001c82:	7013      	strb	r3, [r2, #0]
 8001c84:	e042      	b.n	8001d0c <HAL_GPIO_EXTI_Callback+0xc8>
		}

		else if (GPIO_Pin == S_NEXT_Pin)
 8001c86:	1dbb      	adds	r3, r7, #6
 8001c88:	881a      	ldrh	r2, [r3, #0]
 8001c8a:	2380      	movs	r3, #128	; 0x80
 8001c8c:	015b      	lsls	r3, r3, #5
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d10a      	bne.n	8001ca8 <HAL_GPIO_EXTI_Callback+0x64>
		{

			key_pressed.nxt = 1;
 8001c92:	4a24      	ldr	r2, [pc, #144]	; (8001d24 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001c94:	7813      	ldrb	r3, [r2, #0]
 8001c96:	2102      	movs	r1, #2
 8001c98:	430b      	orrs	r3, r1
 8001c9a:	7013      	strb	r3, [r2, #0]
			interrupt_reg.key_flag = 1;
 8001c9c:	4a22      	ldr	r2, [pc, #136]	; (8001d28 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001c9e:	7813      	ldrb	r3, [r2, #0]
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	430b      	orrs	r3, r1
 8001ca4:	7013      	strb	r3, [r2, #0]
 8001ca6:	e031      	b.n	8001d0c <HAL_GPIO_EXTI_Callback+0xc8>
		}

		else if (GPIO_Pin == DEPTH_Pin)
 8001ca8:	1dbb      	adds	r3, r7, #6
 8001caa:	881a      	ldrh	r2, [r3, #0]
 8001cac:	2380      	movs	r3, #128	; 0x80
 8001cae:	019b      	lsls	r3, r3, #6
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d10a      	bne.n	8001cca <HAL_GPIO_EXTI_Callback+0x86>
		{

			key_pressed.depth = 1;
 8001cb4:	4a1b      	ldr	r2, [pc, #108]	; (8001d24 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001cb6:	7813      	ldrb	r3, [r2, #0]
 8001cb8:	2104      	movs	r1, #4
 8001cba:	430b      	orrs	r3, r1
 8001cbc:	7013      	strb	r3, [r2, #0]
			interrupt_reg.key_flag = 1;
 8001cbe:	4a1a      	ldr	r2, [pc, #104]	; (8001d28 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001cc0:	7813      	ldrb	r3, [r2, #0]
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	430b      	orrs	r3, r1
 8001cc6:	7013      	strb	r3, [r2, #0]
 8001cc8:	e020      	b.n	8001d0c <HAL_GPIO_EXTI_Callback+0xc8>
		}

		else if (GPIO_Pin == CHANGE_N_Pin)
 8001cca:	1dbb      	adds	r3, r7, #6
 8001ccc:	881a      	ldrh	r2, [r3, #0]
 8001cce:	2380      	movs	r3, #128	; 0x80
 8001cd0:	021b      	lsls	r3, r3, #8
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d10a      	bne.n	8001cec <HAL_GPIO_EXTI_Callback+0xa8>
		{

			key_pressed.neg = 1;
 8001cd6:	4a13      	ldr	r2, [pc, #76]	; (8001d24 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001cd8:	7813      	ldrb	r3, [r2, #0]
 8001cda:	2110      	movs	r1, #16
 8001cdc:	430b      	orrs	r3, r1
 8001cde:	7013      	strb	r3, [r2, #0]
			interrupt_reg.key_flag = 1;
 8001ce0:	4a11      	ldr	r2, [pc, #68]	; (8001d28 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001ce2:	7813      	ldrb	r3, [r2, #0]
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	430b      	orrs	r3, r1
 8001ce8:	7013      	strb	r3, [r2, #0]
 8001cea:	e00f      	b.n	8001d0c <HAL_GPIO_EXTI_Callback+0xc8>
		}

		else if (GPIO_Pin == CHANGE_P_Pin)
 8001cec:	1dbb      	adds	r3, r7, #6
 8001cee:	881a      	ldrh	r2, [r3, #0]
 8001cf0:	2380      	movs	r3, #128	; 0x80
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d109      	bne.n	8001d0c <HAL_GPIO_EXTI_Callback+0xc8>
		{

			key_pressed.pos = 1;
 8001cf8:	4a0a      	ldr	r2, [pc, #40]	; (8001d24 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001cfa:	7813      	ldrb	r3, [r2, #0]
 8001cfc:	2108      	movs	r1, #8
 8001cfe:	430b      	orrs	r3, r1
 8001d00:	7013      	strb	r3, [r2, #0]
			interrupt_reg.key_flag = 1;
 8001d02:	4a09      	ldr	r2, [pc, #36]	; (8001d28 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001d04:	7813      	ldrb	r3, [r2, #0]
 8001d06:	2101      	movs	r1, #1
 8001d08:	430b      	orrs	r3, r1
 8001d0a:	7013      	strb	r3, [r2, #0]
		{
			//			interrupt_reg.key_flag = 1;
			//			key_pressed.prv =1;
		}

		_time = HAL_GetTick();
 8001d0c:	f000 fe16 	bl	800293c <HAL_GetTick>
 8001d10:	0002      	movs	r2, r0
 8001d12:	4b03      	ldr	r3, [pc, #12]	; (8001d20 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001d14:	601a      	str	r2, [r3, #0]
	}


}
 8001d16:	46c0      	nop			; (mov r8, r8)
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	b002      	add	sp, #8
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	46c0      	nop			; (mov r8, r8)
 8001d20:	200001dc 	.word	0x200001dc
 8001d24:	200000bc 	.word	0x200000bc
 8001d28:	200000c0 	.word	0x200000c0

08001d2c <beep_sound>:

void beep_sound()
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8001d30:	2390      	movs	r3, #144	; 0x90
 8001d32:	05db      	lsls	r3, r3, #23
 8001d34:	2201      	movs	r2, #1
 8001d36:	2140      	movs	r1, #64	; 0x40
 8001d38:	0018      	movs	r0, r3
 8001d3a:	f001 f898 	bl	8002e6e <HAL_GPIO_WritePin>
	HAL_Delay(35);
 8001d3e:	2023      	movs	r0, #35	; 0x23
 8001d40:	f000 fe06 	bl	8002950 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8001d44:	2390      	movs	r3, #144	; 0x90
 8001d46:	05db      	lsls	r3, r3, #23
 8001d48:	2200      	movs	r2, #0
 8001d4a:	2140      	movs	r1, #64	; 0x40
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	f001 f88e 	bl	8002e6e <HAL_GPIO_WritePin>
	HAL_Delay(35);
 8001d52:	2023      	movs	r0, #35	; 0x23
 8001d54:	f000 fdfc 	bl	8002950 <HAL_Delay>
	//	beep_sound_flag = 0;
}
 8001d58:	46c0      	nop			; (mov r8, r8)
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
	...

08001d60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d60:	b590      	push	{r4, r7, lr}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d66:	f000 fd8f 	bl	8002888 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d6a:	f000 fa35 	bl	80021d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d6e:	f000 fb2d 	bl	80023cc <MX_GPIO_Init>
  MX_TIM6_Init();
 8001d72:	f000 fad5 	bl	8002320 <MX_TIM6_Init>
  MX_I2C1_Init();
 8001d76:	f000 fa93 	bl	80022a0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001d7a:	f000 faf5 	bl	8002368 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim6);
 8001d7e:	4bd8      	ldr	r3, [pc, #864]	; (80020e0 <main+0x380>)
 8001d80:	0018      	movs	r0, r3
 8001d82:	f002 fc19 	bl	80045b8 <HAL_TIM_Base_Start_IT>
	//	HAL_Delay(1000);
	//	home_page();
	//	HAL_Delay(1000);
	//	lcd_clear();

	HAL_Delay(1000);
 8001d86:	23fa      	movs	r3, #250	; 0xfa
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	0018      	movs	r0, r3
 8001d8c:	f000 fde0 	bl	8002950 <HAL_Delay>
	lcd_init();
 8001d90:	f7fe fce2 	bl	8000758 <lcd_init>
	HAL_Delay(1000);
 8001d94:	23fa      	movs	r3, #250	; 0xfa
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	0018      	movs	r0, r3
 8001d9a:	f000 fdd9 	bl	8002950 <HAL_Delay>
	home_page();
 8001d9e:	f7ff f803 	bl	8000da8 <home_page>
	HAL_Delay(1000);
 8001da2:	23fa      	movs	r3, #250	; 0xfa
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	0018      	movs	r0, r3
 8001da8:	f000 fdd2 	bl	8002950 <HAL_Delay>
	lcd_clear();
 8001dac:	f7fe ff6e 	bl	8000c8c <lcd_clear>
	page1_print();
 8001db0:	f7ff fe7c 	bl	8001aac <page1_print>
	HAL_Delay(1000);
 8001db4:	23fa      	movs	r3, #250	; 0xfa
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	0018      	movs	r0, r3
 8001dba:	f000 fdc9 	bl	8002950 <HAL_Delay>
	//  	data_reg.sensor = 1;
	init_gesture();
 8001dbe:	f7fe fa39 	bl	8000234 <init_gesture>
	HAL_Delay(1000);
 8001dc2:	23fa      	movs	r3, #250	; 0xfa
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	f000 fdc2 	bl	8002950 <HAL_Delay>
	uint8_t sns_status = 0;
 8001dcc:	230e      	movs	r3, #14
 8001dce:	18fb      	adds	r3, r7, r3
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	701a      	strb	r2, [r3, #0]
	uint8_t page_change_flag = 0;
 8001dd4:	230f      	movs	r3, #15
 8001dd6:	18fb      	adds	r3, r7, r3
 8001dd8:	2200      	movs	r2, #0
 8001dda:	701a      	strb	r2, [r3, #0]

	uint32_t temp_time = HAL_GetTick();
 8001ddc:	f000 fdae 	bl	800293c <HAL_GetTick>
 8001de0:	0003      	movs	r3, r0
 8001de2:	60bb      	str	r3, [r7, #8]

    /* USER CODE BEGIN 3 */



		if (interrupt_reg.key_flag)
 8001de4:	4bbf      	ldr	r3, [pc, #764]	; (80020e4 <main+0x384>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	07db      	lsls	r3, r3, #31
 8001dea:	0fdb      	lsrs	r3, r3, #31
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d100      	bne.n	8001df4 <main+0x94>
 8001df2:	e0e3      	b.n	8001fbc <main+0x25c>
		{

			if (HAL_GPIO_ReadPin(S_PRV_GPIO_Port, S_PRV_Pin) == 0)
 8001df4:	2380      	movs	r3, #128	; 0x80
 8001df6:	011b      	lsls	r3, r3, #4
 8001df8:	4abb      	ldr	r2, [pc, #748]	; (80020e8 <main+0x388>)
 8001dfa:	0019      	movs	r1, r3
 8001dfc:	0010      	movs	r0, r2
 8001dfe:	f001 f819 	bl	8002e34 <HAL_GPIO_ReadPin>
 8001e02:	1e03      	subs	r3, r0, #0
 8001e04:	d12b      	bne.n	8001e5e <main+0xfe>
			{
				temp_time = HAL_GetTick();
 8001e06:	f000 fd99 	bl	800293c <HAL_GetTick>
 8001e0a:	0003      	movs	r3, r0
 8001e0c:	60bb      	str	r3, [r7, #8]
				//				HAL_Delay(1000);
				while ((HAL_GetTick() - temp_time) >= 2000)  // error
 8001e0e:	e01d      	b.n	8001e4c <main+0xec>
				{
					if (HAL_GPIO_ReadPin(S_PRV_GPIO_Port, S_PRV_Pin))
 8001e10:	2380      	movs	r3, #128	; 0x80
 8001e12:	011b      	lsls	r3, r3, #4
 8001e14:	4ab4      	ldr	r2, [pc, #720]	; (80020e8 <main+0x388>)
 8001e16:	0019      	movs	r1, r3
 8001e18:	0010      	movs	r0, r2
 8001e1a:	f001 f80b 	bl	8002e34 <HAL_GPIO_ReadPin>
 8001e1e:	1e03      	subs	r3, r0, #0
 8001e20:	d00a      	beq.n	8001e38 <main+0xd8>
					{
						interrupt_reg.key_flag = 1;
 8001e22:	4ab0      	ldr	r2, [pc, #704]	; (80020e4 <main+0x384>)
 8001e24:	7813      	ldrb	r3, [r2, #0]
 8001e26:	2101      	movs	r1, #1
 8001e28:	430b      	orrs	r3, r1
 8001e2a:	7013      	strb	r3, [r2, #0]
						interrupt_reg.prv_long_press = 0;
 8001e2c:	4aad      	ldr	r2, [pc, #692]	; (80020e4 <main+0x384>)
 8001e2e:	7813      	ldrb	r3, [r2, #0]
 8001e30:	2108      	movs	r1, #8
 8001e32:	438b      	bics	r3, r1
 8001e34:	7013      	strb	r3, [r2, #0]
						break;
 8001e36:	e012      	b.n	8001e5e <main+0xfe>
					}
					interrupt_reg.key_flag = 0;
 8001e38:	4aaa      	ldr	r2, [pc, #680]	; (80020e4 <main+0x384>)
 8001e3a:	7813      	ldrb	r3, [r2, #0]
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	438b      	bics	r3, r1
 8001e40:	7013      	strb	r3, [r2, #0]
					interrupt_reg.prv_long_press = 1;
 8001e42:	4aa8      	ldr	r2, [pc, #672]	; (80020e4 <main+0x384>)
 8001e44:	7813      	ldrb	r3, [r2, #0]
 8001e46:	2108      	movs	r1, #8
 8001e48:	430b      	orrs	r3, r1
 8001e4a:	7013      	strb	r3, [r2, #0]
				while ((HAL_GetTick() - temp_time) >= 2000)  // error
 8001e4c:	f000 fd76 	bl	800293c <HAL_GetTick>
 8001e50:	0002      	movs	r2, r0
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	1ad2      	subs	r2, r2, r3
 8001e56:	23fa      	movs	r3, #250	; 0xfa
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d2d8      	bcs.n	8001e10 <main+0xb0>
				}
			}

			if (HAL_GPIO_ReadPin(DEPTH_GPIO_Port, DEPTH_Pin) == 0)
 8001e5e:	2380      	movs	r3, #128	; 0x80
 8001e60:	019b      	lsls	r3, r3, #6
 8001e62:	4aa1      	ldr	r2, [pc, #644]	; (80020e8 <main+0x388>)
 8001e64:	0019      	movs	r1, r3
 8001e66:	0010      	movs	r0, r2
 8001e68:	f000 ffe4 	bl	8002e34 <HAL_GPIO_ReadPin>
 8001e6c:	1e03      	subs	r3, r0, #0
 8001e6e:	d12b      	bne.n	8001ec8 <main+0x168>
			{
				temp_time = HAL_GetTick();
 8001e70:	f000 fd64 	bl	800293c <HAL_GetTick>
 8001e74:	0003      	movs	r3, r0
 8001e76:	60bb      	str	r3, [r7, #8]
				//				HAL_Delay(1000);
				while ((HAL_GetTick() - temp_time) <= 2000)
 8001e78:	e01d      	b.n	8001eb6 <main+0x156>
				{
					if (HAL_GPIO_ReadPin(DEPTH_GPIO_Port, DEPTH_Pin))
 8001e7a:	2380      	movs	r3, #128	; 0x80
 8001e7c:	019b      	lsls	r3, r3, #6
 8001e7e:	4a9a      	ldr	r2, [pc, #616]	; (80020e8 <main+0x388>)
 8001e80:	0019      	movs	r1, r3
 8001e82:	0010      	movs	r0, r2
 8001e84:	f000 ffd6 	bl	8002e34 <HAL_GPIO_ReadPin>
 8001e88:	1e03      	subs	r3, r0, #0
 8001e8a:	d00a      	beq.n	8001ea2 <main+0x142>
					{
						interrupt_reg.key_flag = 1;
 8001e8c:	4a95      	ldr	r2, [pc, #596]	; (80020e4 <main+0x384>)
 8001e8e:	7813      	ldrb	r3, [r2, #0]
 8001e90:	2101      	movs	r1, #1
 8001e92:	430b      	orrs	r3, r1
 8001e94:	7013      	strb	r3, [r2, #0]
						interrupt_reg.depth_long_press = 0;
 8001e96:	4a93      	ldr	r2, [pc, #588]	; (80020e4 <main+0x384>)
 8001e98:	7813      	ldrb	r3, [r2, #0]
 8001e9a:	2110      	movs	r1, #16
 8001e9c:	438b      	bics	r3, r1
 8001e9e:	7013      	strb	r3, [r2, #0]
						break;
 8001ea0:	e012      	b.n	8001ec8 <main+0x168>
					}
					interrupt_reg.key_flag = 0;
 8001ea2:	4a90      	ldr	r2, [pc, #576]	; (80020e4 <main+0x384>)
 8001ea4:	7813      	ldrb	r3, [r2, #0]
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	438b      	bics	r3, r1
 8001eaa:	7013      	strb	r3, [r2, #0]
					interrupt_reg.depth_long_press = 1;
 8001eac:	4a8d      	ldr	r2, [pc, #564]	; (80020e4 <main+0x384>)
 8001eae:	7813      	ldrb	r3, [r2, #0]
 8001eb0:	2110      	movs	r1, #16
 8001eb2:	430b      	orrs	r3, r1
 8001eb4:	7013      	strb	r3, [r2, #0]
				while ((HAL_GetTick() - temp_time) <= 2000)
 8001eb6:	f000 fd41 	bl	800293c <HAL_GetTick>
 8001eba:	0002      	movs	r2, r0
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	1ad2      	subs	r2, r2, r3
 8001ec0:	23fa      	movs	r3, #250	; 0xfa
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d9d8      	bls.n	8001e7a <main+0x11a>
				}
			}

			if (interrupt_reg.key_flag)
 8001ec8:	4b86      	ldr	r3, [pc, #536]	; (80020e4 <main+0x384>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	07db      	lsls	r3, r3, #31
 8001ece:	0fdb      	lsrs	r3, r3, #31
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d00d      	beq.n	8001ef2 <main+0x192>
			{
				beep_sound();
 8001ed6:	f7ff ff29 	bl	8001d2c <beep_sound>
				update_key_press();
 8001eda:	f7fe ff85 	bl	8000de8 <update_key_press>
				interrupt_reg.key_flag = 0;
 8001ede:	4a81      	ldr	r2, [pc, #516]	; (80020e4 <main+0x384>)
 8001ee0:	7813      	ldrb	r3, [r2, #0]
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	438b      	bics	r3, r1
 8001ee6:	7013      	strb	r3, [r2, #0]
				interrupt_reg.update_data = 1;
 8001ee8:	4a7e      	ldr	r2, [pc, #504]	; (80020e4 <main+0x384>)
 8001eea:	7813      	ldrb	r3, [r2, #0]
 8001eec:	2120      	movs	r1, #32
 8001eee:	430b      	orrs	r3, r1
 8001ef0:	7013      	strb	r3, [r2, #0]
			}

			if (interrupt_reg.prv_long_press)
 8001ef2:	4b7c      	ldr	r3, [pc, #496]	; (80020e4 <main+0x384>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	071b      	lsls	r3, r3, #28
 8001ef8:	0fdb      	lsrs	r3, r3, #31
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d039      	beq.n	8001f74 <main+0x214>
			{
				beep_sound();
 8001f00:	f7ff ff14 	bl	8001d2c <beep_sound>
				interrupt_reg.prv_long_press = 0;
 8001f04:	4a77      	ldr	r2, [pc, #476]	; (80020e4 <main+0x384>)
 8001f06:	7813      	ldrb	r3, [r2, #0]
 8001f08:	2108      	movs	r1, #8
 8001f0a:	438b      	bics	r3, r1
 8001f0c:	7013      	strb	r3, [r2, #0]
				key_pressed.prv = 0;
 8001f0e:	4a77      	ldr	r2, [pc, #476]	; (80020ec <main+0x38c>)
 8001f10:	7813      	ldrb	r3, [r2, #0]
 8001f12:	2101      	movs	r1, #1
 8001f14:	438b      	bics	r3, r1
 8001f16:	7013      	strb	r3, [r2, #0]
				//				interrupt_reg.update_data = 0;
				data_reg.sensor = !data_reg.sensor;
 8001f18:	4b75      	ldr	r3, [pc, #468]	; (80020f0 <main+0x390>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2210      	movs	r2, #16
 8001f1e:	4013      	ands	r3, r2
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	425a      	negs	r2, r3
 8001f24:	4153      	adcs	r3, r2
 8001f26:	b2da      	uxtb	r2, r3
 8001f28:	4b71      	ldr	r3, [pc, #452]	; (80020f0 <main+0x390>)
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	400a      	ands	r2, r1
 8001f2e:	0110      	lsls	r0, r2, #4
 8001f30:	781a      	ldrb	r2, [r3, #0]
 8001f32:	2110      	movs	r1, #16
 8001f34:	438a      	bics	r2, r1
 8001f36:	1c11      	adds	r1, r2, #0
 8001f38:	1c02      	adds	r2, r0, #0
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	701a      	strb	r2, [r3, #0]
				clr_data(sensor);
 8001f3e:	2003      	movs	r0, #3
 8001f40:	f7fe fd9a 	bl	8000a78 <clr_data>
				if (data_reg.sensor)
 8001f44:	4b6a      	ldr	r3, [pc, #424]	; (80020f0 <main+0x390>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2210      	movs	r2, #16
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d006      	beq.n	8001f60 <main+0x200>
					lcd_puts(3, 7, (int8_t *)"ON");
 8001f52:	4b68      	ldr	r3, [pc, #416]	; (80020f4 <main+0x394>)
 8001f54:	001a      	movs	r2, r3
 8001f56:	2107      	movs	r1, #7
 8001f58:	2003      	movs	r0, #3
 8001f5a:	f7fe fd3b 	bl	80009d4 <lcd_puts>
 8001f5e:	e005      	b.n	8001f6c <main+0x20c>
				else
					lcd_puts(3, 7, (int8_t *)"OFF");
 8001f60:	4b65      	ldr	r3, [pc, #404]	; (80020f8 <main+0x398>)
 8001f62:	001a      	movs	r2, r3
 8001f64:	2107      	movs	r1, #7
 8001f66:	2003      	movs	r0, #3
 8001f68:	f7fe fd34 	bl	80009d4 <lcd_puts>
				sns_status = 1;
 8001f6c:	230e      	movs	r3, #14
 8001f6e:	18fb      	adds	r3, r7, r3
 8001f70:	2201      	movs	r2, #1
 8001f72:	701a      	strb	r2, [r3, #0]
			}

			if (interrupt_reg.depth_long_press)
 8001f74:	4b5b      	ldr	r3, [pc, #364]	; (80020e4 <main+0x384>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	06db      	lsls	r3, r3, #27
 8001f7a:	0fdb      	lsrs	r3, r3, #31
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d01c      	beq.n	8001fbc <main+0x25c>
			{
//				lcd_puts(0, 0, (int8_t *)"...");
				page_change_flag = 1;
 8001f82:	230f      	movs	r3, #15
 8001f84:	18fb      	adds	r3, r7, r3
 8001f86:	2201      	movs	r2, #1
 8001f88:	701a      	strb	r2, [r3, #0]
				beep_sound();
 8001f8a:	f7ff fecf 	bl	8001d2c <beep_sound>
				current_pos.key_number = _depth;
 8001f8e:	4b5b      	ldr	r3, [pc, #364]	; (80020fc <main+0x39c>)
 8001f90:	785a      	ldrb	r2, [r3, #1]
 8001f92:	2107      	movs	r1, #7
 8001f94:	438a      	bics	r2, r1
 8001f96:	1c11      	adds	r1, r2, #0
 8001f98:	2202      	movs	r2, #2
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	705a      	strb	r2, [r3, #1]
				interrupt_reg.depth_long_press = 0;
 8001f9e:	4a51      	ldr	r2, [pc, #324]	; (80020e4 <main+0x384>)
 8001fa0:	7813      	ldrb	r3, [r2, #0]
 8001fa2:	2110      	movs	r1, #16
 8001fa4:	438b      	bics	r3, r1
 8001fa6:	7013      	strb	r3, [r2, #0]
				key_pressed.depth = 0;
 8001fa8:	4a50      	ldr	r2, [pc, #320]	; (80020ec <main+0x38c>)
 8001faa:	7813      	ldrb	r3, [r2, #0]
 8001fac:	2104      	movs	r1, #4
 8001fae:	438b      	bics	r3, r1
 8001fb0:	7013      	strb	r3, [r2, #0]
				interrupt_reg.key_flag =0;
 8001fb2:	4a4c      	ldr	r2, [pc, #304]	; (80020e4 <main+0x384>)
 8001fb4:	7813      	ldrb	r3, [r2, #0]
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	438b      	bics	r3, r1
 8001fba:	7013      	strb	r3, [r2, #0]
			//				interrupt_reg.gesture_flag = 0;
			//				interrupt_reg.update_data = 1;
			//			}
		}

		if (data_reg.sensor)
 8001fbc:	4b4c      	ldr	r3, [pc, #304]	; (80020f0 <main+0x390>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2210      	movs	r2, #16
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d054      	beq.n	8002074 <main+0x314>
		{
			HAL_Delay(100);
 8001fca:	2064      	movs	r0, #100	; 0x64
 8001fcc:	f000 fcc0 	bl	8002950 <HAL_Delay>
			if (gestureAvailable())
 8001fd0:	f7fe fb2c 	bl	800062c <gestureAvailable>
 8001fd4:	1e03      	subs	r3, r0, #0
 8001fd6:	d04d      	beq.n	8002074 <main+0x314>
			{
				uint8_t gesture = readGesture();
 8001fd8:	1dfc      	adds	r4, r7, #7
 8001fda:	f7fe fa11 	bl	8000400 <readGesture>
 8001fde:	0003      	movs	r3, r0
 8001fe0:	7023      	strb	r3, [r4, #0]
				switch (gesture)
 8001fe2:	1dfb      	adds	r3, r7, #7
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	2b03      	cmp	r3, #3
 8001fe8:	d035      	beq.n	8002056 <main+0x2f6>
 8001fea:	dc45      	bgt.n	8002078 <main+0x318>
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d023      	beq.n	8002038 <main+0x2d8>
 8001ff0:	dc42      	bgt.n	8002078 <main+0x318>
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d002      	beq.n	8001ffc <main+0x29c>
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d00f      	beq.n	800201a <main+0x2ba>
					update_key_press();
					interrupt_reg.update_data = 1;
					break;

				default:
					break;
 8001ffa:	e03d      	b.n	8002078 <main+0x318>
					beep_sound();
 8001ffc:	f7ff fe96 	bl	8001d2c <beep_sound>
					key_pressed.prv = 1;
 8002000:	4a3a      	ldr	r2, [pc, #232]	; (80020ec <main+0x38c>)
 8002002:	7813      	ldrb	r3, [r2, #0]
 8002004:	2101      	movs	r1, #1
 8002006:	430b      	orrs	r3, r1
 8002008:	7013      	strb	r3, [r2, #0]
					update_key_press();
 800200a:	f7fe feed 	bl	8000de8 <update_key_press>
					interrupt_reg.update_data = 1;
 800200e:	4a35      	ldr	r2, [pc, #212]	; (80020e4 <main+0x384>)
 8002010:	7813      	ldrb	r3, [r2, #0]
 8002012:	2120      	movs	r1, #32
 8002014:	430b      	orrs	r3, r1
 8002016:	7013      	strb	r3, [r2, #0]
					break;
 8002018:	e02f      	b.n	800207a <main+0x31a>
					beep_sound();
 800201a:	f7ff fe87 	bl	8001d2c <beep_sound>
					key_pressed.nxt = 1;
 800201e:	4a33      	ldr	r2, [pc, #204]	; (80020ec <main+0x38c>)
 8002020:	7813      	ldrb	r3, [r2, #0]
 8002022:	2102      	movs	r1, #2
 8002024:	430b      	orrs	r3, r1
 8002026:	7013      	strb	r3, [r2, #0]
					update_key_press();
 8002028:	f7fe fede 	bl	8000de8 <update_key_press>
					interrupt_reg.update_data = 1;
 800202c:	4a2d      	ldr	r2, [pc, #180]	; (80020e4 <main+0x384>)
 800202e:	7813      	ldrb	r3, [r2, #0]
 8002030:	2120      	movs	r1, #32
 8002032:	430b      	orrs	r3, r1
 8002034:	7013      	strb	r3, [r2, #0]
					break;
 8002036:	e020      	b.n	800207a <main+0x31a>
					beep_sound();
 8002038:	f7ff fe78 	bl	8001d2c <beep_sound>
					key_pressed.neg = 1;
 800203c:	4a2b      	ldr	r2, [pc, #172]	; (80020ec <main+0x38c>)
 800203e:	7813      	ldrb	r3, [r2, #0]
 8002040:	2110      	movs	r1, #16
 8002042:	430b      	orrs	r3, r1
 8002044:	7013      	strb	r3, [r2, #0]
					update_key_press();
 8002046:	f7fe fecf 	bl	8000de8 <update_key_press>
					interrupt_reg.update_data = 1;
 800204a:	4a26      	ldr	r2, [pc, #152]	; (80020e4 <main+0x384>)
 800204c:	7813      	ldrb	r3, [r2, #0]
 800204e:	2120      	movs	r1, #32
 8002050:	430b      	orrs	r3, r1
 8002052:	7013      	strb	r3, [r2, #0]
					break;
 8002054:	e011      	b.n	800207a <main+0x31a>
					beep_sound();
 8002056:	f7ff fe69 	bl	8001d2c <beep_sound>
					key_pressed.pos = 1;
 800205a:	4a24      	ldr	r2, [pc, #144]	; (80020ec <main+0x38c>)
 800205c:	7813      	ldrb	r3, [r2, #0]
 800205e:	2108      	movs	r1, #8
 8002060:	430b      	orrs	r3, r1
 8002062:	7013      	strb	r3, [r2, #0]
					update_key_press();
 8002064:	f7fe fec0 	bl	8000de8 <update_key_press>
					interrupt_reg.update_data = 1;
 8002068:	4a1e      	ldr	r2, [pc, #120]	; (80020e4 <main+0x384>)
 800206a:	7813      	ldrb	r3, [r2, #0]
 800206c:	2120      	movs	r1, #32
 800206e:	430b      	orrs	r3, r1
 8002070:	7013      	strb	r3, [r2, #0]
					break;
 8002072:	e002      	b.n	800207a <main+0x31a>
				}
			}
 8002074:	46c0      	nop			; (mov r8, r8)
 8002076:	e000      	b.n	800207a <main+0x31a>
					break;
 8002078:	46c0      	nop			; (mov r8, r8)
		}

		if (interrupt_reg.update_data)
 800207a:	4b1a      	ldr	r3, [pc, #104]	; (80020e4 <main+0x384>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	069b      	lsls	r3, r3, #26
 8002080:	0fdb      	lsrs	r3, r3, #31
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b00      	cmp	r3, #0
 8002086:	d100      	bne.n	800208a <main+0x32a>
 8002088:	e078      	b.n	800217c <main+0x41c>
		{
//			char buffers[3];
			update_new_data();
 800208a:	f7ff f891 	bl	80011b0 <update_new_data>

			if(current_pos.position_cursor == 7 )
 800208e:	4b1b      	ldr	r3, [pc, #108]	; (80020fc <main+0x39c>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	b25b      	sxtb	r3, r3
 8002094:	2b07      	cmp	r3, #7
 8002096:	d137      	bne.n	8002108 <main+0x3a8>
//						page_2_print();
//					}
//					update_screen_data_2();


					if(pg2_fc == 0)
 8002098:	4b19      	ldr	r3, [pc, #100]	; (8002100 <main+0x3a0>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d10d      	bne.n	80020bc <main+0x35c>
					{
//						lcd_clear();
						if(last_pg != 2)
 80020a0:	4b18      	ldr	r3, [pc, #96]	; (8002104 <main+0x3a4>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d003      	beq.n	80020b0 <main+0x350>
						{
						lcd_clear();
 80020a8:	f7fe fdf0 	bl	8000c8c <lcd_clear>
						page_2_print();
 80020ac:	f7ff f8e8 	bl	8001280 <page_2_print>
						}

						last_pg = 2;
 80020b0:	4b14      	ldr	r3, [pc, #80]	; (8002104 <main+0x3a4>)
 80020b2:	2202      	movs	r2, #2
 80020b4:	701a      	strb	r2, [r3, #0]
						update_screen_data_2();
 80020b6:	f7ff f96f 	bl	8001398 <update_screen_data_2>
 80020ba:	e05a      	b.n	8002172 <main+0x412>
					}
					else if (pg2_fc == 1)
 80020bc:	4b10      	ldr	r3, [pc, #64]	; (8002100 <main+0x3a0>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d156      	bne.n	8002172 <main+0x412>
					{
//						lcd_clear();
						if(last_pg != 3)
 80020c4:	4b0f      	ldr	r3, [pc, #60]	; (8002104 <main+0x3a4>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	2b03      	cmp	r3, #3
 80020ca:	d006      	beq.n	80020da <main+0x37a>
						{
							lcd_clear();
 80020cc:	f7fe fdde 	bl	8000c8c <lcd_clear>
							page_3_print();
 80020d0:	f7ff f8ec 	bl	80012ac <page_3_print>
							last_pg = 3;
 80020d4:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <main+0x3a4>)
 80020d6:	2203      	movs	r2, #3
 80020d8:	701a      	strb	r2, [r3, #0]
						}
//						lcd_clear();
//						page_3_print();


						update_screen_data_3();
 80020da:	f7ff f973 	bl	80013c4 <update_screen_data_3>
 80020de:	e048      	b.n	8002172 <main+0x412>
 80020e0:	20000110 	.word	0x20000110
 80020e4:	200000c0 	.word	0x200000c0
 80020e8:	48000400 	.word	0x48000400
 80020ec:	200000bc 	.word	0x200000bc
 80020f0:	20000008 	.word	0x20000008
 80020f4:	08005c20 	.word	0x08005c20
 80020f8:	08005c24 	.word	0x08005c24
 80020fc:	20000004 	.word	0x20000004
 8002100:	200000b6 	.word	0x200000b6
 8002104:	200000b5 	.word	0x200000b5
//					sprintf(buffers, "%02d", current_pos.position_cursor);
//					lcd_puts(3, 16, (int8_t *)buffers);


				}
			else if((current_pos.position_cursor >= 1 )|| (current_pos.position_cursor <= 6))
 8002108:	4b2e      	ldr	r3, [pc, #184]	; (80021c4 <main+0x464>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	b25b      	sxtb	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	dc04      	bgt.n	800211c <main+0x3bc>
 8002112:	4b2c      	ldr	r3, [pc, #176]	; (80021c4 <main+0x464>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	b25b      	sxtb	r3, r3
 8002118:	2b06      	cmp	r3, #6
 800211a:	dc2a      	bgt.n	8002172 <main+0x412>
			{
				if(pg2_fc == 0)
 800211c:	4b2a      	ldr	r3, [pc, #168]	; (80021c8 <main+0x468>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d10d      	bne.n	8002140 <main+0x3e0>
				{

					if(last_pg != 1)
 8002124:	4b29      	ldr	r3, [pc, #164]	; (80021cc <main+0x46c>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d003      	beq.n	8002134 <main+0x3d4>
					{
						lcd_clear();
 800212c:	f7fe fdae 	bl	8000c8c <lcd_clear>
						page1_print();
 8002130:	f7ff fcbc 	bl	8001aac <page1_print>
					}

					last_pg = 1;
 8002134:	4b25      	ldr	r3, [pc, #148]	; (80021cc <main+0x46c>)
 8002136:	2201      	movs	r2, #1
 8002138:	701a      	strb	r2, [r3, #0]
					update_screen_data();
 800213a:	f7ff fa85 	bl	8001648 <update_screen_data>
 800213e:	e018      	b.n	8002172 <main+0x412>

//					sprintf(buffers, "%02d", current_pos.position_cursor);
	//				lcd_puts(2, 16, (int8_t *)buffers);
				}

				else if (pg2_fc == 1)
 8002140:	4b21      	ldr	r3, [pc, #132]	; (80021c8 <main+0x468>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d114      	bne.n	8002172 <main+0x412>
				{
					if(current_pos.position_cursor >3)
 8002148:	4b1e      	ldr	r3, [pc, #120]	; (80021c4 <main+0x464>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	b25b      	sxtb	r3, r3
 800214e:	2b03      	cmp	r3, #3
 8002150:	dd02      	ble.n	8002158 <main+0x3f8>
					{
						current_pos.position_cursor = 7;
 8002152:	4b1c      	ldr	r3, [pc, #112]	; (80021c4 <main+0x464>)
 8002154:	2207      	movs	r2, #7
 8002156:	701a      	strb	r2, [r3, #0]
					}



					if(last_pg != 3)
 8002158:	4b1c      	ldr	r3, [pc, #112]	; (80021cc <main+0x46c>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b03      	cmp	r3, #3
 800215e:	d003      	beq.n	8002168 <main+0x408>
					{
						lcd_clear();
 8002160:	f7fe fd94 	bl	8000c8c <lcd_clear>
						page_3_print();
 8002164:	f7ff f8a2 	bl	80012ac <page_3_print>
					}

					last_pg = 3;
 8002168:	4b18      	ldr	r3, [pc, #96]	; (80021cc <main+0x46c>)
 800216a:	2203      	movs	r2, #3
 800216c:	701a      	strb	r2, [r3, #0]
					update_screen_data_3();
 800216e:	f7ff f929 	bl	80013c4 <update_screen_data_3>
				}

			}


			interrupt_reg.update_data = 0;
 8002172:	4a17      	ldr	r2, [pc, #92]	; (80021d0 <main+0x470>)
 8002174:	7813      	ldrb	r3, [r2, #0]
 8002176:	2120      	movs	r1, #32
 8002178:	438b      	bics	r3, r1
 800217a:	7013      	strb	r3, [r2, #0]
		}

		if (page_change_flag)
 800217c:	240f      	movs	r4, #15
 800217e:	193b      	adds	r3, r7, r4
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d100      	bne.n	8002188 <main+0x428>
 8002186:	e62d      	b.n	8001de4 <main+0x84>
		{
			clock_page();
 8002188:	f7fe fd8a 	bl	8000ca0 <clock_page>
			Total_Time_Print(timer_intrupt);
 800218c:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <main+0x474>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	0018      	movs	r0, r3
 8002192:	f7fe fdad 	bl	8000cf0 <Total_Time_Print>
			HAL_Delay(2000);
 8002196:	23fa      	movs	r3, #250	; 0xfa
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	0018      	movs	r0, r3
 800219c:	f000 fbd8 	bl	8002950 <HAL_Delay>
			lcd_clear();
 80021a0:	f7fe fd74 	bl	8000c8c <lcd_clear>
			page1_print();
 80021a4:	f7ff fc82 	bl	8001aac <page1_print>
			page_change_flag = 0;
 80021a8:	193b      	adds	r3, r7, r4
 80021aa:	2200      	movs	r2, #0
 80021ac:	701a      	strb	r2, [r3, #0]
			interrupt_reg.update_data = 0;
 80021ae:	4a08      	ldr	r2, [pc, #32]	; (80021d0 <main+0x470>)
 80021b0:	7813      	ldrb	r3, [r2, #0]
 80021b2:	2120      	movs	r1, #32
 80021b4:	438b      	bics	r3, r1
 80021b6:	7013      	strb	r3, [r2, #0]
			interrupt_reg.key_flag =0;
 80021b8:	4a05      	ldr	r2, [pc, #20]	; (80021d0 <main+0x470>)
 80021ba:	7813      	ldrb	r3, [r2, #0]
 80021bc:	2101      	movs	r1, #1
 80021be:	438b      	bics	r3, r1
 80021c0:	7013      	strb	r3, [r2, #0]
		if (interrupt_reg.key_flag)
 80021c2:	e60f      	b.n	8001de4 <main+0x84>
 80021c4:	20000004 	.word	0x20000004
 80021c8:	200000b6 	.word	0x200000b6
 80021cc:	200000b5 	.word	0x200000b5
 80021d0:	200000c0 	.word	0x200000c0
 80021d4:	200000b0 	.word	0x200000b0

080021d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021d8:	b590      	push	{r4, r7, lr}
 80021da:	b095      	sub	sp, #84	; 0x54
 80021dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021de:	2420      	movs	r4, #32
 80021e0:	193b      	adds	r3, r7, r4
 80021e2:	0018      	movs	r0, r3
 80021e4:	2330      	movs	r3, #48	; 0x30
 80021e6:	001a      	movs	r2, r3
 80021e8:	2100      	movs	r1, #0
 80021ea:	f003 f839 	bl	8005260 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021ee:	2310      	movs	r3, #16
 80021f0:	18fb      	adds	r3, r7, r3
 80021f2:	0018      	movs	r0, r3
 80021f4:	2310      	movs	r3, #16
 80021f6:	001a      	movs	r2, r3
 80021f8:	2100      	movs	r1, #0
 80021fa:	f003 f831 	bl	8005260 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021fe:	003b      	movs	r3, r7
 8002200:	0018      	movs	r0, r3
 8002202:	2310      	movs	r3, #16
 8002204:	001a      	movs	r2, r3
 8002206:	2100      	movs	r1, #0
 8002208:	f003 f82a 	bl	8005260 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800220c:	0021      	movs	r1, r4
 800220e:	187b      	adds	r3, r7, r1
 8002210:	2202      	movs	r2, #2
 8002212:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002214:	187b      	adds	r3, r7, r1
 8002216:	2201      	movs	r2, #1
 8002218:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800221a:	187b      	adds	r3, r7, r1
 800221c:	2210      	movs	r2, #16
 800221e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002220:	187b      	adds	r3, r7, r1
 8002222:	2202      	movs	r2, #2
 8002224:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002226:	187b      	adds	r3, r7, r1
 8002228:	2200      	movs	r2, #0
 800222a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 800222c:	187b      	adds	r3, r7, r1
 800222e:	22c0      	movs	r2, #192	; 0xc0
 8002230:	0352      	lsls	r2, r2, #13
 8002232:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002234:	187b      	adds	r3, r7, r1
 8002236:	2200      	movs	r2, #0
 8002238:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800223a:	187b      	adds	r3, r7, r1
 800223c:	0018      	movs	r0, r3
 800223e:	f001 fc31 	bl	8003aa4 <HAL_RCC_OscConfig>
 8002242:	1e03      	subs	r3, r0, #0
 8002244:	d001      	beq.n	800224a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002246:	f000 f963 	bl	8002510 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800224a:	2110      	movs	r1, #16
 800224c:	187b      	adds	r3, r7, r1
 800224e:	2207      	movs	r2, #7
 8002250:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002252:	187b      	adds	r3, r7, r1
 8002254:	2202      	movs	r2, #2
 8002256:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002258:	187b      	adds	r3, r7, r1
 800225a:	2200      	movs	r2, #0
 800225c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800225e:	187b      	adds	r3, r7, r1
 8002260:	2200      	movs	r2, #0
 8002262:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002264:	187b      	adds	r3, r7, r1
 8002266:	2101      	movs	r1, #1
 8002268:	0018      	movs	r0, r3
 800226a:	f001 ff35 	bl	80040d8 <HAL_RCC_ClockConfig>
 800226e:	1e03      	subs	r3, r0, #0
 8002270:	d001      	beq.n	8002276 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002272:	f000 f94d 	bl	8002510 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8002276:	003b      	movs	r3, r7
 8002278:	2221      	movs	r2, #33	; 0x21
 800227a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800227c:	003b      	movs	r3, r7
 800227e:	2200      	movs	r2, #0
 8002280:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002282:	003b      	movs	r3, r7
 8002284:	2200      	movs	r2, #0
 8002286:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002288:	003b      	movs	r3, r7
 800228a:	0018      	movs	r0, r3
 800228c:	f002 f876 	bl	800437c <HAL_RCCEx_PeriphCLKConfig>
 8002290:	1e03      	subs	r3, r0, #0
 8002292:	d001      	beq.n	8002298 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002294:	f000 f93c 	bl	8002510 <Error_Handler>
  }
}
 8002298:	46c0      	nop			; (mov r8, r8)
 800229a:	46bd      	mov	sp, r7
 800229c:	b015      	add	sp, #84	; 0x54
 800229e:	bd90      	pop	{r4, r7, pc}

080022a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80022a4:	4b1b      	ldr	r3, [pc, #108]	; (8002314 <MX_I2C1_Init+0x74>)
 80022a6:	4a1c      	ldr	r2, [pc, #112]	; (8002318 <MX_I2C1_Init+0x78>)
 80022a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 80022aa:	4b1a      	ldr	r3, [pc, #104]	; (8002314 <MX_I2C1_Init+0x74>)
 80022ac:	4a1b      	ldr	r2, [pc, #108]	; (800231c <MX_I2C1_Init+0x7c>)
 80022ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80022b0:	4b18      	ldr	r3, [pc, #96]	; (8002314 <MX_I2C1_Init+0x74>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022b6:	4b17      	ldr	r3, [pc, #92]	; (8002314 <MX_I2C1_Init+0x74>)
 80022b8:	2201      	movs	r2, #1
 80022ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022bc:	4b15      	ldr	r3, [pc, #84]	; (8002314 <MX_I2C1_Init+0x74>)
 80022be:	2200      	movs	r2, #0
 80022c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80022c2:	4b14      	ldr	r3, [pc, #80]	; (8002314 <MX_I2C1_Init+0x74>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80022c8:	4b12      	ldr	r3, [pc, #72]	; (8002314 <MX_I2C1_Init+0x74>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022ce:	4b11      	ldr	r3, [pc, #68]	; (8002314 <MX_I2C1_Init+0x74>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022d4:	4b0f      	ldr	r3, [pc, #60]	; (8002314 <MX_I2C1_Init+0x74>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80022da:	4b0e      	ldr	r3, [pc, #56]	; (8002314 <MX_I2C1_Init+0x74>)
 80022dc:	0018      	movs	r0, r3
 80022de:	f000 fdff 	bl	8002ee0 <HAL_I2C_Init>
 80022e2:	1e03      	subs	r3, r0, #0
 80022e4:	d001      	beq.n	80022ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80022e6:	f000 f913 	bl	8002510 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80022ea:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <MX_I2C1_Init+0x74>)
 80022ec:	2100      	movs	r1, #0
 80022ee:	0018      	movs	r0, r3
 80022f0:	f001 fb40 	bl	8003974 <HAL_I2CEx_ConfigAnalogFilter>
 80022f4:	1e03      	subs	r3, r0, #0
 80022f6:	d001      	beq.n	80022fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80022f8:	f000 f90a 	bl	8002510 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80022fc:	4b05      	ldr	r3, [pc, #20]	; (8002314 <MX_I2C1_Init+0x74>)
 80022fe:	2100      	movs	r1, #0
 8002300:	0018      	movs	r0, r3
 8002302:	f001 fb83 	bl	8003a0c <HAL_I2CEx_ConfigDigitalFilter>
 8002306:	1e03      	subs	r3, r0, #0
 8002308:	d001      	beq.n	800230e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800230a:	f000 f901 	bl	8002510 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800230e:	46c0      	nop			; (mov r8, r8)
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	200000c4 	.word	0x200000c4
 8002318:	40005400 	.word	0x40005400
 800231c:	0000020b 	.word	0x0000020b

08002320 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_Init 0 */

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002324:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <MX_TIM6_Init+0x38>)
 8002326:	4a0d      	ldr	r2, [pc, #52]	; (800235c <MX_TIM6_Init+0x3c>)
 8002328:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 32000-1;
 800232a:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <MX_TIM6_Init+0x38>)
 800232c:	4a0c      	ldr	r2, [pc, #48]	; (8002360 <MX_TIM6_Init+0x40>)
 800232e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002330:	4b09      	ldr	r3, [pc, #36]	; (8002358 <MX_TIM6_Init+0x38>)
 8002332:	2200      	movs	r2, #0
 8002334:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8002336:	4b08      	ldr	r3, [pc, #32]	; (8002358 <MX_TIM6_Init+0x38>)
 8002338:	4a0a      	ldr	r2, [pc, #40]	; (8002364 <MX_TIM6_Init+0x44>)
 800233a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800233c:	4b06      	ldr	r3, [pc, #24]	; (8002358 <MX_TIM6_Init+0x38>)
 800233e:	2280      	movs	r2, #128	; 0x80
 8002340:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002342:	4b05      	ldr	r3, [pc, #20]	; (8002358 <MX_TIM6_Init+0x38>)
 8002344:	0018      	movs	r0, r3
 8002346:	f002 f8e7 	bl	8004518 <HAL_TIM_Base_Init>
 800234a:	1e03      	subs	r3, r0, #0
 800234c:	d001      	beq.n	8002352 <MX_TIM6_Init+0x32>
  {
    Error_Handler();
 800234e:	f000 f8df 	bl	8002510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002352:	46c0      	nop			; (mov r8, r8)
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	20000110 	.word	0x20000110
 800235c:	40001000 	.word	0x40001000
 8002360:	00007cff 	.word	0x00007cff
 8002364:	000003e7 	.word	0x000003e7

08002368 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800236c:	4b15      	ldr	r3, [pc, #84]	; (80023c4 <MX_USART1_UART_Init+0x5c>)
 800236e:	4a16      	ldr	r2, [pc, #88]	; (80023c8 <MX_USART1_UART_Init+0x60>)
 8002370:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002372:	4b14      	ldr	r3, [pc, #80]	; (80023c4 <MX_USART1_UART_Init+0x5c>)
 8002374:	2296      	movs	r2, #150	; 0x96
 8002376:	0192      	lsls	r2, r2, #6
 8002378:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800237a:	4b12      	ldr	r3, [pc, #72]	; (80023c4 <MX_USART1_UART_Init+0x5c>)
 800237c:	2200      	movs	r2, #0
 800237e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002380:	4b10      	ldr	r3, [pc, #64]	; (80023c4 <MX_USART1_UART_Init+0x5c>)
 8002382:	2200      	movs	r2, #0
 8002384:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002386:	4b0f      	ldr	r3, [pc, #60]	; (80023c4 <MX_USART1_UART_Init+0x5c>)
 8002388:	2200      	movs	r2, #0
 800238a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800238c:	4b0d      	ldr	r3, [pc, #52]	; (80023c4 <MX_USART1_UART_Init+0x5c>)
 800238e:	220c      	movs	r2, #12
 8002390:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002392:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <MX_USART1_UART_Init+0x5c>)
 8002394:	2200      	movs	r2, #0
 8002396:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002398:	4b0a      	ldr	r3, [pc, #40]	; (80023c4 <MX_USART1_UART_Init+0x5c>)
 800239a:	2200      	movs	r2, #0
 800239c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800239e:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <MX_USART1_UART_Init+0x5c>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023a4:	4b07      	ldr	r3, [pc, #28]	; (80023c4 <MX_USART1_UART_Init+0x5c>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80023aa:	4806      	ldr	r0, [pc, #24]	; (80023c4 <MX_USART1_UART_Init+0x5c>)
 80023ac:	2300      	movs	r3, #0
 80023ae:	2200      	movs	r2, #0
 80023b0:	2100      	movs	r1, #0
 80023b2:	f002 febb 	bl	800512c <HAL_RS485Ex_Init>
 80023b6:	1e03      	subs	r3, r0, #0
 80023b8:	d001      	beq.n	80023be <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 80023ba:	f000 f8a9 	bl	8002510 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80023be:	46c0      	nop			; (mov r8, r8)
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	20000158 	.word	0x20000158
 80023c8:	40013800 	.word	0x40013800

080023cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023cc:	b590      	push	{r4, r7, lr}
 80023ce:	b089      	sub	sp, #36	; 0x24
 80023d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d2:	240c      	movs	r4, #12
 80023d4:	193b      	adds	r3, r7, r4
 80023d6:	0018      	movs	r0, r3
 80023d8:	2314      	movs	r3, #20
 80023da:	001a      	movs	r2, r3
 80023dc:	2100      	movs	r1, #0
 80023de:	f002 ff3f 	bl	8005260 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023e2:	4b47      	ldr	r3, [pc, #284]	; (8002500 <MX_GPIO_Init+0x134>)
 80023e4:	695a      	ldr	r2, [r3, #20]
 80023e6:	4b46      	ldr	r3, [pc, #280]	; (8002500 <MX_GPIO_Init+0x134>)
 80023e8:	2180      	movs	r1, #128	; 0x80
 80023ea:	0289      	lsls	r1, r1, #10
 80023ec:	430a      	orrs	r2, r1
 80023ee:	615a      	str	r2, [r3, #20]
 80023f0:	4b43      	ldr	r3, [pc, #268]	; (8002500 <MX_GPIO_Init+0x134>)
 80023f2:	695a      	ldr	r2, [r3, #20]
 80023f4:	2380      	movs	r3, #128	; 0x80
 80023f6:	029b      	lsls	r3, r3, #10
 80023f8:	4013      	ands	r3, r2
 80023fa:	60bb      	str	r3, [r7, #8]
 80023fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023fe:	4b40      	ldr	r3, [pc, #256]	; (8002500 <MX_GPIO_Init+0x134>)
 8002400:	695a      	ldr	r2, [r3, #20]
 8002402:	4b3f      	ldr	r3, [pc, #252]	; (8002500 <MX_GPIO_Init+0x134>)
 8002404:	2180      	movs	r1, #128	; 0x80
 8002406:	02c9      	lsls	r1, r1, #11
 8002408:	430a      	orrs	r2, r1
 800240a:	615a      	str	r2, [r3, #20]
 800240c:	4b3c      	ldr	r3, [pc, #240]	; (8002500 <MX_GPIO_Init+0x134>)
 800240e:	695a      	ldr	r2, [r3, #20]
 8002410:	2380      	movs	r3, #128	; 0x80
 8002412:	02db      	lsls	r3, r3, #11
 8002414:	4013      	ands	r3, r2
 8002416:	607b      	str	r3, [r7, #4]
 8002418:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800241a:	493a      	ldr	r1, [pc, #232]	; (8002504 <MX_GPIO_Init+0x138>)
 800241c:	2390      	movs	r3, #144	; 0x90
 800241e:	05db      	lsls	r3, r3, #23
 8002420:	2200      	movs	r2, #0
 8002422:	0018      	movs	r0, r3
 8002424:	f000 fd23 	bl	8002e6e <HAL_GPIO_WritePin>
                          |E_Pin|RS_Pin|BUZZER_Pin|PA7_Pin
                          |LED2_Pin|LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PB0_Pin|GPIO_PIN_1|PB2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8002428:	4937      	ldr	r1, [pc, #220]	; (8002508 <MX_GPIO_Init+0x13c>)
 800242a:	4b38      	ldr	r3, [pc, #224]	; (800250c <MX_GPIO_Init+0x140>)
 800242c:	2200      	movs	r2, #0
 800242e:	0018      	movs	r0, r3
 8002430:	f000 fd1d 	bl	8002e6e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           E_Pin RS_Pin BUZZER_Pin PA7_Pin
                           LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002434:	193b      	adds	r3, r7, r4
 8002436:	4a33      	ldr	r2, [pc, #204]	; (8002504 <MX_GPIO_Init+0x138>)
 8002438:	601a      	str	r2, [r3, #0]
                          |E_Pin|RS_Pin|BUZZER_Pin|PA7_Pin
                          |LED2_Pin|LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800243a:	193b      	adds	r3, r7, r4
 800243c:	2201      	movs	r2, #1
 800243e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002440:	193b      	adds	r3, r7, r4
 8002442:	2200      	movs	r2, #0
 8002444:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002446:	193b      	adds	r3, r7, r4
 8002448:	2200      	movs	r2, #0
 800244a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800244c:	193a      	adds	r2, r7, r4
 800244e:	2390      	movs	r3, #144	; 0x90
 8002450:	05db      	lsls	r3, r3, #23
 8002452:	0011      	movs	r1, r2
 8002454:	0018      	movs	r0, r3
 8002456:	f000 fb7d 	bl	8002b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0_Pin PB1 PB2_Pin PB10 */
  GPIO_InitStruct.Pin = PB0_Pin|GPIO_PIN_1|PB2_Pin|GPIO_PIN_10;
 800245a:	193b      	adds	r3, r7, r4
 800245c:	4a2a      	ldr	r2, [pc, #168]	; (8002508 <MX_GPIO_Init+0x13c>)
 800245e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002460:	193b      	adds	r3, r7, r4
 8002462:	2201      	movs	r2, #1
 8002464:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002466:	193b      	adds	r3, r7, r4
 8002468:	2200      	movs	r2, #0
 800246a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246c:	193b      	adds	r3, r7, r4
 800246e:	2200      	movs	r2, #0
 8002470:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002472:	193b      	adds	r3, r7, r4
 8002474:	4a25      	ldr	r2, [pc, #148]	; (800250c <MX_GPIO_Init+0x140>)
 8002476:	0019      	movs	r1, r3
 8002478:	0010      	movs	r0, r2
 800247a:	f000 fb6b 	bl	8002b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : S_PRV_Pin S_NEXT_Pin DEPTH_Pin IR_N_Pin
                           CHANGE_N_Pin */
  GPIO_InitStruct.Pin = S_PRV_Pin|S_NEXT_Pin|DEPTH_Pin|IR_N_Pin
 800247e:	193b      	adds	r3, r7, r4
 8002480:	22f8      	movs	r2, #248	; 0xf8
 8002482:	0212      	lsls	r2, r2, #8
 8002484:	601a      	str	r2, [r3, #0]
                          |CHANGE_N_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002486:	193b      	adds	r3, r7, r4
 8002488:	2288      	movs	r2, #136	; 0x88
 800248a:	0352      	lsls	r2, r2, #13
 800248c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248e:	193b      	adds	r3, r7, r4
 8002490:	2200      	movs	r2, #0
 8002492:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002494:	193b      	adds	r3, r7, r4
 8002496:	4a1d      	ldr	r2, [pc, #116]	; (800250c <MX_GPIO_Init+0x140>)
 8002498:	0019      	movs	r1, r3
 800249a:	0010      	movs	r0, r2
 800249c:	f000 fb5a 	bl	8002b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHANGE_P_Pin */
  GPIO_InitStruct.Pin = CHANGE_P_Pin;
 80024a0:	193b      	adds	r3, r7, r4
 80024a2:	2280      	movs	r2, #128	; 0x80
 80024a4:	00d2      	lsls	r2, r2, #3
 80024a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024a8:	193b      	adds	r3, r7, r4
 80024aa:	2288      	movs	r2, #136	; 0x88
 80024ac:	0352      	lsls	r2, r2, #13
 80024ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b0:	193b      	adds	r3, r7, r4
 80024b2:	2200      	movs	r2, #0
 80024b4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CHANGE_P_GPIO_Port, &GPIO_InitStruct);
 80024b6:	193a      	adds	r2, r7, r4
 80024b8:	2390      	movs	r3, #144	; 0x90
 80024ba:	05db      	lsls	r3, r3, #23
 80024bc:	0011      	movs	r1, r2
 80024be:	0018      	movs	r0, r3
 80024c0:	f000 fb48 	bl	8002b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C_INT_Pin */
  GPIO_InitStruct.Pin = I2C_INT_Pin;
 80024c4:	0021      	movs	r1, r4
 80024c6:	187b      	adds	r3, r7, r1
 80024c8:	2280      	movs	r2, #128	; 0x80
 80024ca:	0212      	lsls	r2, r2, #8
 80024cc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024ce:	187b      	adds	r3, r7, r1
 80024d0:	2200      	movs	r2, #0
 80024d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d4:	187b      	adds	r3, r7, r1
 80024d6:	2200      	movs	r2, #0
 80024d8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(I2C_INT_GPIO_Port, &GPIO_InitStruct);
 80024da:	187a      	adds	r2, r7, r1
 80024dc:	2390      	movs	r3, #144	; 0x90
 80024de:	05db      	lsls	r3, r3, #23
 80024e0:	0011      	movs	r1, r2
 80024e2:	0018      	movs	r0, r3
 80024e4:	f000 fb36 	bl	8002b54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80024e8:	2200      	movs	r2, #0
 80024ea:	2100      	movs	r1, #0
 80024ec:	2007      	movs	r0, #7
 80024ee:	f000 faff 	bl	8002af0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80024f2:	2007      	movs	r0, #7
 80024f4:	f000 fb11 	bl	8002b1a <HAL_NVIC_EnableIRQ>

}
 80024f8:	46c0      	nop			; (mov r8, r8)
 80024fa:	46bd      	mov	sp, r7
 80024fc:	b009      	add	sp, #36	; 0x24
 80024fe:	bd90      	pop	{r4, r7, pc}
 8002500:	40021000 	.word	0x40021000
 8002504:	000009ff 	.word	0x000009ff
 8002508:	00000407 	.word	0x00000407
 800250c:	48000400 	.word	0x48000400

08002510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002514:	b672      	cpsid	i
}
 8002516:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002518:	e7fe      	b.n	8002518 <Error_Handler+0x8>
	...

0800251c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002522:	4b0f      	ldr	r3, [pc, #60]	; (8002560 <HAL_MspInit+0x44>)
 8002524:	699a      	ldr	r2, [r3, #24]
 8002526:	4b0e      	ldr	r3, [pc, #56]	; (8002560 <HAL_MspInit+0x44>)
 8002528:	2101      	movs	r1, #1
 800252a:	430a      	orrs	r2, r1
 800252c:	619a      	str	r2, [r3, #24]
 800252e:	4b0c      	ldr	r3, [pc, #48]	; (8002560 <HAL_MspInit+0x44>)
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	2201      	movs	r2, #1
 8002534:	4013      	ands	r3, r2
 8002536:	607b      	str	r3, [r7, #4]
 8002538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800253a:	4b09      	ldr	r3, [pc, #36]	; (8002560 <HAL_MspInit+0x44>)
 800253c:	69da      	ldr	r2, [r3, #28]
 800253e:	4b08      	ldr	r3, [pc, #32]	; (8002560 <HAL_MspInit+0x44>)
 8002540:	2180      	movs	r1, #128	; 0x80
 8002542:	0549      	lsls	r1, r1, #21
 8002544:	430a      	orrs	r2, r1
 8002546:	61da      	str	r2, [r3, #28]
 8002548:	4b05      	ldr	r3, [pc, #20]	; (8002560 <HAL_MspInit+0x44>)
 800254a:	69da      	ldr	r2, [r3, #28]
 800254c:	2380      	movs	r3, #128	; 0x80
 800254e:	055b      	lsls	r3, r3, #21
 8002550:	4013      	ands	r3, r2
 8002552:	603b      	str	r3, [r7, #0]
 8002554:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002556:	46c0      	nop			; (mov r8, r8)
 8002558:	46bd      	mov	sp, r7
 800255a:	b002      	add	sp, #8
 800255c:	bd80      	pop	{r7, pc}
 800255e:	46c0      	nop			; (mov r8, r8)
 8002560:	40021000 	.word	0x40021000

08002564 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002564:	b590      	push	{r4, r7, lr}
 8002566:	b08b      	sub	sp, #44	; 0x2c
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800256c:	2414      	movs	r4, #20
 800256e:	193b      	adds	r3, r7, r4
 8002570:	0018      	movs	r0, r3
 8002572:	2314      	movs	r3, #20
 8002574:	001a      	movs	r2, r3
 8002576:	2100      	movs	r1, #0
 8002578:	f002 fe72 	bl	8005260 <memset>
  if(hi2c->Instance==I2C1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a1c      	ldr	r2, [pc, #112]	; (80025f4 <HAL_I2C_MspInit+0x90>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d132      	bne.n	80025ec <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002586:	4b1c      	ldr	r3, [pc, #112]	; (80025f8 <HAL_I2C_MspInit+0x94>)
 8002588:	695a      	ldr	r2, [r3, #20]
 800258a:	4b1b      	ldr	r3, [pc, #108]	; (80025f8 <HAL_I2C_MspInit+0x94>)
 800258c:	2180      	movs	r1, #128	; 0x80
 800258e:	02c9      	lsls	r1, r1, #11
 8002590:	430a      	orrs	r2, r1
 8002592:	615a      	str	r2, [r3, #20]
 8002594:	4b18      	ldr	r3, [pc, #96]	; (80025f8 <HAL_I2C_MspInit+0x94>)
 8002596:	695a      	ldr	r2, [r3, #20]
 8002598:	2380      	movs	r3, #128	; 0x80
 800259a:	02db      	lsls	r3, r3, #11
 800259c:	4013      	ands	r3, r2
 800259e:	613b      	str	r3, [r7, #16]
 80025a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80025a2:	193b      	adds	r3, r7, r4
 80025a4:	22c0      	movs	r2, #192	; 0xc0
 80025a6:	0092      	lsls	r2, r2, #2
 80025a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025aa:	0021      	movs	r1, r4
 80025ac:	187b      	adds	r3, r7, r1
 80025ae:	2212      	movs	r2, #18
 80025b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025b2:	187b      	adds	r3, r7, r1
 80025b4:	2201      	movs	r2, #1
 80025b6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025b8:	187b      	adds	r3, r7, r1
 80025ba:	2203      	movs	r2, #3
 80025bc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80025be:	187b      	adds	r3, r7, r1
 80025c0:	2201      	movs	r2, #1
 80025c2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025c4:	187b      	adds	r3, r7, r1
 80025c6:	4a0d      	ldr	r2, [pc, #52]	; (80025fc <HAL_I2C_MspInit+0x98>)
 80025c8:	0019      	movs	r1, r3
 80025ca:	0010      	movs	r0, r2
 80025cc:	f000 fac2 	bl	8002b54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025d0:	4b09      	ldr	r3, [pc, #36]	; (80025f8 <HAL_I2C_MspInit+0x94>)
 80025d2:	69da      	ldr	r2, [r3, #28]
 80025d4:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <HAL_I2C_MspInit+0x94>)
 80025d6:	2180      	movs	r1, #128	; 0x80
 80025d8:	0389      	lsls	r1, r1, #14
 80025da:	430a      	orrs	r2, r1
 80025dc:	61da      	str	r2, [r3, #28]
 80025de:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <HAL_I2C_MspInit+0x94>)
 80025e0:	69da      	ldr	r2, [r3, #28]
 80025e2:	2380      	movs	r3, #128	; 0x80
 80025e4:	039b      	lsls	r3, r3, #14
 80025e6:	4013      	ands	r3, r2
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80025ec:	46c0      	nop			; (mov r8, r8)
 80025ee:	46bd      	mov	sp, r7
 80025f0:	b00b      	add	sp, #44	; 0x2c
 80025f2:	bd90      	pop	{r4, r7, pc}
 80025f4:	40005400 	.word	0x40005400
 80025f8:	40021000 	.word	0x40021000
 80025fc:	48000400 	.word	0x48000400

08002600 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a0d      	ldr	r2, [pc, #52]	; (8002644 <HAL_TIM_Base_MspInit+0x44>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d113      	bne.n	800263a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002612:	4b0d      	ldr	r3, [pc, #52]	; (8002648 <HAL_TIM_Base_MspInit+0x48>)
 8002614:	69da      	ldr	r2, [r3, #28]
 8002616:	4b0c      	ldr	r3, [pc, #48]	; (8002648 <HAL_TIM_Base_MspInit+0x48>)
 8002618:	2110      	movs	r1, #16
 800261a:	430a      	orrs	r2, r1
 800261c:	61da      	str	r2, [r3, #28]
 800261e:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <HAL_TIM_Base_MspInit+0x48>)
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	2210      	movs	r2, #16
 8002624:	4013      	ands	r3, r2
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 800262a:	2200      	movs	r2, #0
 800262c:	2100      	movs	r1, #0
 800262e:	2011      	movs	r0, #17
 8002630:	f000 fa5e 	bl	8002af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8002634:	2011      	movs	r0, #17
 8002636:	f000 fa70 	bl	8002b1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800263a:	46c0      	nop			; (mov r8, r8)
 800263c:	46bd      	mov	sp, r7
 800263e:	b004      	add	sp, #16
 8002640:	bd80      	pop	{r7, pc}
 8002642:	46c0      	nop			; (mov r8, r8)
 8002644:	40001000 	.word	0x40001000
 8002648:	40021000 	.word	0x40021000

0800264c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800264c:	b590      	push	{r4, r7, lr}
 800264e:	b08b      	sub	sp, #44	; 0x2c
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002654:	2414      	movs	r4, #20
 8002656:	193b      	adds	r3, r7, r4
 8002658:	0018      	movs	r0, r3
 800265a:	2314      	movs	r3, #20
 800265c:	001a      	movs	r2, r3
 800265e:	2100      	movs	r1, #0
 8002660:	f002 fdfe 	bl	8005260 <memset>
  if(huart->Instance==USART1)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a2e      	ldr	r2, [pc, #184]	; (8002724 <HAL_UART_MspInit+0xd8>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d156      	bne.n	800271c <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800266e:	4b2e      	ldr	r3, [pc, #184]	; (8002728 <HAL_UART_MspInit+0xdc>)
 8002670:	699a      	ldr	r2, [r3, #24]
 8002672:	4b2d      	ldr	r3, [pc, #180]	; (8002728 <HAL_UART_MspInit+0xdc>)
 8002674:	2180      	movs	r1, #128	; 0x80
 8002676:	01c9      	lsls	r1, r1, #7
 8002678:	430a      	orrs	r2, r1
 800267a:	619a      	str	r2, [r3, #24]
 800267c:	4b2a      	ldr	r3, [pc, #168]	; (8002728 <HAL_UART_MspInit+0xdc>)
 800267e:	699a      	ldr	r2, [r3, #24]
 8002680:	2380      	movs	r3, #128	; 0x80
 8002682:	01db      	lsls	r3, r3, #7
 8002684:	4013      	ands	r3, r2
 8002686:	613b      	str	r3, [r7, #16]
 8002688:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800268a:	4b27      	ldr	r3, [pc, #156]	; (8002728 <HAL_UART_MspInit+0xdc>)
 800268c:	695a      	ldr	r2, [r3, #20]
 800268e:	4b26      	ldr	r3, [pc, #152]	; (8002728 <HAL_UART_MspInit+0xdc>)
 8002690:	2180      	movs	r1, #128	; 0x80
 8002692:	0289      	lsls	r1, r1, #10
 8002694:	430a      	orrs	r2, r1
 8002696:	615a      	str	r2, [r3, #20]
 8002698:	4b23      	ldr	r3, [pc, #140]	; (8002728 <HAL_UART_MspInit+0xdc>)
 800269a:	695a      	ldr	r2, [r3, #20]
 800269c:	2380      	movs	r3, #128	; 0x80
 800269e:	029b      	lsls	r3, r3, #10
 80026a0:	4013      	ands	r3, r2
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026a6:	4b20      	ldr	r3, [pc, #128]	; (8002728 <HAL_UART_MspInit+0xdc>)
 80026a8:	695a      	ldr	r2, [r3, #20]
 80026aa:	4b1f      	ldr	r3, [pc, #124]	; (8002728 <HAL_UART_MspInit+0xdc>)
 80026ac:	2180      	movs	r1, #128	; 0x80
 80026ae:	02c9      	lsls	r1, r1, #11
 80026b0:	430a      	orrs	r2, r1
 80026b2:	615a      	str	r2, [r3, #20]
 80026b4:	4b1c      	ldr	r3, [pc, #112]	; (8002728 <HAL_UART_MspInit+0xdc>)
 80026b6:	695a      	ldr	r2, [r3, #20]
 80026b8:	2380      	movs	r3, #128	; 0x80
 80026ba:	02db      	lsls	r3, r3, #11
 80026bc:	4013      	ands	r3, r2
 80026be:	60bb      	str	r3, [r7, #8]
 80026c0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA12     ------> USART1_DE
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80026c2:	193b      	adds	r3, r7, r4
 80026c4:	2280      	movs	r2, #128	; 0x80
 80026c6:	0152      	lsls	r2, r2, #5
 80026c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ca:	193b      	adds	r3, r7, r4
 80026cc:	2202      	movs	r2, #2
 80026ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d0:	193b      	adds	r3, r7, r4
 80026d2:	2200      	movs	r2, #0
 80026d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026d6:	193b      	adds	r3, r7, r4
 80026d8:	2203      	movs	r2, #3
 80026da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80026dc:	193b      	adds	r3, r7, r4
 80026de:	2201      	movs	r2, #1
 80026e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e2:	193a      	adds	r2, r7, r4
 80026e4:	2390      	movs	r3, #144	; 0x90
 80026e6:	05db      	lsls	r3, r3, #23
 80026e8:	0011      	movs	r1, r2
 80026ea:	0018      	movs	r0, r3
 80026ec:	f000 fa32 	bl	8002b54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80026f0:	0021      	movs	r1, r4
 80026f2:	187b      	adds	r3, r7, r1
 80026f4:	22c0      	movs	r2, #192	; 0xc0
 80026f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f8:	187b      	adds	r3, r7, r1
 80026fa:	2202      	movs	r2, #2
 80026fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fe:	187b      	adds	r3, r7, r1
 8002700:	2200      	movs	r2, #0
 8002702:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002704:	187b      	adds	r3, r7, r1
 8002706:	2203      	movs	r2, #3
 8002708:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 800270a:	187b      	adds	r3, r7, r1
 800270c:	2200      	movs	r2, #0
 800270e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002710:	187b      	adds	r3, r7, r1
 8002712:	4a06      	ldr	r2, [pc, #24]	; (800272c <HAL_UART_MspInit+0xe0>)
 8002714:	0019      	movs	r1, r3
 8002716:	0010      	movs	r0, r2
 8002718:	f000 fa1c 	bl	8002b54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800271c:	46c0      	nop			; (mov r8, r8)
 800271e:	46bd      	mov	sp, r7
 8002720:	b00b      	add	sp, #44	; 0x2c
 8002722:	bd90      	pop	{r4, r7, pc}
 8002724:	40013800 	.word	0x40013800
 8002728:	40021000 	.word	0x40021000
 800272c:	48000400 	.word	0x48000400

08002730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002734:	e7fe      	b.n	8002734 <NMI_Handler+0x4>

08002736 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800273a:	e7fe      	b.n	800273a <HardFault_Handler+0x4>

0800273c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002740:	46c0      	nop			; (mov r8, r8)
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800274a:	46c0      	nop			; (mov r8, r8)
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002754:	f000 f8e0 	bl	8002918 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002758:	46c0      	nop			; (mov r8, r8)
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CHANGE_P_Pin);
 8002762:	2380      	movs	r3, #128	; 0x80
 8002764:	00db      	lsls	r3, r3, #3
 8002766:	0018      	movs	r0, r3
 8002768:	f000 fb9e 	bl	8002ea8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S_PRV_Pin);
 800276c:	2380      	movs	r3, #128	; 0x80
 800276e:	011b      	lsls	r3, r3, #4
 8002770:	0018      	movs	r0, r3
 8002772:	f000 fb99 	bl	8002ea8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S_NEXT_Pin);
 8002776:	2380      	movs	r3, #128	; 0x80
 8002778:	015b      	lsls	r3, r3, #5
 800277a:	0018      	movs	r0, r3
 800277c:	f000 fb94 	bl	8002ea8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DEPTH_Pin);
 8002780:	2380      	movs	r3, #128	; 0x80
 8002782:	019b      	lsls	r3, r3, #6
 8002784:	0018      	movs	r0, r3
 8002786:	f000 fb8f 	bl	8002ea8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IR_N_Pin);
 800278a:	2380      	movs	r3, #128	; 0x80
 800278c:	01db      	lsls	r3, r3, #7
 800278e:	0018      	movs	r0, r3
 8002790:	f000 fb8a 	bl	8002ea8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CHANGE_N_Pin);
 8002794:	2380      	movs	r3, #128	; 0x80
 8002796:	021b      	lsls	r3, r3, #8
 8002798:	0018      	movs	r0, r3
 800279a:	f000 fb85 	bl	8002ea8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800279e:	46c0      	nop			; (mov r8, r8)
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80027a8:	4b03      	ldr	r3, [pc, #12]	; (80027b8 <TIM6_IRQHandler+0x14>)
 80027aa:	0018      	movs	r0, r3
 80027ac:	f001 ff50 	bl	8004650 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80027b0:	46c0      	nop			; (mov r8, r8)
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	46c0      	nop			; (mov r8, r8)
 80027b8:	20000110 	.word	0x20000110

080027bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027c4:	4a14      	ldr	r2, [pc, #80]	; (8002818 <_sbrk+0x5c>)
 80027c6:	4b15      	ldr	r3, [pc, #84]	; (800281c <_sbrk+0x60>)
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027d0:	4b13      	ldr	r3, [pc, #76]	; (8002820 <_sbrk+0x64>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d102      	bne.n	80027de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027d8:	4b11      	ldr	r3, [pc, #68]	; (8002820 <_sbrk+0x64>)
 80027da:	4a12      	ldr	r2, [pc, #72]	; (8002824 <_sbrk+0x68>)
 80027dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027de:	4b10      	ldr	r3, [pc, #64]	; (8002820 <_sbrk+0x64>)
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	18d3      	adds	r3, r2, r3
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d207      	bcs.n	80027fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027ec:	f002 fd0e 	bl	800520c <__errno>
 80027f0:	0003      	movs	r3, r0
 80027f2:	220c      	movs	r2, #12
 80027f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027f6:	2301      	movs	r3, #1
 80027f8:	425b      	negs	r3, r3
 80027fa:	e009      	b.n	8002810 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027fc:	4b08      	ldr	r3, [pc, #32]	; (8002820 <_sbrk+0x64>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002802:	4b07      	ldr	r3, [pc, #28]	; (8002820 <_sbrk+0x64>)
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	18d2      	adds	r2, r2, r3
 800280a:	4b05      	ldr	r3, [pc, #20]	; (8002820 <_sbrk+0x64>)
 800280c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800280e:	68fb      	ldr	r3, [r7, #12]
}
 8002810:	0018      	movs	r0, r3
 8002812:	46bd      	mov	sp, r7
 8002814:	b006      	add	sp, #24
 8002816:	bd80      	pop	{r7, pc}
 8002818:	20002000 	.word	0x20002000
 800281c:	00000400 	.word	0x00000400
 8002820:	200001e0 	.word	0x200001e0
 8002824:	200001f8 	.word	0x200001f8

08002828 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800282c:	46c0      	nop			; (mov r8, r8)
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
	...

08002834 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002834:	480d      	ldr	r0, [pc, #52]	; (800286c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002836:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002838:	480d      	ldr	r0, [pc, #52]	; (8002870 <LoopForever+0x6>)
  ldr r1, =_edata
 800283a:	490e      	ldr	r1, [pc, #56]	; (8002874 <LoopForever+0xa>)
  ldr r2, =_sidata
 800283c:	4a0e      	ldr	r2, [pc, #56]	; (8002878 <LoopForever+0xe>)
  movs r3, #0
 800283e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002840:	e002      	b.n	8002848 <LoopCopyDataInit>

08002842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002846:	3304      	adds	r3, #4

08002848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800284a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800284c:	d3f9      	bcc.n	8002842 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800284e:	4a0b      	ldr	r2, [pc, #44]	; (800287c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002850:	4c0b      	ldr	r4, [pc, #44]	; (8002880 <LoopForever+0x16>)
  movs r3, #0
 8002852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002854:	e001      	b.n	800285a <LoopFillZerobss>

08002856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002858:	3204      	adds	r2, #4

0800285a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800285a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800285c:	d3fb      	bcc.n	8002856 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800285e:	f7ff ffe3 	bl	8002828 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002862:	f002 fcd9 	bl	8005218 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002866:	f7ff fa7b 	bl	8001d60 <main>

0800286a <LoopForever>:

LoopForever:
    b LoopForever
 800286a:	e7fe      	b.n	800286a <LoopForever>
  ldr   r0, =_estack
 800286c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002874:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002878:	08005e00 	.word	0x08005e00
  ldr r2, =_sbss
 800287c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8002880:	200001f8 	.word	0x200001f8

08002884 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002884:	e7fe      	b.n	8002884 <ADC1_IRQHandler>
	...

08002888 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800288c:	4b07      	ldr	r3, [pc, #28]	; (80028ac <HAL_Init+0x24>)
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	4b06      	ldr	r3, [pc, #24]	; (80028ac <HAL_Init+0x24>)
 8002892:	2110      	movs	r1, #16
 8002894:	430a      	orrs	r2, r1
 8002896:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002898:	2003      	movs	r0, #3
 800289a:	f000 f809 	bl	80028b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800289e:	f7ff fe3d 	bl	800251c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	0018      	movs	r0, r3
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	46c0      	nop			; (mov r8, r8)
 80028ac:	40022000 	.word	0x40022000

080028b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028b0:	b590      	push	{r4, r7, lr}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028b8:	4b14      	ldr	r3, [pc, #80]	; (800290c <HAL_InitTick+0x5c>)
 80028ba:	681c      	ldr	r4, [r3, #0]
 80028bc:	4b14      	ldr	r3, [pc, #80]	; (8002910 <HAL_InitTick+0x60>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	0019      	movs	r1, r3
 80028c2:	23fa      	movs	r3, #250	; 0xfa
 80028c4:	0098      	lsls	r0, r3, #2
 80028c6:	f7fd fc29 	bl	800011c <__udivsi3>
 80028ca:	0003      	movs	r3, r0
 80028cc:	0019      	movs	r1, r3
 80028ce:	0020      	movs	r0, r4
 80028d0:	f7fd fc24 	bl	800011c <__udivsi3>
 80028d4:	0003      	movs	r3, r0
 80028d6:	0018      	movs	r0, r3
 80028d8:	f000 f92f 	bl	8002b3a <HAL_SYSTICK_Config>
 80028dc:	1e03      	subs	r3, r0, #0
 80028de:	d001      	beq.n	80028e4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e00f      	b.n	8002904 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b03      	cmp	r3, #3
 80028e8:	d80b      	bhi.n	8002902 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	2301      	movs	r3, #1
 80028ee:	425b      	negs	r3, r3
 80028f0:	2200      	movs	r2, #0
 80028f2:	0018      	movs	r0, r3
 80028f4:	f000 f8fc 	bl	8002af0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028f8:	4b06      	ldr	r3, [pc, #24]	; (8002914 <HAL_InitTick+0x64>)
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
 8002900:	e000      	b.n	8002904 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
}
 8002904:	0018      	movs	r0, r3
 8002906:	46bd      	mov	sp, r7
 8002908:	b003      	add	sp, #12
 800290a:	bd90      	pop	{r4, r7, pc}
 800290c:	2000000c 	.word	0x2000000c
 8002910:	20000014 	.word	0x20000014
 8002914:	20000010 	.word	0x20000010

08002918 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800291c:	4b05      	ldr	r3, [pc, #20]	; (8002934 <HAL_IncTick+0x1c>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	001a      	movs	r2, r3
 8002922:	4b05      	ldr	r3, [pc, #20]	; (8002938 <HAL_IncTick+0x20>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	18d2      	adds	r2, r2, r3
 8002928:	4b03      	ldr	r3, [pc, #12]	; (8002938 <HAL_IncTick+0x20>)
 800292a:	601a      	str	r2, [r3, #0]
}
 800292c:	46c0      	nop			; (mov r8, r8)
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	46c0      	nop			; (mov r8, r8)
 8002934:	20000014 	.word	0x20000014
 8002938:	200001e4 	.word	0x200001e4

0800293c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  return uwTick;
 8002940:	4b02      	ldr	r3, [pc, #8]	; (800294c <HAL_GetTick+0x10>)
 8002942:	681b      	ldr	r3, [r3, #0]
}
 8002944:	0018      	movs	r0, r3
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	46c0      	nop			; (mov r8, r8)
 800294c:	200001e4 	.word	0x200001e4

08002950 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002958:	f7ff fff0 	bl	800293c <HAL_GetTick>
 800295c:	0003      	movs	r3, r0
 800295e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	3301      	adds	r3, #1
 8002968:	d005      	beq.n	8002976 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800296a:	4b0a      	ldr	r3, [pc, #40]	; (8002994 <HAL_Delay+0x44>)
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	001a      	movs	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	189b      	adds	r3, r3, r2
 8002974:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002976:	46c0      	nop			; (mov r8, r8)
 8002978:	f7ff ffe0 	bl	800293c <HAL_GetTick>
 800297c:	0002      	movs	r2, r0
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	429a      	cmp	r2, r3
 8002986:	d8f7      	bhi.n	8002978 <HAL_Delay+0x28>
  {
  }
}
 8002988:	46c0      	nop			; (mov r8, r8)
 800298a:	46c0      	nop			; (mov r8, r8)
 800298c:	46bd      	mov	sp, r7
 800298e:	b004      	add	sp, #16
 8002990:	bd80      	pop	{r7, pc}
 8002992:	46c0      	nop			; (mov r8, r8)
 8002994:	20000014 	.word	0x20000014

08002998 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	0002      	movs	r2, r0
 80029a0:	1dfb      	adds	r3, r7, #7
 80029a2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80029a4:	1dfb      	adds	r3, r7, #7
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	2b7f      	cmp	r3, #127	; 0x7f
 80029aa:	d809      	bhi.n	80029c0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ac:	1dfb      	adds	r3, r7, #7
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	001a      	movs	r2, r3
 80029b2:	231f      	movs	r3, #31
 80029b4:	401a      	ands	r2, r3
 80029b6:	4b04      	ldr	r3, [pc, #16]	; (80029c8 <__NVIC_EnableIRQ+0x30>)
 80029b8:	2101      	movs	r1, #1
 80029ba:	4091      	lsls	r1, r2
 80029bc:	000a      	movs	r2, r1
 80029be:	601a      	str	r2, [r3, #0]
  }
}
 80029c0:	46c0      	nop			; (mov r8, r8)
 80029c2:	46bd      	mov	sp, r7
 80029c4:	b002      	add	sp, #8
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	e000e100 	.word	0xe000e100

080029cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029cc:	b590      	push	{r4, r7, lr}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	0002      	movs	r2, r0
 80029d4:	6039      	str	r1, [r7, #0]
 80029d6:	1dfb      	adds	r3, r7, #7
 80029d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80029da:	1dfb      	adds	r3, r7, #7
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2b7f      	cmp	r3, #127	; 0x7f
 80029e0:	d828      	bhi.n	8002a34 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029e2:	4a2f      	ldr	r2, [pc, #188]	; (8002aa0 <__NVIC_SetPriority+0xd4>)
 80029e4:	1dfb      	adds	r3, r7, #7
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	b25b      	sxtb	r3, r3
 80029ea:	089b      	lsrs	r3, r3, #2
 80029ec:	33c0      	adds	r3, #192	; 0xc0
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	589b      	ldr	r3, [r3, r2]
 80029f2:	1dfa      	adds	r2, r7, #7
 80029f4:	7812      	ldrb	r2, [r2, #0]
 80029f6:	0011      	movs	r1, r2
 80029f8:	2203      	movs	r2, #3
 80029fa:	400a      	ands	r2, r1
 80029fc:	00d2      	lsls	r2, r2, #3
 80029fe:	21ff      	movs	r1, #255	; 0xff
 8002a00:	4091      	lsls	r1, r2
 8002a02:	000a      	movs	r2, r1
 8002a04:	43d2      	mvns	r2, r2
 8002a06:	401a      	ands	r2, r3
 8002a08:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	019b      	lsls	r3, r3, #6
 8002a0e:	22ff      	movs	r2, #255	; 0xff
 8002a10:	401a      	ands	r2, r3
 8002a12:	1dfb      	adds	r3, r7, #7
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	0018      	movs	r0, r3
 8002a18:	2303      	movs	r3, #3
 8002a1a:	4003      	ands	r3, r0
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a20:	481f      	ldr	r0, [pc, #124]	; (8002aa0 <__NVIC_SetPriority+0xd4>)
 8002a22:	1dfb      	adds	r3, r7, #7
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	b25b      	sxtb	r3, r3
 8002a28:	089b      	lsrs	r3, r3, #2
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	33c0      	adds	r3, #192	; 0xc0
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002a32:	e031      	b.n	8002a98 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a34:	4a1b      	ldr	r2, [pc, #108]	; (8002aa4 <__NVIC_SetPriority+0xd8>)
 8002a36:	1dfb      	adds	r3, r7, #7
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	0019      	movs	r1, r3
 8002a3c:	230f      	movs	r3, #15
 8002a3e:	400b      	ands	r3, r1
 8002a40:	3b08      	subs	r3, #8
 8002a42:	089b      	lsrs	r3, r3, #2
 8002a44:	3306      	adds	r3, #6
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	18d3      	adds	r3, r2, r3
 8002a4a:	3304      	adds	r3, #4
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	1dfa      	adds	r2, r7, #7
 8002a50:	7812      	ldrb	r2, [r2, #0]
 8002a52:	0011      	movs	r1, r2
 8002a54:	2203      	movs	r2, #3
 8002a56:	400a      	ands	r2, r1
 8002a58:	00d2      	lsls	r2, r2, #3
 8002a5a:	21ff      	movs	r1, #255	; 0xff
 8002a5c:	4091      	lsls	r1, r2
 8002a5e:	000a      	movs	r2, r1
 8002a60:	43d2      	mvns	r2, r2
 8002a62:	401a      	ands	r2, r3
 8002a64:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	019b      	lsls	r3, r3, #6
 8002a6a:	22ff      	movs	r2, #255	; 0xff
 8002a6c:	401a      	ands	r2, r3
 8002a6e:	1dfb      	adds	r3, r7, #7
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	0018      	movs	r0, r3
 8002a74:	2303      	movs	r3, #3
 8002a76:	4003      	ands	r3, r0
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a7c:	4809      	ldr	r0, [pc, #36]	; (8002aa4 <__NVIC_SetPriority+0xd8>)
 8002a7e:	1dfb      	adds	r3, r7, #7
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	001c      	movs	r4, r3
 8002a84:	230f      	movs	r3, #15
 8002a86:	4023      	ands	r3, r4
 8002a88:	3b08      	subs	r3, #8
 8002a8a:	089b      	lsrs	r3, r3, #2
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	3306      	adds	r3, #6
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	18c3      	adds	r3, r0, r3
 8002a94:	3304      	adds	r3, #4
 8002a96:	601a      	str	r2, [r3, #0]
}
 8002a98:	46c0      	nop			; (mov r8, r8)
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	b003      	add	sp, #12
 8002a9e:	bd90      	pop	{r4, r7, pc}
 8002aa0:	e000e100 	.word	0xe000e100
 8002aa4:	e000ed00 	.word	0xe000ed00

08002aa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	1e5a      	subs	r2, r3, #1
 8002ab4:	2380      	movs	r3, #128	; 0x80
 8002ab6:	045b      	lsls	r3, r3, #17
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d301      	bcc.n	8002ac0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002abc:	2301      	movs	r3, #1
 8002abe:	e010      	b.n	8002ae2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ac0:	4b0a      	ldr	r3, [pc, #40]	; (8002aec <SysTick_Config+0x44>)
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	3a01      	subs	r2, #1
 8002ac6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ac8:	2301      	movs	r3, #1
 8002aca:	425b      	negs	r3, r3
 8002acc:	2103      	movs	r1, #3
 8002ace:	0018      	movs	r0, r3
 8002ad0:	f7ff ff7c 	bl	80029cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ad4:	4b05      	ldr	r3, [pc, #20]	; (8002aec <SysTick_Config+0x44>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ada:	4b04      	ldr	r3, [pc, #16]	; (8002aec <SysTick_Config+0x44>)
 8002adc:	2207      	movs	r2, #7
 8002ade:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	0018      	movs	r0, r3
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	b002      	add	sp, #8
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	46c0      	nop			; (mov r8, r8)
 8002aec:	e000e010 	.word	0xe000e010

08002af0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60b9      	str	r1, [r7, #8]
 8002af8:	607a      	str	r2, [r7, #4]
 8002afa:	210f      	movs	r1, #15
 8002afc:	187b      	adds	r3, r7, r1
 8002afe:	1c02      	adds	r2, r0, #0
 8002b00:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002b02:	68ba      	ldr	r2, [r7, #8]
 8002b04:	187b      	adds	r3, r7, r1
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	b25b      	sxtb	r3, r3
 8002b0a:	0011      	movs	r1, r2
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	f7ff ff5d 	bl	80029cc <__NVIC_SetPriority>
}
 8002b12:	46c0      	nop			; (mov r8, r8)
 8002b14:	46bd      	mov	sp, r7
 8002b16:	b004      	add	sp, #16
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b082      	sub	sp, #8
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	0002      	movs	r2, r0
 8002b22:	1dfb      	adds	r3, r7, #7
 8002b24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b26:	1dfb      	adds	r3, r7, #7
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	b25b      	sxtb	r3, r3
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f7ff ff33 	bl	8002998 <__NVIC_EnableIRQ>
}
 8002b32:	46c0      	nop			; (mov r8, r8)
 8002b34:	46bd      	mov	sp, r7
 8002b36:	b002      	add	sp, #8
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b082      	sub	sp, #8
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	0018      	movs	r0, r3
 8002b46:	f7ff ffaf 	bl	8002aa8 <SysTick_Config>
 8002b4a:	0003      	movs	r3, r0
}
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	b002      	add	sp, #8
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b62:	e14f      	b.n	8002e04 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2101      	movs	r1, #1
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	4091      	lsls	r1, r2
 8002b6e:	000a      	movs	r2, r1
 8002b70:	4013      	ands	r3, r2
 8002b72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d100      	bne.n	8002b7c <HAL_GPIO_Init+0x28>
 8002b7a:	e140      	b.n	8002dfe <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	2203      	movs	r2, #3
 8002b82:	4013      	ands	r3, r2
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d005      	beq.n	8002b94 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	2203      	movs	r2, #3
 8002b8e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d130      	bne.n	8002bf6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	2203      	movs	r2, #3
 8002ba0:	409a      	lsls	r2, r3
 8002ba2:	0013      	movs	r3, r2
 8002ba4:	43da      	mvns	r2, r3
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	68da      	ldr	r2, [r3, #12]
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	409a      	lsls	r2, r3
 8002bb6:	0013      	movs	r3, r2
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bca:	2201      	movs	r2, #1
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	409a      	lsls	r2, r3
 8002bd0:	0013      	movs	r3, r2
 8002bd2:	43da      	mvns	r2, r3
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	091b      	lsrs	r3, r3, #4
 8002be0:	2201      	movs	r2, #1
 8002be2:	401a      	ands	r2, r3
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	409a      	lsls	r2, r3
 8002be8:	0013      	movs	r3, r2
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2203      	movs	r2, #3
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	2b03      	cmp	r3, #3
 8002c00:	d017      	beq.n	8002c32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	2203      	movs	r2, #3
 8002c0e:	409a      	lsls	r2, r3
 8002c10:	0013      	movs	r3, r2
 8002c12:	43da      	mvns	r2, r3
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	4013      	ands	r3, r2
 8002c18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	689a      	ldr	r2, [r3, #8]
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	409a      	lsls	r2, r3
 8002c24:	0013      	movs	r3, r2
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2203      	movs	r2, #3
 8002c38:	4013      	ands	r3, r2
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d123      	bne.n	8002c86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	08da      	lsrs	r2, r3, #3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	3208      	adds	r2, #8
 8002c46:	0092      	lsls	r2, r2, #2
 8002c48:	58d3      	ldr	r3, [r2, r3]
 8002c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	2207      	movs	r2, #7
 8002c50:	4013      	ands	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	220f      	movs	r2, #15
 8002c56:	409a      	lsls	r2, r3
 8002c58:	0013      	movs	r3, r2
 8002c5a:	43da      	mvns	r2, r3
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	691a      	ldr	r2, [r3, #16]
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	2107      	movs	r1, #7
 8002c6a:	400b      	ands	r3, r1
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	409a      	lsls	r2, r3
 8002c70:	0013      	movs	r3, r2
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	08da      	lsrs	r2, r3, #3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	3208      	adds	r2, #8
 8002c80:	0092      	lsls	r2, r2, #2
 8002c82:	6939      	ldr	r1, [r7, #16]
 8002c84:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	2203      	movs	r2, #3
 8002c92:	409a      	lsls	r2, r3
 8002c94:	0013      	movs	r3, r2
 8002c96:	43da      	mvns	r2, r3
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	2203      	movs	r2, #3
 8002ca4:	401a      	ands	r2, r3
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	409a      	lsls	r2, r3
 8002cac:	0013      	movs	r3, r2
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	23c0      	movs	r3, #192	; 0xc0
 8002cc0:	029b      	lsls	r3, r3, #10
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	d100      	bne.n	8002cc8 <HAL_GPIO_Init+0x174>
 8002cc6:	e09a      	b.n	8002dfe <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cc8:	4b54      	ldr	r3, [pc, #336]	; (8002e1c <HAL_GPIO_Init+0x2c8>)
 8002cca:	699a      	ldr	r2, [r3, #24]
 8002ccc:	4b53      	ldr	r3, [pc, #332]	; (8002e1c <HAL_GPIO_Init+0x2c8>)
 8002cce:	2101      	movs	r1, #1
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	619a      	str	r2, [r3, #24]
 8002cd4:	4b51      	ldr	r3, [pc, #324]	; (8002e1c <HAL_GPIO_Init+0x2c8>)
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	4013      	ands	r3, r2
 8002cdc:	60bb      	str	r3, [r7, #8]
 8002cde:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ce0:	4a4f      	ldr	r2, [pc, #316]	; (8002e20 <HAL_GPIO_Init+0x2cc>)
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	089b      	lsrs	r3, r3, #2
 8002ce6:	3302      	adds	r3, #2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	589b      	ldr	r3, [r3, r2]
 8002cec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	2203      	movs	r2, #3
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	220f      	movs	r2, #15
 8002cf8:	409a      	lsls	r2, r3
 8002cfa:	0013      	movs	r3, r2
 8002cfc:	43da      	mvns	r2, r3
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	4013      	ands	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	2390      	movs	r3, #144	; 0x90
 8002d08:	05db      	lsls	r3, r3, #23
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d013      	beq.n	8002d36 <HAL_GPIO_Init+0x1e2>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a44      	ldr	r2, [pc, #272]	; (8002e24 <HAL_GPIO_Init+0x2d0>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d00d      	beq.n	8002d32 <HAL_GPIO_Init+0x1de>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a43      	ldr	r2, [pc, #268]	; (8002e28 <HAL_GPIO_Init+0x2d4>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d007      	beq.n	8002d2e <HAL_GPIO_Init+0x1da>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a42      	ldr	r2, [pc, #264]	; (8002e2c <HAL_GPIO_Init+0x2d8>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d101      	bne.n	8002d2a <HAL_GPIO_Init+0x1d6>
 8002d26:	2303      	movs	r3, #3
 8002d28:	e006      	b.n	8002d38 <HAL_GPIO_Init+0x1e4>
 8002d2a:	2305      	movs	r3, #5
 8002d2c:	e004      	b.n	8002d38 <HAL_GPIO_Init+0x1e4>
 8002d2e:	2302      	movs	r3, #2
 8002d30:	e002      	b.n	8002d38 <HAL_GPIO_Init+0x1e4>
 8002d32:	2301      	movs	r3, #1
 8002d34:	e000      	b.n	8002d38 <HAL_GPIO_Init+0x1e4>
 8002d36:	2300      	movs	r3, #0
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	2103      	movs	r1, #3
 8002d3c:	400a      	ands	r2, r1
 8002d3e:	0092      	lsls	r2, r2, #2
 8002d40:	4093      	lsls	r3, r2
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d48:	4935      	ldr	r1, [pc, #212]	; (8002e20 <HAL_GPIO_Init+0x2cc>)
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	089b      	lsrs	r3, r3, #2
 8002d4e:	3302      	adds	r3, #2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d56:	4b36      	ldr	r3, [pc, #216]	; (8002e30 <HAL_GPIO_Init+0x2dc>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	43da      	mvns	r2, r3
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	4013      	ands	r3, r2
 8002d64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	2380      	movs	r3, #128	; 0x80
 8002d6c:	025b      	lsls	r3, r3, #9
 8002d6e:	4013      	ands	r3, r2
 8002d70:	d003      	beq.n	8002d7a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002d7a:	4b2d      	ldr	r3, [pc, #180]	; (8002e30 <HAL_GPIO_Init+0x2dc>)
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002d80:	4b2b      	ldr	r3, [pc, #172]	; (8002e30 <HAL_GPIO_Init+0x2dc>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	43da      	mvns	r2, r3
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685a      	ldr	r2, [r3, #4]
 8002d94:	2380      	movs	r3, #128	; 0x80
 8002d96:	029b      	lsls	r3, r3, #10
 8002d98:	4013      	ands	r3, r2
 8002d9a:	d003      	beq.n	8002da4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002da4:	4b22      	ldr	r3, [pc, #136]	; (8002e30 <HAL_GPIO_Init+0x2dc>)
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002daa:	4b21      	ldr	r3, [pc, #132]	; (8002e30 <HAL_GPIO_Init+0x2dc>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	43da      	mvns	r2, r3
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	4013      	ands	r3, r2
 8002db8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	2380      	movs	r3, #128	; 0x80
 8002dc0:	035b      	lsls	r3, r3, #13
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	d003      	beq.n	8002dce <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002dce:	4b18      	ldr	r3, [pc, #96]	; (8002e30 <HAL_GPIO_Init+0x2dc>)
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002dd4:	4b16      	ldr	r3, [pc, #88]	; (8002e30 <HAL_GPIO_Init+0x2dc>)
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	43da      	mvns	r2, r3
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	4013      	ands	r3, r2
 8002de2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685a      	ldr	r2, [r3, #4]
 8002de8:	2380      	movs	r3, #128	; 0x80
 8002dea:	039b      	lsls	r3, r3, #14
 8002dec:	4013      	ands	r3, r2
 8002dee:	d003      	beq.n	8002df8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002df8:	4b0d      	ldr	r3, [pc, #52]	; (8002e30 <HAL_GPIO_Init+0x2dc>)
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	3301      	adds	r3, #1
 8002e02:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	40da      	lsrs	r2, r3
 8002e0c:	1e13      	subs	r3, r2, #0
 8002e0e:	d000      	beq.n	8002e12 <HAL_GPIO_Init+0x2be>
 8002e10:	e6a8      	b.n	8002b64 <HAL_GPIO_Init+0x10>
  } 
}
 8002e12:	46c0      	nop			; (mov r8, r8)
 8002e14:	46c0      	nop			; (mov r8, r8)
 8002e16:	46bd      	mov	sp, r7
 8002e18:	b006      	add	sp, #24
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	40010000 	.word	0x40010000
 8002e24:	48000400 	.word	0x48000400
 8002e28:	48000800 	.word	0x48000800
 8002e2c:	48000c00 	.word	0x48000c00
 8002e30:	40010400 	.word	0x40010400

08002e34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	000a      	movs	r2, r1
 8002e3e:	1cbb      	adds	r3, r7, #2
 8002e40:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	1cba      	adds	r2, r7, #2
 8002e48:	8812      	ldrh	r2, [r2, #0]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	d004      	beq.n	8002e58 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002e4e:	230f      	movs	r3, #15
 8002e50:	18fb      	adds	r3, r7, r3
 8002e52:	2201      	movs	r2, #1
 8002e54:	701a      	strb	r2, [r3, #0]
 8002e56:	e003      	b.n	8002e60 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e58:	230f      	movs	r3, #15
 8002e5a:	18fb      	adds	r3, r7, r3
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002e60:	230f      	movs	r3, #15
 8002e62:	18fb      	adds	r3, r7, r3
 8002e64:	781b      	ldrb	r3, [r3, #0]
  }
 8002e66:	0018      	movs	r0, r3
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	b004      	add	sp, #16
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b082      	sub	sp, #8
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
 8002e76:	0008      	movs	r0, r1
 8002e78:	0011      	movs	r1, r2
 8002e7a:	1cbb      	adds	r3, r7, #2
 8002e7c:	1c02      	adds	r2, r0, #0
 8002e7e:	801a      	strh	r2, [r3, #0]
 8002e80:	1c7b      	adds	r3, r7, #1
 8002e82:	1c0a      	adds	r2, r1, #0
 8002e84:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e86:	1c7b      	adds	r3, r7, #1
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d004      	beq.n	8002e98 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e8e:	1cbb      	adds	r3, r7, #2
 8002e90:	881a      	ldrh	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e96:	e003      	b.n	8002ea0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e98:	1cbb      	adds	r3, r7, #2
 8002e9a:	881a      	ldrh	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ea0:	46c0      	nop			; (mov r8, r8)
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	b002      	add	sp, #8
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	0002      	movs	r2, r0
 8002eb0:	1dbb      	adds	r3, r7, #6
 8002eb2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002eb4:	4b09      	ldr	r3, [pc, #36]	; (8002edc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	1dba      	adds	r2, r7, #6
 8002eba:	8812      	ldrh	r2, [r2, #0]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	d008      	beq.n	8002ed2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ec0:	4b06      	ldr	r3, [pc, #24]	; (8002edc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002ec2:	1dba      	adds	r2, r7, #6
 8002ec4:	8812      	ldrh	r2, [r2, #0]
 8002ec6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ec8:	1dbb      	adds	r3, r7, #6
 8002eca:	881b      	ldrh	r3, [r3, #0]
 8002ecc:	0018      	movs	r0, r3
 8002ece:	f7fe feb9 	bl	8001c44 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ed2:	46c0      	nop			; (mov r8, r8)
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	b002      	add	sp, #8
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	40010400 	.word	0x40010400

08002ee0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e082      	b.n	8002ff8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2241      	movs	r2, #65	; 0x41
 8002ef6:	5c9b      	ldrb	r3, [r3, r2]
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d107      	bne.n	8002f0e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2240      	movs	r2, #64	; 0x40
 8002f02:	2100      	movs	r1, #0
 8002f04:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	0018      	movs	r0, r3
 8002f0a:	f7ff fb2b 	bl	8002564 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2241      	movs	r2, #65	; 0x41
 8002f12:	2124      	movs	r1, #36	; 0x24
 8002f14:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2101      	movs	r1, #1
 8002f22:	438a      	bics	r2, r1
 8002f24:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685a      	ldr	r2, [r3, #4]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4934      	ldr	r1, [pc, #208]	; (8003000 <HAL_I2C_Init+0x120>)
 8002f30:	400a      	ands	r2, r1
 8002f32:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689a      	ldr	r2, [r3, #8]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4931      	ldr	r1, [pc, #196]	; (8003004 <HAL_I2C_Init+0x124>)
 8002f40:	400a      	ands	r2, r1
 8002f42:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d108      	bne.n	8002f5e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2180      	movs	r1, #128	; 0x80
 8002f56:	0209      	lsls	r1, r1, #8
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	609a      	str	r2, [r3, #8]
 8002f5c:	e007      	b.n	8002f6e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	689a      	ldr	r2, [r3, #8]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2184      	movs	r1, #132	; 0x84
 8002f68:	0209      	lsls	r1, r1, #8
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d104      	bne.n	8002f80 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2280      	movs	r2, #128	; 0x80
 8002f7c:	0112      	lsls	r2, r2, #4
 8002f7e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	491f      	ldr	r1, [pc, #124]	; (8003008 <HAL_I2C_Init+0x128>)
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	491a      	ldr	r1, [pc, #104]	; (8003004 <HAL_I2C_Init+0x124>)
 8002f9c:	400a      	ands	r2, r1
 8002f9e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	691a      	ldr	r2, [r3, #16]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	431a      	orrs	r2, r3
 8002faa:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	69d9      	ldr	r1, [r3, #28]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a1a      	ldr	r2, [r3, #32]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2101      	movs	r1, #1
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2241      	movs	r2, #65	; 0x41
 8002fe4:	2120      	movs	r1, #32
 8002fe6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2242      	movs	r2, #66	; 0x42
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	b002      	add	sp, #8
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	f0ffffff 	.word	0xf0ffffff
 8003004:	ffff7fff 	.word	0xffff7fff
 8003008:	02008000 	.word	0x02008000

0800300c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800300c:	b590      	push	{r4, r7, lr}
 800300e:	b089      	sub	sp, #36	; 0x24
 8003010:	af02      	add	r7, sp, #8
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	000c      	movs	r4, r1
 8003016:	0010      	movs	r0, r2
 8003018:	0019      	movs	r1, r3
 800301a:	230a      	movs	r3, #10
 800301c:	18fb      	adds	r3, r7, r3
 800301e:	1c22      	adds	r2, r4, #0
 8003020:	801a      	strh	r2, [r3, #0]
 8003022:	2308      	movs	r3, #8
 8003024:	18fb      	adds	r3, r7, r3
 8003026:	1c02      	adds	r2, r0, #0
 8003028:	801a      	strh	r2, [r3, #0]
 800302a:	1dbb      	adds	r3, r7, #6
 800302c:	1c0a      	adds	r2, r1, #0
 800302e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2241      	movs	r2, #65	; 0x41
 8003034:	5c9b      	ldrb	r3, [r3, r2]
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b20      	cmp	r3, #32
 800303a:	d000      	beq.n	800303e <HAL_I2C_Mem_Write+0x32>
 800303c:	e10c      	b.n	8003258 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800303e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003040:	2b00      	cmp	r3, #0
 8003042:	d004      	beq.n	800304e <HAL_I2C_Mem_Write+0x42>
 8003044:	232c      	movs	r3, #44	; 0x2c
 8003046:	18fb      	adds	r3, r7, r3
 8003048:	881b      	ldrh	r3, [r3, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d105      	bne.n	800305a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2280      	movs	r2, #128	; 0x80
 8003052:	0092      	lsls	r2, r2, #2
 8003054:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e0ff      	b.n	800325a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2240      	movs	r2, #64	; 0x40
 800305e:	5c9b      	ldrb	r3, [r3, r2]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d101      	bne.n	8003068 <HAL_I2C_Mem_Write+0x5c>
 8003064:	2302      	movs	r3, #2
 8003066:	e0f8      	b.n	800325a <HAL_I2C_Mem_Write+0x24e>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2240      	movs	r2, #64	; 0x40
 800306c:	2101      	movs	r1, #1
 800306e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003070:	f7ff fc64 	bl	800293c <HAL_GetTick>
 8003074:	0003      	movs	r3, r0
 8003076:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003078:	2380      	movs	r3, #128	; 0x80
 800307a:	0219      	lsls	r1, r3, #8
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	2319      	movs	r3, #25
 8003084:	2201      	movs	r2, #1
 8003086:	f000 fb0b 	bl	80036a0 <I2C_WaitOnFlagUntilTimeout>
 800308a:	1e03      	subs	r3, r0, #0
 800308c:	d001      	beq.n	8003092 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e0e3      	b.n	800325a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2241      	movs	r2, #65	; 0x41
 8003096:	2121      	movs	r1, #33	; 0x21
 8003098:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2242      	movs	r2, #66	; 0x42
 800309e:	2140      	movs	r1, #64	; 0x40
 80030a0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	222c      	movs	r2, #44	; 0x2c
 80030b2:	18ba      	adds	r2, r7, r2
 80030b4:	8812      	ldrh	r2, [r2, #0]
 80030b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030be:	1dbb      	adds	r3, r7, #6
 80030c0:	881c      	ldrh	r4, [r3, #0]
 80030c2:	2308      	movs	r3, #8
 80030c4:	18fb      	adds	r3, r7, r3
 80030c6:	881a      	ldrh	r2, [r3, #0]
 80030c8:	230a      	movs	r3, #10
 80030ca:	18fb      	adds	r3, r7, r3
 80030cc:	8819      	ldrh	r1, [r3, #0]
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	9301      	str	r3, [sp, #4]
 80030d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d6:	9300      	str	r3, [sp, #0]
 80030d8:	0023      	movs	r3, r4
 80030da:	f000 f9f9 	bl	80034d0 <I2C_RequestMemoryWrite>
 80030de:	1e03      	subs	r3, r0, #0
 80030e0:	d005      	beq.n	80030ee <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2240      	movs	r2, #64	; 0x40
 80030e6:	2100      	movs	r1, #0
 80030e8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e0b5      	b.n	800325a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	2bff      	cmp	r3, #255	; 0xff
 80030f6:	d911      	bls.n	800311c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	22ff      	movs	r2, #255	; 0xff
 80030fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003102:	b2da      	uxtb	r2, r3
 8003104:	2380      	movs	r3, #128	; 0x80
 8003106:	045c      	lsls	r4, r3, #17
 8003108:	230a      	movs	r3, #10
 800310a:	18fb      	adds	r3, r7, r3
 800310c:	8819      	ldrh	r1, [r3, #0]
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	2300      	movs	r3, #0
 8003112:	9300      	str	r3, [sp, #0]
 8003114:	0023      	movs	r3, r4
 8003116:	f000 fbf7 	bl	8003908 <I2C_TransferConfig>
 800311a:	e012      	b.n	8003142 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003120:	b29a      	uxth	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800312a:	b2da      	uxtb	r2, r3
 800312c:	2380      	movs	r3, #128	; 0x80
 800312e:	049c      	lsls	r4, r3, #18
 8003130:	230a      	movs	r3, #10
 8003132:	18fb      	adds	r3, r7, r3
 8003134:	8819      	ldrh	r1, [r3, #0]
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	2300      	movs	r3, #0
 800313a:	9300      	str	r3, [sp, #0]
 800313c:	0023      	movs	r3, r4
 800313e:	f000 fbe3 	bl	8003908 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	0018      	movs	r0, r3
 800314a:	f000 fae8 	bl	800371e <I2C_WaitOnTXISFlagUntilTimeout>
 800314e:	1e03      	subs	r3, r0, #0
 8003150:	d001      	beq.n	8003156 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e081      	b.n	800325a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315a:	781a      	ldrb	r2, [r3, #0]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003166:	1c5a      	adds	r2, r3, #1
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003170:	b29b      	uxth	r3, r3
 8003172:	3b01      	subs	r3, #1
 8003174:	b29a      	uxth	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800317e:	3b01      	subs	r3, #1
 8003180:	b29a      	uxth	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800318a:	b29b      	uxth	r3, r3
 800318c:	2b00      	cmp	r3, #0
 800318e:	d03a      	beq.n	8003206 <HAL_I2C_Mem_Write+0x1fa>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003194:	2b00      	cmp	r3, #0
 8003196:	d136      	bne.n	8003206 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003198:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	9300      	str	r3, [sp, #0]
 80031a0:	0013      	movs	r3, r2
 80031a2:	2200      	movs	r2, #0
 80031a4:	2180      	movs	r1, #128	; 0x80
 80031a6:	f000 fa7b 	bl	80036a0 <I2C_WaitOnFlagUntilTimeout>
 80031aa:	1e03      	subs	r3, r0, #0
 80031ac:	d001      	beq.n	80031b2 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e053      	b.n	800325a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	2bff      	cmp	r3, #255	; 0xff
 80031ba:	d911      	bls.n	80031e0 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	22ff      	movs	r2, #255	; 0xff
 80031c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c6:	b2da      	uxtb	r2, r3
 80031c8:	2380      	movs	r3, #128	; 0x80
 80031ca:	045c      	lsls	r4, r3, #17
 80031cc:	230a      	movs	r3, #10
 80031ce:	18fb      	adds	r3, r7, r3
 80031d0:	8819      	ldrh	r1, [r3, #0]
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	2300      	movs	r3, #0
 80031d6:	9300      	str	r3, [sp, #0]
 80031d8:	0023      	movs	r3, r4
 80031da:	f000 fb95 	bl	8003908 <I2C_TransferConfig>
 80031de:	e012      	b.n	8003206 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e4:	b29a      	uxth	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ee:	b2da      	uxtb	r2, r3
 80031f0:	2380      	movs	r3, #128	; 0x80
 80031f2:	049c      	lsls	r4, r3, #18
 80031f4:	230a      	movs	r3, #10
 80031f6:	18fb      	adds	r3, r7, r3
 80031f8:	8819      	ldrh	r1, [r3, #0]
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	2300      	movs	r3, #0
 80031fe:	9300      	str	r3, [sp, #0]
 8003200:	0023      	movs	r3, r4
 8003202:	f000 fb81 	bl	8003908 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800320a:	b29b      	uxth	r3, r3
 800320c:	2b00      	cmp	r3, #0
 800320e:	d198      	bne.n	8003142 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003210:	697a      	ldr	r2, [r7, #20]
 8003212:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	0018      	movs	r0, r3
 8003218:	f000 fac0 	bl	800379c <I2C_WaitOnSTOPFlagUntilTimeout>
 800321c:	1e03      	subs	r3, r0, #0
 800321e:	d001      	beq.n	8003224 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e01a      	b.n	800325a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2220      	movs	r2, #32
 800322a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	490b      	ldr	r1, [pc, #44]	; (8003264 <HAL_I2C_Mem_Write+0x258>)
 8003238:	400a      	ands	r2, r1
 800323a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2241      	movs	r2, #65	; 0x41
 8003240:	2120      	movs	r1, #32
 8003242:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2242      	movs	r2, #66	; 0x42
 8003248:	2100      	movs	r1, #0
 800324a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2240      	movs	r2, #64	; 0x40
 8003250:	2100      	movs	r1, #0
 8003252:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003254:	2300      	movs	r3, #0
 8003256:	e000      	b.n	800325a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003258:	2302      	movs	r3, #2
  }
}
 800325a:	0018      	movs	r0, r3
 800325c:	46bd      	mov	sp, r7
 800325e:	b007      	add	sp, #28
 8003260:	bd90      	pop	{r4, r7, pc}
 8003262:	46c0      	nop			; (mov r8, r8)
 8003264:	fe00e800 	.word	0xfe00e800

08003268 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003268:	b590      	push	{r4, r7, lr}
 800326a:	b089      	sub	sp, #36	; 0x24
 800326c:	af02      	add	r7, sp, #8
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	000c      	movs	r4, r1
 8003272:	0010      	movs	r0, r2
 8003274:	0019      	movs	r1, r3
 8003276:	230a      	movs	r3, #10
 8003278:	18fb      	adds	r3, r7, r3
 800327a:	1c22      	adds	r2, r4, #0
 800327c:	801a      	strh	r2, [r3, #0]
 800327e:	2308      	movs	r3, #8
 8003280:	18fb      	adds	r3, r7, r3
 8003282:	1c02      	adds	r2, r0, #0
 8003284:	801a      	strh	r2, [r3, #0]
 8003286:	1dbb      	adds	r3, r7, #6
 8003288:	1c0a      	adds	r2, r1, #0
 800328a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2241      	movs	r2, #65	; 0x41
 8003290:	5c9b      	ldrb	r3, [r3, r2]
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2b20      	cmp	r3, #32
 8003296:	d000      	beq.n	800329a <HAL_I2C_Mem_Read+0x32>
 8003298:	e110      	b.n	80034bc <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800329a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329c:	2b00      	cmp	r3, #0
 800329e:	d004      	beq.n	80032aa <HAL_I2C_Mem_Read+0x42>
 80032a0:	232c      	movs	r3, #44	; 0x2c
 80032a2:	18fb      	adds	r3, r7, r3
 80032a4:	881b      	ldrh	r3, [r3, #0]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d105      	bne.n	80032b6 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2280      	movs	r2, #128	; 0x80
 80032ae:	0092      	lsls	r2, r2, #2
 80032b0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e103      	b.n	80034be <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2240      	movs	r2, #64	; 0x40
 80032ba:	5c9b      	ldrb	r3, [r3, r2]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d101      	bne.n	80032c4 <HAL_I2C_Mem_Read+0x5c>
 80032c0:	2302      	movs	r3, #2
 80032c2:	e0fc      	b.n	80034be <HAL_I2C_Mem_Read+0x256>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2240      	movs	r2, #64	; 0x40
 80032c8:	2101      	movs	r1, #1
 80032ca:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80032cc:	f7ff fb36 	bl	800293c <HAL_GetTick>
 80032d0:	0003      	movs	r3, r0
 80032d2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80032d4:	2380      	movs	r3, #128	; 0x80
 80032d6:	0219      	lsls	r1, r3, #8
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	9300      	str	r3, [sp, #0]
 80032de:	2319      	movs	r3, #25
 80032e0:	2201      	movs	r2, #1
 80032e2:	f000 f9dd 	bl	80036a0 <I2C_WaitOnFlagUntilTimeout>
 80032e6:	1e03      	subs	r3, r0, #0
 80032e8:	d001      	beq.n	80032ee <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e0e7      	b.n	80034be <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2241      	movs	r2, #65	; 0x41
 80032f2:	2122      	movs	r1, #34	; 0x22
 80032f4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2242      	movs	r2, #66	; 0x42
 80032fa:	2140      	movs	r1, #64	; 0x40
 80032fc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003308:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	222c      	movs	r2, #44	; 0x2c
 800330e:	18ba      	adds	r2, r7, r2
 8003310:	8812      	ldrh	r2, [r2, #0]
 8003312:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800331a:	1dbb      	adds	r3, r7, #6
 800331c:	881c      	ldrh	r4, [r3, #0]
 800331e:	2308      	movs	r3, #8
 8003320:	18fb      	adds	r3, r7, r3
 8003322:	881a      	ldrh	r2, [r3, #0]
 8003324:	230a      	movs	r3, #10
 8003326:	18fb      	adds	r3, r7, r3
 8003328:	8819      	ldrh	r1, [r3, #0]
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	9301      	str	r3, [sp, #4]
 8003330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	0023      	movs	r3, r4
 8003336:	f000 f92f 	bl	8003598 <I2C_RequestMemoryRead>
 800333a:	1e03      	subs	r3, r0, #0
 800333c:	d005      	beq.n	800334a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2240      	movs	r2, #64	; 0x40
 8003342:	2100      	movs	r1, #0
 8003344:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e0b9      	b.n	80034be <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800334e:	b29b      	uxth	r3, r3
 8003350:	2bff      	cmp	r3, #255	; 0xff
 8003352:	d911      	bls.n	8003378 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	22ff      	movs	r2, #255	; 0xff
 8003358:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800335e:	b2da      	uxtb	r2, r3
 8003360:	2380      	movs	r3, #128	; 0x80
 8003362:	045c      	lsls	r4, r3, #17
 8003364:	230a      	movs	r3, #10
 8003366:	18fb      	adds	r3, r7, r3
 8003368:	8819      	ldrh	r1, [r3, #0]
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	4b56      	ldr	r3, [pc, #344]	; (80034c8 <HAL_I2C_Mem_Read+0x260>)
 800336e:	9300      	str	r3, [sp, #0]
 8003370:	0023      	movs	r3, r4
 8003372:	f000 fac9 	bl	8003908 <I2C_TransferConfig>
 8003376:	e012      	b.n	800339e <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800337c:	b29a      	uxth	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003386:	b2da      	uxtb	r2, r3
 8003388:	2380      	movs	r3, #128	; 0x80
 800338a:	049c      	lsls	r4, r3, #18
 800338c:	230a      	movs	r3, #10
 800338e:	18fb      	adds	r3, r7, r3
 8003390:	8819      	ldrh	r1, [r3, #0]
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	4b4c      	ldr	r3, [pc, #304]	; (80034c8 <HAL_I2C_Mem_Read+0x260>)
 8003396:	9300      	str	r3, [sp, #0]
 8003398:	0023      	movs	r3, r4
 800339a:	f000 fab5 	bl	8003908 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800339e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	0013      	movs	r3, r2
 80033a8:	2200      	movs	r2, #0
 80033aa:	2104      	movs	r1, #4
 80033ac:	f000 f978 	bl	80036a0 <I2C_WaitOnFlagUntilTimeout>
 80033b0:	1e03      	subs	r3, r0, #0
 80033b2:	d001      	beq.n	80033b8 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e082      	b.n	80034be <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	b2d2      	uxtb	r2, r2
 80033c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ca:	1c5a      	adds	r2, r3, #1
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d4:	3b01      	subs	r3, #1
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	3b01      	subs	r3, #1
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d03a      	beq.n	800346a <HAL_I2C_Mem_Read+0x202>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d136      	bne.n	800346a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80033fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	9300      	str	r3, [sp, #0]
 8003404:	0013      	movs	r3, r2
 8003406:	2200      	movs	r2, #0
 8003408:	2180      	movs	r1, #128	; 0x80
 800340a:	f000 f949 	bl	80036a0 <I2C_WaitOnFlagUntilTimeout>
 800340e:	1e03      	subs	r3, r0, #0
 8003410:	d001      	beq.n	8003416 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e053      	b.n	80034be <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800341a:	b29b      	uxth	r3, r3
 800341c:	2bff      	cmp	r3, #255	; 0xff
 800341e:	d911      	bls.n	8003444 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	22ff      	movs	r2, #255	; 0xff
 8003424:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800342a:	b2da      	uxtb	r2, r3
 800342c:	2380      	movs	r3, #128	; 0x80
 800342e:	045c      	lsls	r4, r3, #17
 8003430:	230a      	movs	r3, #10
 8003432:	18fb      	adds	r3, r7, r3
 8003434:	8819      	ldrh	r1, [r3, #0]
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	2300      	movs	r3, #0
 800343a:	9300      	str	r3, [sp, #0]
 800343c:	0023      	movs	r3, r4
 800343e:	f000 fa63 	bl	8003908 <I2C_TransferConfig>
 8003442:	e012      	b.n	800346a <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003448:	b29a      	uxth	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003452:	b2da      	uxtb	r2, r3
 8003454:	2380      	movs	r3, #128	; 0x80
 8003456:	049c      	lsls	r4, r3, #18
 8003458:	230a      	movs	r3, #10
 800345a:	18fb      	adds	r3, r7, r3
 800345c:	8819      	ldrh	r1, [r3, #0]
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	2300      	movs	r3, #0
 8003462:	9300      	str	r3, [sp, #0]
 8003464:	0023      	movs	r3, r4
 8003466:	f000 fa4f 	bl	8003908 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800346e:	b29b      	uxth	r3, r3
 8003470:	2b00      	cmp	r3, #0
 8003472:	d194      	bne.n	800339e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	0018      	movs	r0, r3
 800347c:	f000 f98e 	bl	800379c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003480:	1e03      	subs	r3, r0, #0
 8003482:	d001      	beq.n	8003488 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e01a      	b.n	80034be <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2220      	movs	r2, #32
 800348e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685a      	ldr	r2, [r3, #4]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	490c      	ldr	r1, [pc, #48]	; (80034cc <HAL_I2C_Mem_Read+0x264>)
 800349c:	400a      	ands	r2, r1
 800349e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2241      	movs	r2, #65	; 0x41
 80034a4:	2120      	movs	r1, #32
 80034a6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2242      	movs	r2, #66	; 0x42
 80034ac:	2100      	movs	r1, #0
 80034ae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2240      	movs	r2, #64	; 0x40
 80034b4:	2100      	movs	r1, #0
 80034b6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80034b8:	2300      	movs	r3, #0
 80034ba:	e000      	b.n	80034be <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80034bc:	2302      	movs	r3, #2
  }
}
 80034be:	0018      	movs	r0, r3
 80034c0:	46bd      	mov	sp, r7
 80034c2:	b007      	add	sp, #28
 80034c4:	bd90      	pop	{r4, r7, pc}
 80034c6:	46c0      	nop			; (mov r8, r8)
 80034c8:	80002400 	.word	0x80002400
 80034cc:	fe00e800 	.word	0xfe00e800

080034d0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80034d0:	b5b0      	push	{r4, r5, r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af02      	add	r7, sp, #8
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	000c      	movs	r4, r1
 80034da:	0010      	movs	r0, r2
 80034dc:	0019      	movs	r1, r3
 80034de:	250a      	movs	r5, #10
 80034e0:	197b      	adds	r3, r7, r5
 80034e2:	1c22      	adds	r2, r4, #0
 80034e4:	801a      	strh	r2, [r3, #0]
 80034e6:	2308      	movs	r3, #8
 80034e8:	18fb      	adds	r3, r7, r3
 80034ea:	1c02      	adds	r2, r0, #0
 80034ec:	801a      	strh	r2, [r3, #0]
 80034ee:	1dbb      	adds	r3, r7, #6
 80034f0:	1c0a      	adds	r2, r1, #0
 80034f2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80034f4:	1dbb      	adds	r3, r7, #6
 80034f6:	881b      	ldrh	r3, [r3, #0]
 80034f8:	b2da      	uxtb	r2, r3
 80034fa:	2380      	movs	r3, #128	; 0x80
 80034fc:	045c      	lsls	r4, r3, #17
 80034fe:	197b      	adds	r3, r7, r5
 8003500:	8819      	ldrh	r1, [r3, #0]
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	4b23      	ldr	r3, [pc, #140]	; (8003594 <I2C_RequestMemoryWrite+0xc4>)
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	0023      	movs	r3, r4
 800350a:	f000 f9fd 	bl	8003908 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800350e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003510:	6a39      	ldr	r1, [r7, #32]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	0018      	movs	r0, r3
 8003516:	f000 f902 	bl	800371e <I2C_WaitOnTXISFlagUntilTimeout>
 800351a:	1e03      	subs	r3, r0, #0
 800351c:	d001      	beq.n	8003522 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e033      	b.n	800358a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003522:	1dbb      	adds	r3, r7, #6
 8003524:	881b      	ldrh	r3, [r3, #0]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d107      	bne.n	800353a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800352a:	2308      	movs	r3, #8
 800352c:	18fb      	adds	r3, r7, r3
 800352e:	881b      	ldrh	r3, [r3, #0]
 8003530:	b2da      	uxtb	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	629a      	str	r2, [r3, #40]	; 0x28
 8003538:	e019      	b.n	800356e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800353a:	2308      	movs	r3, #8
 800353c:	18fb      	adds	r3, r7, r3
 800353e:	881b      	ldrh	r3, [r3, #0]
 8003540:	0a1b      	lsrs	r3, r3, #8
 8003542:	b29b      	uxth	r3, r3
 8003544:	b2da      	uxtb	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800354c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800354e:	6a39      	ldr	r1, [r7, #32]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	0018      	movs	r0, r3
 8003554:	f000 f8e3 	bl	800371e <I2C_WaitOnTXISFlagUntilTimeout>
 8003558:	1e03      	subs	r3, r0, #0
 800355a:	d001      	beq.n	8003560 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e014      	b.n	800358a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003560:	2308      	movs	r3, #8
 8003562:	18fb      	adds	r3, r7, r3
 8003564:	881b      	ldrh	r3, [r3, #0]
 8003566:	b2da      	uxtb	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800356e:	6a3a      	ldr	r2, [r7, #32]
 8003570:	68f8      	ldr	r0, [r7, #12]
 8003572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003574:	9300      	str	r3, [sp, #0]
 8003576:	0013      	movs	r3, r2
 8003578:	2200      	movs	r2, #0
 800357a:	2180      	movs	r1, #128	; 0x80
 800357c:	f000 f890 	bl	80036a0 <I2C_WaitOnFlagUntilTimeout>
 8003580:	1e03      	subs	r3, r0, #0
 8003582:	d001      	beq.n	8003588 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e000      	b.n	800358a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	0018      	movs	r0, r3
 800358c:	46bd      	mov	sp, r7
 800358e:	b004      	add	sp, #16
 8003590:	bdb0      	pop	{r4, r5, r7, pc}
 8003592:	46c0      	nop			; (mov r8, r8)
 8003594:	80002000 	.word	0x80002000

08003598 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003598:	b5b0      	push	{r4, r5, r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af02      	add	r7, sp, #8
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	000c      	movs	r4, r1
 80035a2:	0010      	movs	r0, r2
 80035a4:	0019      	movs	r1, r3
 80035a6:	250a      	movs	r5, #10
 80035a8:	197b      	adds	r3, r7, r5
 80035aa:	1c22      	adds	r2, r4, #0
 80035ac:	801a      	strh	r2, [r3, #0]
 80035ae:	2308      	movs	r3, #8
 80035b0:	18fb      	adds	r3, r7, r3
 80035b2:	1c02      	adds	r2, r0, #0
 80035b4:	801a      	strh	r2, [r3, #0]
 80035b6:	1dbb      	adds	r3, r7, #6
 80035b8:	1c0a      	adds	r2, r1, #0
 80035ba:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80035bc:	1dbb      	adds	r3, r7, #6
 80035be:	881b      	ldrh	r3, [r3, #0]
 80035c0:	b2da      	uxtb	r2, r3
 80035c2:	197b      	adds	r3, r7, r5
 80035c4:	8819      	ldrh	r1, [r3, #0]
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	4b23      	ldr	r3, [pc, #140]	; (8003658 <I2C_RequestMemoryRead+0xc0>)
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	2300      	movs	r3, #0
 80035ce:	f000 f99b 	bl	8003908 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d4:	6a39      	ldr	r1, [r7, #32]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	0018      	movs	r0, r3
 80035da:	f000 f8a0 	bl	800371e <I2C_WaitOnTXISFlagUntilTimeout>
 80035de:	1e03      	subs	r3, r0, #0
 80035e0:	d001      	beq.n	80035e6 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e033      	b.n	800364e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035e6:	1dbb      	adds	r3, r7, #6
 80035e8:	881b      	ldrh	r3, [r3, #0]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d107      	bne.n	80035fe <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80035ee:	2308      	movs	r3, #8
 80035f0:	18fb      	adds	r3, r7, r3
 80035f2:	881b      	ldrh	r3, [r3, #0]
 80035f4:	b2da      	uxtb	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	629a      	str	r2, [r3, #40]	; 0x28
 80035fc:	e019      	b.n	8003632 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80035fe:	2308      	movs	r3, #8
 8003600:	18fb      	adds	r3, r7, r3
 8003602:	881b      	ldrh	r3, [r3, #0]
 8003604:	0a1b      	lsrs	r3, r3, #8
 8003606:	b29b      	uxth	r3, r3
 8003608:	b2da      	uxtb	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003612:	6a39      	ldr	r1, [r7, #32]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	0018      	movs	r0, r3
 8003618:	f000 f881 	bl	800371e <I2C_WaitOnTXISFlagUntilTimeout>
 800361c:	1e03      	subs	r3, r0, #0
 800361e:	d001      	beq.n	8003624 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e014      	b.n	800364e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003624:	2308      	movs	r3, #8
 8003626:	18fb      	adds	r3, r7, r3
 8003628:	881b      	ldrh	r3, [r3, #0]
 800362a:	b2da      	uxtb	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003632:	6a3a      	ldr	r2, [r7, #32]
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003638:	9300      	str	r3, [sp, #0]
 800363a:	0013      	movs	r3, r2
 800363c:	2200      	movs	r2, #0
 800363e:	2140      	movs	r1, #64	; 0x40
 8003640:	f000 f82e 	bl	80036a0 <I2C_WaitOnFlagUntilTimeout>
 8003644:	1e03      	subs	r3, r0, #0
 8003646:	d001      	beq.n	800364c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e000      	b.n	800364e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	0018      	movs	r0, r3
 8003650:	46bd      	mov	sp, r7
 8003652:	b004      	add	sp, #16
 8003654:	bdb0      	pop	{r4, r5, r7, pc}
 8003656:	46c0      	nop			; (mov r8, r8)
 8003658:	80002000 	.word	0x80002000

0800365c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	2202      	movs	r2, #2
 800366c:	4013      	ands	r3, r2
 800366e:	2b02      	cmp	r3, #2
 8003670:	d103      	bne.n	800367a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2200      	movs	r2, #0
 8003678:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	2201      	movs	r2, #1
 8003682:	4013      	ands	r3, r2
 8003684:	2b01      	cmp	r3, #1
 8003686:	d007      	beq.n	8003698 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	699a      	ldr	r2, [r3, #24]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2101      	movs	r1, #1
 8003694:	430a      	orrs	r2, r1
 8003696:	619a      	str	r2, [r3, #24]
  }
}
 8003698:	46c0      	nop			; (mov r8, r8)
 800369a:	46bd      	mov	sp, r7
 800369c:	b002      	add	sp, #8
 800369e:	bd80      	pop	{r7, pc}

080036a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	603b      	str	r3, [r7, #0]
 80036ac:	1dfb      	adds	r3, r7, #7
 80036ae:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036b0:	e021      	b.n	80036f6 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	3301      	adds	r3, #1
 80036b6:	d01e      	beq.n	80036f6 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b8:	f7ff f940 	bl	800293c <HAL_GetTick>
 80036bc:	0002      	movs	r2, r0
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d302      	bcc.n	80036ce <I2C_WaitOnFlagUntilTimeout+0x2e>
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d113      	bne.n	80036f6 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d2:	2220      	movs	r2, #32
 80036d4:	431a      	orrs	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2241      	movs	r2, #65	; 0x41
 80036de:	2120      	movs	r1, #32
 80036e0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2242      	movs	r2, #66	; 0x42
 80036e6:	2100      	movs	r1, #0
 80036e8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2240      	movs	r2, #64	; 0x40
 80036ee:	2100      	movs	r1, #0
 80036f0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e00f      	b.n	8003716 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	4013      	ands	r3, r2
 8003700:	68ba      	ldr	r2, [r7, #8]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	425a      	negs	r2, r3
 8003706:	4153      	adcs	r3, r2
 8003708:	b2db      	uxtb	r3, r3
 800370a:	001a      	movs	r2, r3
 800370c:	1dfb      	adds	r3, r7, #7
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	429a      	cmp	r2, r3
 8003712:	d0ce      	beq.n	80036b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	0018      	movs	r0, r3
 8003718:	46bd      	mov	sp, r7
 800371a:	b004      	add	sp, #16
 800371c:	bd80      	pop	{r7, pc}

0800371e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b084      	sub	sp, #16
 8003722:	af00      	add	r7, sp, #0
 8003724:	60f8      	str	r0, [r7, #12]
 8003726:	60b9      	str	r1, [r7, #8]
 8003728:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800372a:	e02b      	b.n	8003784 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	68b9      	ldr	r1, [r7, #8]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	0018      	movs	r0, r3
 8003734:	f000 f86e 	bl	8003814 <I2C_IsAcknowledgeFailed>
 8003738:	1e03      	subs	r3, r0, #0
 800373a:	d001      	beq.n	8003740 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e029      	b.n	8003794 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	3301      	adds	r3, #1
 8003744:	d01e      	beq.n	8003784 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003746:	f7ff f8f9 	bl	800293c <HAL_GetTick>
 800374a:	0002      	movs	r2, r0
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	68ba      	ldr	r2, [r7, #8]
 8003752:	429a      	cmp	r2, r3
 8003754:	d302      	bcc.n	800375c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d113      	bne.n	8003784 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003760:	2220      	movs	r2, #32
 8003762:	431a      	orrs	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2241      	movs	r2, #65	; 0x41
 800376c:	2120      	movs	r1, #32
 800376e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2242      	movs	r2, #66	; 0x42
 8003774:	2100      	movs	r1, #0
 8003776:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2240      	movs	r2, #64	; 0x40
 800377c:	2100      	movs	r1, #0
 800377e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e007      	b.n	8003794 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	2202      	movs	r2, #2
 800378c:	4013      	ands	r3, r2
 800378e:	2b02      	cmp	r3, #2
 8003790:	d1cc      	bne.n	800372c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	0018      	movs	r0, r3
 8003796:	46bd      	mov	sp, r7
 8003798:	b004      	add	sp, #16
 800379a:	bd80      	pop	{r7, pc}

0800379c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037a8:	e028      	b.n	80037fc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	68b9      	ldr	r1, [r7, #8]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	0018      	movs	r0, r3
 80037b2:	f000 f82f 	bl	8003814 <I2C_IsAcknowledgeFailed>
 80037b6:	1e03      	subs	r3, r0, #0
 80037b8:	d001      	beq.n	80037be <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e026      	b.n	800380c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037be:	f7ff f8bd 	bl	800293c <HAL_GetTick>
 80037c2:	0002      	movs	r2, r0
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	68ba      	ldr	r2, [r7, #8]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d302      	bcc.n	80037d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d113      	bne.n	80037fc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d8:	2220      	movs	r2, #32
 80037da:	431a      	orrs	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2241      	movs	r2, #65	; 0x41
 80037e4:	2120      	movs	r1, #32
 80037e6:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2242      	movs	r2, #66	; 0x42
 80037ec:	2100      	movs	r1, #0
 80037ee:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2240      	movs	r2, #64	; 0x40
 80037f4:	2100      	movs	r1, #0
 80037f6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e007      	b.n	800380c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	2220      	movs	r2, #32
 8003804:	4013      	ands	r3, r2
 8003806:	2b20      	cmp	r3, #32
 8003808:	d1cf      	bne.n	80037aa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	0018      	movs	r0, r3
 800380e:	46bd      	mov	sp, r7
 8003810:	b004      	add	sp, #16
 8003812:	bd80      	pop	{r7, pc}

08003814 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	2210      	movs	r2, #16
 8003828:	4013      	ands	r3, r2
 800382a:	2b10      	cmp	r3, #16
 800382c:	d164      	bne.n	80038f8 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	2380      	movs	r3, #128	; 0x80
 8003836:	049b      	lsls	r3, r3, #18
 8003838:	401a      	ands	r2, r3
 800383a:	2380      	movs	r3, #128	; 0x80
 800383c:	049b      	lsls	r3, r3, #18
 800383e:	429a      	cmp	r2, r3
 8003840:	d02b      	beq.n	800389a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2180      	movs	r1, #128	; 0x80
 800384e:	01c9      	lsls	r1, r1, #7
 8003850:	430a      	orrs	r2, r1
 8003852:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003854:	e021      	b.n	800389a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	3301      	adds	r3, #1
 800385a:	d01e      	beq.n	800389a <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800385c:	f7ff f86e 	bl	800293c <HAL_GetTick>
 8003860:	0002      	movs	r2, r0
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	68ba      	ldr	r2, [r7, #8]
 8003868:	429a      	cmp	r2, r3
 800386a:	d302      	bcc.n	8003872 <I2C_IsAcknowledgeFailed+0x5e>
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d113      	bne.n	800389a <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003876:	2220      	movs	r2, #32
 8003878:	431a      	orrs	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2241      	movs	r2, #65	; 0x41
 8003882:	2120      	movs	r1, #32
 8003884:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2242      	movs	r2, #66	; 0x42
 800388a:	2100      	movs	r1, #0
 800388c:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2240      	movs	r2, #64	; 0x40
 8003892:	2100      	movs	r1, #0
 8003894:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e02f      	b.n	80038fa <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	2220      	movs	r2, #32
 80038a2:	4013      	ands	r3, r2
 80038a4:	2b20      	cmp	r3, #32
 80038a6:	d1d6      	bne.n	8003856 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2210      	movs	r2, #16
 80038ae:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2220      	movs	r2, #32
 80038b6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	0018      	movs	r0, r3
 80038bc:	f7ff fece 	bl	800365c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	685a      	ldr	r2, [r3, #4]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	490e      	ldr	r1, [pc, #56]	; (8003904 <I2C_IsAcknowledgeFailed+0xf0>)
 80038cc:	400a      	ands	r2, r1
 80038ce:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d4:	2204      	movs	r2, #4
 80038d6:	431a      	orrs	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2241      	movs	r2, #65	; 0x41
 80038e0:	2120      	movs	r1, #32
 80038e2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2242      	movs	r2, #66	; 0x42
 80038e8:	2100      	movs	r1, #0
 80038ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2240      	movs	r2, #64	; 0x40
 80038f0:	2100      	movs	r1, #0
 80038f2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e000      	b.n	80038fa <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	0018      	movs	r0, r3
 80038fc:	46bd      	mov	sp, r7
 80038fe:	b004      	add	sp, #16
 8003900:	bd80      	pop	{r7, pc}
 8003902:	46c0      	nop			; (mov r8, r8)
 8003904:	fe00e800 	.word	0xfe00e800

08003908 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003908:	b590      	push	{r4, r7, lr}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	0008      	movs	r0, r1
 8003912:	0011      	movs	r1, r2
 8003914:	607b      	str	r3, [r7, #4]
 8003916:	240a      	movs	r4, #10
 8003918:	193b      	adds	r3, r7, r4
 800391a:	1c02      	adds	r2, r0, #0
 800391c:	801a      	strh	r2, [r3, #0]
 800391e:	2009      	movs	r0, #9
 8003920:	183b      	adds	r3, r7, r0
 8003922:	1c0a      	adds	r2, r1, #0
 8003924:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	6a3a      	ldr	r2, [r7, #32]
 800392e:	0d51      	lsrs	r1, r2, #21
 8003930:	2280      	movs	r2, #128	; 0x80
 8003932:	00d2      	lsls	r2, r2, #3
 8003934:	400a      	ands	r2, r1
 8003936:	490e      	ldr	r1, [pc, #56]	; (8003970 <I2C_TransferConfig+0x68>)
 8003938:	430a      	orrs	r2, r1
 800393a:	43d2      	mvns	r2, r2
 800393c:	401a      	ands	r2, r3
 800393e:	0011      	movs	r1, r2
 8003940:	193b      	adds	r3, r7, r4
 8003942:	881b      	ldrh	r3, [r3, #0]
 8003944:	059b      	lsls	r3, r3, #22
 8003946:	0d9a      	lsrs	r2, r3, #22
 8003948:	183b      	adds	r3, r7, r0
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	0418      	lsls	r0, r3, #16
 800394e:	23ff      	movs	r3, #255	; 0xff
 8003950:	041b      	lsls	r3, r3, #16
 8003952:	4003      	ands	r3, r0
 8003954:	431a      	orrs	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	431a      	orrs	r2, r3
 800395a:	6a3b      	ldr	r3, [r7, #32]
 800395c:	431a      	orrs	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8003966:	46c0      	nop			; (mov r8, r8)
 8003968:	46bd      	mov	sp, r7
 800396a:	b005      	add	sp, #20
 800396c:	bd90      	pop	{r4, r7, pc}
 800396e:	46c0      	nop			; (mov r8, r8)
 8003970:	03ff63ff 	.word	0x03ff63ff

08003974 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2241      	movs	r2, #65	; 0x41
 8003982:	5c9b      	ldrb	r3, [r3, r2]
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b20      	cmp	r3, #32
 8003988:	d138      	bne.n	80039fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2240      	movs	r2, #64	; 0x40
 800398e:	5c9b      	ldrb	r3, [r3, r2]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d101      	bne.n	8003998 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003994:	2302      	movs	r3, #2
 8003996:	e032      	b.n	80039fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2240      	movs	r2, #64	; 0x40
 800399c:	2101      	movs	r1, #1
 800399e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2241      	movs	r2, #65	; 0x41
 80039a4:	2124      	movs	r1, #36	; 0x24
 80039a6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2101      	movs	r1, #1
 80039b4:	438a      	bics	r2, r1
 80039b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4911      	ldr	r1, [pc, #68]	; (8003a08 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80039c4:	400a      	ands	r2, r1
 80039c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	6819      	ldr	r1, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	683a      	ldr	r2, [r7, #0]
 80039d4:	430a      	orrs	r2, r1
 80039d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2101      	movs	r1, #1
 80039e4:	430a      	orrs	r2, r1
 80039e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2241      	movs	r2, #65	; 0x41
 80039ec:	2120      	movs	r1, #32
 80039ee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2240      	movs	r2, #64	; 0x40
 80039f4:	2100      	movs	r1, #0
 80039f6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80039f8:	2300      	movs	r3, #0
 80039fa:	e000      	b.n	80039fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80039fc:	2302      	movs	r3, #2
  }
}
 80039fe:	0018      	movs	r0, r3
 8003a00:	46bd      	mov	sp, r7
 8003a02:	b002      	add	sp, #8
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	46c0      	nop			; (mov r8, r8)
 8003a08:	ffffefff 	.word	0xffffefff

08003a0c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2241      	movs	r2, #65	; 0x41
 8003a1a:	5c9b      	ldrb	r3, [r3, r2]
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b20      	cmp	r3, #32
 8003a20:	d139      	bne.n	8003a96 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2240      	movs	r2, #64	; 0x40
 8003a26:	5c9b      	ldrb	r3, [r3, r2]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d101      	bne.n	8003a30 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	e033      	b.n	8003a98 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2240      	movs	r2, #64	; 0x40
 8003a34:	2101      	movs	r1, #1
 8003a36:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2241      	movs	r2, #65	; 0x41
 8003a3c:	2124      	movs	r1, #36	; 0x24
 8003a3e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	438a      	bics	r2, r1
 8003a4e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	4a11      	ldr	r2, [pc, #68]	; (8003aa0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	021b      	lsls	r3, r3, #8
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2101      	movs	r1, #1
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2241      	movs	r2, #65	; 0x41
 8003a86:	2120      	movs	r1, #32
 8003a88:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2240      	movs	r2, #64	; 0x40
 8003a8e:	2100      	movs	r1, #0
 8003a90:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003a92:	2300      	movs	r3, #0
 8003a94:	e000      	b.n	8003a98 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a96:	2302      	movs	r3, #2
  }
}
 8003a98:	0018      	movs	r0, r3
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	b004      	add	sp, #16
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	fffff0ff 	.word	0xfffff0ff

08003aa4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b088      	sub	sp, #32
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e301      	b.n	80040ba <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2201      	movs	r2, #1
 8003abc:	4013      	ands	r3, r2
 8003abe:	d100      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x1e>
 8003ac0:	e08d      	b.n	8003bde <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003ac2:	4bc3      	ldr	r3, [pc, #780]	; (8003dd0 <HAL_RCC_OscConfig+0x32c>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	220c      	movs	r2, #12
 8003ac8:	4013      	ands	r3, r2
 8003aca:	2b04      	cmp	r3, #4
 8003acc:	d00e      	beq.n	8003aec <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ace:	4bc0      	ldr	r3, [pc, #768]	; (8003dd0 <HAL_RCC_OscConfig+0x32c>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	220c      	movs	r2, #12
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	2b08      	cmp	r3, #8
 8003ad8:	d116      	bne.n	8003b08 <HAL_RCC_OscConfig+0x64>
 8003ada:	4bbd      	ldr	r3, [pc, #756]	; (8003dd0 <HAL_RCC_OscConfig+0x32c>)
 8003adc:	685a      	ldr	r2, [r3, #4]
 8003ade:	2380      	movs	r3, #128	; 0x80
 8003ae0:	025b      	lsls	r3, r3, #9
 8003ae2:	401a      	ands	r2, r3
 8003ae4:	2380      	movs	r3, #128	; 0x80
 8003ae6:	025b      	lsls	r3, r3, #9
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d10d      	bne.n	8003b08 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aec:	4bb8      	ldr	r3, [pc, #736]	; (8003dd0 <HAL_RCC_OscConfig+0x32c>)
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	2380      	movs	r3, #128	; 0x80
 8003af2:	029b      	lsls	r3, r3, #10
 8003af4:	4013      	ands	r3, r2
 8003af6:	d100      	bne.n	8003afa <HAL_RCC_OscConfig+0x56>
 8003af8:	e070      	b.n	8003bdc <HAL_RCC_OscConfig+0x138>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d000      	beq.n	8003b04 <HAL_RCC_OscConfig+0x60>
 8003b02:	e06b      	b.n	8003bdc <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e2d8      	b.n	80040ba <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d107      	bne.n	8003b20 <HAL_RCC_OscConfig+0x7c>
 8003b10:	4baf      	ldr	r3, [pc, #700]	; (8003dd0 <HAL_RCC_OscConfig+0x32c>)
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	4bae      	ldr	r3, [pc, #696]	; (8003dd0 <HAL_RCC_OscConfig+0x32c>)
 8003b16:	2180      	movs	r1, #128	; 0x80
 8003b18:	0249      	lsls	r1, r1, #9
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	601a      	str	r2, [r3, #0]
 8003b1e:	e02f      	b.n	8003b80 <HAL_RCC_OscConfig+0xdc>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10c      	bne.n	8003b42 <HAL_RCC_OscConfig+0x9e>
 8003b28:	4ba9      	ldr	r3, [pc, #676]	; (8003dd0 <HAL_RCC_OscConfig+0x32c>)
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	4ba8      	ldr	r3, [pc, #672]	; (8003dd0 <HAL_RCC_OscConfig+0x32c>)
 8003b2e:	49a9      	ldr	r1, [pc, #676]	; (8003dd4 <HAL_RCC_OscConfig+0x330>)
 8003b30:	400a      	ands	r2, r1
 8003b32:	601a      	str	r2, [r3, #0]
 8003b34:	4ba6      	ldr	r3, [pc, #664]	; (8003dd0 <HAL_RCC_OscConfig+0x32c>)
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	4ba5      	ldr	r3, [pc, #660]	; (8003dd0 <HAL_RCC_OscConfig+0x32c>)
 8003b3a:	49a7      	ldr	r1, [pc, #668]	; (8003dd8 <HAL_RCC_OscConfig+0x334>)
 8003b3c:	400a      	ands	r2, r1
 8003b3e:	601a      	str	r2, [r3, #0]
 8003b40:	e01e      	b.n	8003b80 <HAL_RCC_OscConfig+0xdc>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	2b05      	cmp	r3, #5
 8003b48:	d10e      	bne.n	8003b68 <HAL_RCC_OscConfig+0xc4>
 8003b4a:	4ba1      	ldr	r3, [pc, #644]	; (8003dd0 <HAL_RCC_OscConfig+0x32c>)
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	4ba0      	ldr	r3, [pc, #640]	; (8003dd0 <HAL_RCC_OscConfig+0x32c>)
 8003b50:	2180      	movs	r1, #128	; 0x80
 8003b52:	02c9      	lsls	r1, r1, #11
 8003b54:	430a      	orrs	r2, r1
 8003b56:	601a      	str	r2, [r3, #0]
 8003b58:	4b9d      	ldr	r3, [pc, #628]	; (8003dd0 <HAL_RCC_OscConfig+0x32c>)
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	4b9c      	ldr	r3, [pc, #624]	; (8003dd0 <HAL_RCC_OscConfig+0x32c>)
 8003b5e:	2180      	movs	r1, #128	; 0x80
 8003b60:	0249      	lsls	r1, r1, #9
 8003b62:	430a      	orrs	r2, r1
 8003b64:	601a      	str	r2, [r3, #0]
 8003b66:	e00b      	b.n	8003b80 <HAL_RCC_OscConfig+0xdc>
 8003b68:	4b99      	ldr	r3, [pc, #612]	; (8003dd0 <HAL_RCC_OscConfig+0x32c>)
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	4b98      	ldr	r3, [pc, #608]	; (8003dd0 <HAL_RCC_OscConfig+0x32c>)
 8003b6e:	4999      	ldr	r1, [pc, #612]	; (8003dd4 <HAL_RCC_OscConfig+0x330>)
 8003b70:	400a      	ands	r2, r1
 8003b72:	601a      	str	r2, [r3, #0]
 8003b74:	4b96      	ldr	r3, [pc, #600]	; (8003dd0 <HAL_RCC_OscConfig+0x32c>)
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	4b95      	ldr	r3, [pc, #596]	; (8003dd0 <HAL_RCC_OscConfig+0x32c>)
 8003b7a:	4997      	ldr	r1, [pc, #604]	; (8003dd8 <HAL_RCC_OscConfig+0x334>)
 8003b7c:	400a      	ands	r2, r1
 8003b7e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d014      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b88:	f7fe fed8 	bl	800293c <HAL_GetTick>
 8003b8c:	0003      	movs	r3, r0
 8003b8e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b90:	e008      	b.n	8003ba4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b92:	f7fe fed3 	bl	800293c <HAL_GetTick>
 8003b96:	0002      	movs	r2, r0
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	2b64      	cmp	r3, #100	; 0x64
 8003b9e:	d901      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e28a      	b.n	80040ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ba4:	4b8a      	ldr	r3, [pc, #552]	; (8003dd0 <HAL_RCC_OscConfig+0x32c>)
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	2380      	movs	r3, #128	; 0x80
 8003baa:	029b      	lsls	r3, r3, #10
 8003bac:	4013      	ands	r3, r2
 8003bae:	d0f0      	beq.n	8003b92 <HAL_RCC_OscConfig+0xee>
 8003bb0:	e015      	b.n	8003bde <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb2:	f7fe fec3 	bl	800293c <HAL_GetTick>
 8003bb6:	0003      	movs	r3, r0
 8003bb8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bbc:	f7fe febe 	bl	800293c <HAL_GetTick>
 8003bc0:	0002      	movs	r2, r0
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b64      	cmp	r3, #100	; 0x64
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e275      	b.n	80040ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bce:	4b80      	ldr	r3, [pc, #512]	; (8003dd0 <HAL_RCC_OscConfig+0x32c>)
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	2380      	movs	r3, #128	; 0x80
 8003bd4:	029b      	lsls	r3, r3, #10
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	d1f0      	bne.n	8003bbc <HAL_RCC_OscConfig+0x118>
 8003bda:	e000      	b.n	8003bde <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bdc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2202      	movs	r2, #2
 8003be4:	4013      	ands	r3, r2
 8003be6:	d100      	bne.n	8003bea <HAL_RCC_OscConfig+0x146>
 8003be8:	e069      	b.n	8003cbe <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003bea:	4b79      	ldr	r3, [pc, #484]	; (8003dd0 <HAL_RCC_OscConfig+0x32c>)
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	220c      	movs	r2, #12
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	d00b      	beq.n	8003c0c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003bf4:	4b76      	ldr	r3, [pc, #472]	; (8003dd0 <HAL_RCC_OscConfig+0x32c>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	220c      	movs	r2, #12
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	2b08      	cmp	r3, #8
 8003bfe:	d11c      	bne.n	8003c3a <HAL_RCC_OscConfig+0x196>
 8003c00:	4b73      	ldr	r3, [pc, #460]	; (8003dd0 <HAL_RCC_OscConfig+0x32c>)
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	2380      	movs	r3, #128	; 0x80
 8003c06:	025b      	lsls	r3, r3, #9
 8003c08:	4013      	ands	r3, r2
 8003c0a:	d116      	bne.n	8003c3a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c0c:	4b70      	ldr	r3, [pc, #448]	; (8003dd0 <HAL_RCC_OscConfig+0x32c>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2202      	movs	r2, #2
 8003c12:	4013      	ands	r3, r2
 8003c14:	d005      	beq.n	8003c22 <HAL_RCC_OscConfig+0x17e>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d001      	beq.n	8003c22 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e24b      	b.n	80040ba <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c22:	4b6b      	ldr	r3, [pc, #428]	; (8003dd0 <HAL_RCC_OscConfig+0x32c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	22f8      	movs	r2, #248	; 0xf8
 8003c28:	4393      	bics	r3, r2
 8003c2a:	0019      	movs	r1, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	00da      	lsls	r2, r3, #3
 8003c32:	4b67      	ldr	r3, [pc, #412]	; (8003dd0 <HAL_RCC_OscConfig+0x32c>)
 8003c34:	430a      	orrs	r2, r1
 8003c36:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c38:	e041      	b.n	8003cbe <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d024      	beq.n	8003c8c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c42:	4b63      	ldr	r3, [pc, #396]	; (8003dd0 <HAL_RCC_OscConfig+0x32c>)
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	4b62      	ldr	r3, [pc, #392]	; (8003dd0 <HAL_RCC_OscConfig+0x32c>)
 8003c48:	2101      	movs	r1, #1
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c4e:	f7fe fe75 	bl	800293c <HAL_GetTick>
 8003c52:	0003      	movs	r3, r0
 8003c54:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c58:	f7fe fe70 	bl	800293c <HAL_GetTick>
 8003c5c:	0002      	movs	r2, r0
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e227      	b.n	80040ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c6a:	4b59      	ldr	r3, [pc, #356]	; (8003dd0 <HAL_RCC_OscConfig+0x32c>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2202      	movs	r2, #2
 8003c70:	4013      	ands	r3, r2
 8003c72:	d0f1      	beq.n	8003c58 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c74:	4b56      	ldr	r3, [pc, #344]	; (8003dd0 <HAL_RCC_OscConfig+0x32c>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	22f8      	movs	r2, #248	; 0xf8
 8003c7a:	4393      	bics	r3, r2
 8003c7c:	0019      	movs	r1, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	00da      	lsls	r2, r3, #3
 8003c84:	4b52      	ldr	r3, [pc, #328]	; (8003dd0 <HAL_RCC_OscConfig+0x32c>)
 8003c86:	430a      	orrs	r2, r1
 8003c88:	601a      	str	r2, [r3, #0]
 8003c8a:	e018      	b.n	8003cbe <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c8c:	4b50      	ldr	r3, [pc, #320]	; (8003dd0 <HAL_RCC_OscConfig+0x32c>)
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	4b4f      	ldr	r3, [pc, #316]	; (8003dd0 <HAL_RCC_OscConfig+0x32c>)
 8003c92:	2101      	movs	r1, #1
 8003c94:	438a      	bics	r2, r1
 8003c96:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c98:	f7fe fe50 	bl	800293c <HAL_GetTick>
 8003c9c:	0003      	movs	r3, r0
 8003c9e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ca0:	e008      	b.n	8003cb4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ca2:	f7fe fe4b 	bl	800293c <HAL_GetTick>
 8003ca6:	0002      	movs	r2, r0
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d901      	bls.n	8003cb4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e202      	b.n	80040ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cb4:	4b46      	ldr	r3, [pc, #280]	; (8003dd0 <HAL_RCC_OscConfig+0x32c>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2202      	movs	r2, #2
 8003cba:	4013      	ands	r3, r2
 8003cbc:	d1f1      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2208      	movs	r2, #8
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	d036      	beq.n	8003d36 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	69db      	ldr	r3, [r3, #28]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d019      	beq.n	8003d04 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cd0:	4b3f      	ldr	r3, [pc, #252]	; (8003dd0 <HAL_RCC_OscConfig+0x32c>)
 8003cd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cd4:	4b3e      	ldr	r3, [pc, #248]	; (8003dd0 <HAL_RCC_OscConfig+0x32c>)
 8003cd6:	2101      	movs	r1, #1
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cdc:	f7fe fe2e 	bl	800293c <HAL_GetTick>
 8003ce0:	0003      	movs	r3, r0
 8003ce2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ce4:	e008      	b.n	8003cf8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ce6:	f7fe fe29 	bl	800293c <HAL_GetTick>
 8003cea:	0002      	movs	r2, r0
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d901      	bls.n	8003cf8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e1e0      	b.n	80040ba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cf8:	4b35      	ldr	r3, [pc, #212]	; (8003dd0 <HAL_RCC_OscConfig+0x32c>)
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	2202      	movs	r2, #2
 8003cfe:	4013      	ands	r3, r2
 8003d00:	d0f1      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x242>
 8003d02:	e018      	b.n	8003d36 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d04:	4b32      	ldr	r3, [pc, #200]	; (8003dd0 <HAL_RCC_OscConfig+0x32c>)
 8003d06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d08:	4b31      	ldr	r3, [pc, #196]	; (8003dd0 <HAL_RCC_OscConfig+0x32c>)
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	438a      	bics	r2, r1
 8003d0e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d10:	f7fe fe14 	bl	800293c <HAL_GetTick>
 8003d14:	0003      	movs	r3, r0
 8003d16:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d18:	e008      	b.n	8003d2c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d1a:	f7fe fe0f 	bl	800293c <HAL_GetTick>
 8003d1e:	0002      	movs	r2, r0
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d901      	bls.n	8003d2c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e1c6      	b.n	80040ba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d2c:	4b28      	ldr	r3, [pc, #160]	; (8003dd0 <HAL_RCC_OscConfig+0x32c>)
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d30:	2202      	movs	r2, #2
 8003d32:	4013      	ands	r3, r2
 8003d34:	d1f1      	bne.n	8003d1a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2204      	movs	r2, #4
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	d100      	bne.n	8003d42 <HAL_RCC_OscConfig+0x29e>
 8003d40:	e0b4      	b.n	8003eac <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d42:	201f      	movs	r0, #31
 8003d44:	183b      	adds	r3, r7, r0
 8003d46:	2200      	movs	r2, #0
 8003d48:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d4a:	4b21      	ldr	r3, [pc, #132]	; (8003dd0 <HAL_RCC_OscConfig+0x32c>)
 8003d4c:	69da      	ldr	r2, [r3, #28]
 8003d4e:	2380      	movs	r3, #128	; 0x80
 8003d50:	055b      	lsls	r3, r3, #21
 8003d52:	4013      	ands	r3, r2
 8003d54:	d110      	bne.n	8003d78 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d56:	4b1e      	ldr	r3, [pc, #120]	; (8003dd0 <HAL_RCC_OscConfig+0x32c>)
 8003d58:	69da      	ldr	r2, [r3, #28]
 8003d5a:	4b1d      	ldr	r3, [pc, #116]	; (8003dd0 <HAL_RCC_OscConfig+0x32c>)
 8003d5c:	2180      	movs	r1, #128	; 0x80
 8003d5e:	0549      	lsls	r1, r1, #21
 8003d60:	430a      	orrs	r2, r1
 8003d62:	61da      	str	r2, [r3, #28]
 8003d64:	4b1a      	ldr	r3, [pc, #104]	; (8003dd0 <HAL_RCC_OscConfig+0x32c>)
 8003d66:	69da      	ldr	r2, [r3, #28]
 8003d68:	2380      	movs	r3, #128	; 0x80
 8003d6a:	055b      	lsls	r3, r3, #21
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	60fb      	str	r3, [r7, #12]
 8003d70:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003d72:	183b      	adds	r3, r7, r0
 8003d74:	2201      	movs	r2, #1
 8003d76:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d78:	4b18      	ldr	r3, [pc, #96]	; (8003ddc <HAL_RCC_OscConfig+0x338>)
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	2380      	movs	r3, #128	; 0x80
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	4013      	ands	r3, r2
 8003d82:	d11a      	bne.n	8003dba <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d84:	4b15      	ldr	r3, [pc, #84]	; (8003ddc <HAL_RCC_OscConfig+0x338>)
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	4b14      	ldr	r3, [pc, #80]	; (8003ddc <HAL_RCC_OscConfig+0x338>)
 8003d8a:	2180      	movs	r1, #128	; 0x80
 8003d8c:	0049      	lsls	r1, r1, #1
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d92:	f7fe fdd3 	bl	800293c <HAL_GetTick>
 8003d96:	0003      	movs	r3, r0
 8003d98:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d9c:	f7fe fdce 	bl	800293c <HAL_GetTick>
 8003da0:	0002      	movs	r2, r0
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b64      	cmp	r3, #100	; 0x64
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e185      	b.n	80040ba <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dae:	4b0b      	ldr	r3, [pc, #44]	; (8003ddc <HAL_RCC_OscConfig+0x338>)
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	2380      	movs	r3, #128	; 0x80
 8003db4:	005b      	lsls	r3, r3, #1
 8003db6:	4013      	ands	r3, r2
 8003db8:	d0f0      	beq.n	8003d9c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d10e      	bne.n	8003de0 <HAL_RCC_OscConfig+0x33c>
 8003dc2:	4b03      	ldr	r3, [pc, #12]	; (8003dd0 <HAL_RCC_OscConfig+0x32c>)
 8003dc4:	6a1a      	ldr	r2, [r3, #32]
 8003dc6:	4b02      	ldr	r3, [pc, #8]	; (8003dd0 <HAL_RCC_OscConfig+0x32c>)
 8003dc8:	2101      	movs	r1, #1
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	621a      	str	r2, [r3, #32]
 8003dce:	e035      	b.n	8003e3c <HAL_RCC_OscConfig+0x398>
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	fffeffff 	.word	0xfffeffff
 8003dd8:	fffbffff 	.word	0xfffbffff
 8003ddc:	40007000 	.word	0x40007000
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d10c      	bne.n	8003e02 <HAL_RCC_OscConfig+0x35e>
 8003de8:	4bb6      	ldr	r3, [pc, #728]	; (80040c4 <HAL_RCC_OscConfig+0x620>)
 8003dea:	6a1a      	ldr	r2, [r3, #32]
 8003dec:	4bb5      	ldr	r3, [pc, #724]	; (80040c4 <HAL_RCC_OscConfig+0x620>)
 8003dee:	2101      	movs	r1, #1
 8003df0:	438a      	bics	r2, r1
 8003df2:	621a      	str	r2, [r3, #32]
 8003df4:	4bb3      	ldr	r3, [pc, #716]	; (80040c4 <HAL_RCC_OscConfig+0x620>)
 8003df6:	6a1a      	ldr	r2, [r3, #32]
 8003df8:	4bb2      	ldr	r3, [pc, #712]	; (80040c4 <HAL_RCC_OscConfig+0x620>)
 8003dfa:	2104      	movs	r1, #4
 8003dfc:	438a      	bics	r2, r1
 8003dfe:	621a      	str	r2, [r3, #32]
 8003e00:	e01c      	b.n	8003e3c <HAL_RCC_OscConfig+0x398>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	2b05      	cmp	r3, #5
 8003e08:	d10c      	bne.n	8003e24 <HAL_RCC_OscConfig+0x380>
 8003e0a:	4bae      	ldr	r3, [pc, #696]	; (80040c4 <HAL_RCC_OscConfig+0x620>)
 8003e0c:	6a1a      	ldr	r2, [r3, #32]
 8003e0e:	4bad      	ldr	r3, [pc, #692]	; (80040c4 <HAL_RCC_OscConfig+0x620>)
 8003e10:	2104      	movs	r1, #4
 8003e12:	430a      	orrs	r2, r1
 8003e14:	621a      	str	r2, [r3, #32]
 8003e16:	4bab      	ldr	r3, [pc, #684]	; (80040c4 <HAL_RCC_OscConfig+0x620>)
 8003e18:	6a1a      	ldr	r2, [r3, #32]
 8003e1a:	4baa      	ldr	r3, [pc, #680]	; (80040c4 <HAL_RCC_OscConfig+0x620>)
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	621a      	str	r2, [r3, #32]
 8003e22:	e00b      	b.n	8003e3c <HAL_RCC_OscConfig+0x398>
 8003e24:	4ba7      	ldr	r3, [pc, #668]	; (80040c4 <HAL_RCC_OscConfig+0x620>)
 8003e26:	6a1a      	ldr	r2, [r3, #32]
 8003e28:	4ba6      	ldr	r3, [pc, #664]	; (80040c4 <HAL_RCC_OscConfig+0x620>)
 8003e2a:	2101      	movs	r1, #1
 8003e2c:	438a      	bics	r2, r1
 8003e2e:	621a      	str	r2, [r3, #32]
 8003e30:	4ba4      	ldr	r3, [pc, #656]	; (80040c4 <HAL_RCC_OscConfig+0x620>)
 8003e32:	6a1a      	ldr	r2, [r3, #32]
 8003e34:	4ba3      	ldr	r3, [pc, #652]	; (80040c4 <HAL_RCC_OscConfig+0x620>)
 8003e36:	2104      	movs	r1, #4
 8003e38:	438a      	bics	r2, r1
 8003e3a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d014      	beq.n	8003e6e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e44:	f7fe fd7a 	bl	800293c <HAL_GetTick>
 8003e48:	0003      	movs	r3, r0
 8003e4a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e4c:	e009      	b.n	8003e62 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e4e:	f7fe fd75 	bl	800293c <HAL_GetTick>
 8003e52:	0002      	movs	r2, r0
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	4a9b      	ldr	r2, [pc, #620]	; (80040c8 <HAL_RCC_OscConfig+0x624>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e12b      	b.n	80040ba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e62:	4b98      	ldr	r3, [pc, #608]	; (80040c4 <HAL_RCC_OscConfig+0x620>)
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	2202      	movs	r2, #2
 8003e68:	4013      	ands	r3, r2
 8003e6a:	d0f0      	beq.n	8003e4e <HAL_RCC_OscConfig+0x3aa>
 8003e6c:	e013      	b.n	8003e96 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e6e:	f7fe fd65 	bl	800293c <HAL_GetTick>
 8003e72:	0003      	movs	r3, r0
 8003e74:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e76:	e009      	b.n	8003e8c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e78:	f7fe fd60 	bl	800293c <HAL_GetTick>
 8003e7c:	0002      	movs	r2, r0
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	4a91      	ldr	r2, [pc, #580]	; (80040c8 <HAL_RCC_OscConfig+0x624>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d901      	bls.n	8003e8c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e116      	b.n	80040ba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e8c:	4b8d      	ldr	r3, [pc, #564]	; (80040c4 <HAL_RCC_OscConfig+0x620>)
 8003e8e:	6a1b      	ldr	r3, [r3, #32]
 8003e90:	2202      	movs	r2, #2
 8003e92:	4013      	ands	r3, r2
 8003e94:	d1f0      	bne.n	8003e78 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e96:	231f      	movs	r3, #31
 8003e98:	18fb      	adds	r3, r7, r3
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d105      	bne.n	8003eac <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ea0:	4b88      	ldr	r3, [pc, #544]	; (80040c4 <HAL_RCC_OscConfig+0x620>)
 8003ea2:	69da      	ldr	r2, [r3, #28]
 8003ea4:	4b87      	ldr	r3, [pc, #540]	; (80040c4 <HAL_RCC_OscConfig+0x620>)
 8003ea6:	4989      	ldr	r1, [pc, #548]	; (80040cc <HAL_RCC_OscConfig+0x628>)
 8003ea8:	400a      	ands	r2, r1
 8003eaa:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2210      	movs	r2, #16
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	d063      	beq.n	8003f7e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d12a      	bne.n	8003f14 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003ebe:	4b81      	ldr	r3, [pc, #516]	; (80040c4 <HAL_RCC_OscConfig+0x620>)
 8003ec0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ec2:	4b80      	ldr	r3, [pc, #512]	; (80040c4 <HAL_RCC_OscConfig+0x620>)
 8003ec4:	2104      	movs	r1, #4
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003eca:	4b7e      	ldr	r3, [pc, #504]	; (80040c4 <HAL_RCC_OscConfig+0x620>)
 8003ecc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ece:	4b7d      	ldr	r3, [pc, #500]	; (80040c4 <HAL_RCC_OscConfig+0x620>)
 8003ed0:	2101      	movs	r1, #1
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ed6:	f7fe fd31 	bl	800293c <HAL_GetTick>
 8003eda:	0003      	movs	r3, r0
 8003edc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003ede:	e008      	b.n	8003ef2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003ee0:	f7fe fd2c 	bl	800293c <HAL_GetTick>
 8003ee4:	0002      	movs	r2, r0
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e0e3      	b.n	80040ba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003ef2:	4b74      	ldr	r3, [pc, #464]	; (80040c4 <HAL_RCC_OscConfig+0x620>)
 8003ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef6:	2202      	movs	r2, #2
 8003ef8:	4013      	ands	r3, r2
 8003efa:	d0f1      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003efc:	4b71      	ldr	r3, [pc, #452]	; (80040c4 <HAL_RCC_OscConfig+0x620>)
 8003efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f00:	22f8      	movs	r2, #248	; 0xf8
 8003f02:	4393      	bics	r3, r2
 8003f04:	0019      	movs	r1, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	00da      	lsls	r2, r3, #3
 8003f0c:	4b6d      	ldr	r3, [pc, #436]	; (80040c4 <HAL_RCC_OscConfig+0x620>)
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	635a      	str	r2, [r3, #52]	; 0x34
 8003f12:	e034      	b.n	8003f7e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	3305      	adds	r3, #5
 8003f1a:	d111      	bne.n	8003f40 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003f1c:	4b69      	ldr	r3, [pc, #420]	; (80040c4 <HAL_RCC_OscConfig+0x620>)
 8003f1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f20:	4b68      	ldr	r3, [pc, #416]	; (80040c4 <HAL_RCC_OscConfig+0x620>)
 8003f22:	2104      	movs	r1, #4
 8003f24:	438a      	bics	r2, r1
 8003f26:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003f28:	4b66      	ldr	r3, [pc, #408]	; (80040c4 <HAL_RCC_OscConfig+0x620>)
 8003f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f2c:	22f8      	movs	r2, #248	; 0xf8
 8003f2e:	4393      	bics	r3, r2
 8003f30:	0019      	movs	r1, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	00da      	lsls	r2, r3, #3
 8003f38:	4b62      	ldr	r3, [pc, #392]	; (80040c4 <HAL_RCC_OscConfig+0x620>)
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	635a      	str	r2, [r3, #52]	; 0x34
 8003f3e:	e01e      	b.n	8003f7e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003f40:	4b60      	ldr	r3, [pc, #384]	; (80040c4 <HAL_RCC_OscConfig+0x620>)
 8003f42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f44:	4b5f      	ldr	r3, [pc, #380]	; (80040c4 <HAL_RCC_OscConfig+0x620>)
 8003f46:	2104      	movs	r1, #4
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003f4c:	4b5d      	ldr	r3, [pc, #372]	; (80040c4 <HAL_RCC_OscConfig+0x620>)
 8003f4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f50:	4b5c      	ldr	r3, [pc, #368]	; (80040c4 <HAL_RCC_OscConfig+0x620>)
 8003f52:	2101      	movs	r1, #1
 8003f54:	438a      	bics	r2, r1
 8003f56:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f58:	f7fe fcf0 	bl	800293c <HAL_GetTick>
 8003f5c:	0003      	movs	r3, r0
 8003f5e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003f60:	e008      	b.n	8003f74 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003f62:	f7fe fceb 	bl	800293c <HAL_GetTick>
 8003f66:	0002      	movs	r2, r0
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d901      	bls.n	8003f74 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e0a2      	b.n	80040ba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003f74:	4b53      	ldr	r3, [pc, #332]	; (80040c4 <HAL_RCC_OscConfig+0x620>)
 8003f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f78:	2202      	movs	r2, #2
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	d1f1      	bne.n	8003f62 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d100      	bne.n	8003f88 <HAL_RCC_OscConfig+0x4e4>
 8003f86:	e097      	b.n	80040b8 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f88:	4b4e      	ldr	r3, [pc, #312]	; (80040c4 <HAL_RCC_OscConfig+0x620>)
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	220c      	movs	r2, #12
 8003f8e:	4013      	ands	r3, r2
 8003f90:	2b08      	cmp	r3, #8
 8003f92:	d100      	bne.n	8003f96 <HAL_RCC_OscConfig+0x4f2>
 8003f94:	e06b      	b.n	800406e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d14c      	bne.n	8004038 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f9e:	4b49      	ldr	r3, [pc, #292]	; (80040c4 <HAL_RCC_OscConfig+0x620>)
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	4b48      	ldr	r3, [pc, #288]	; (80040c4 <HAL_RCC_OscConfig+0x620>)
 8003fa4:	494a      	ldr	r1, [pc, #296]	; (80040d0 <HAL_RCC_OscConfig+0x62c>)
 8003fa6:	400a      	ands	r2, r1
 8003fa8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003faa:	f7fe fcc7 	bl	800293c <HAL_GetTick>
 8003fae:	0003      	movs	r3, r0
 8003fb0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fb2:	e008      	b.n	8003fc6 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fb4:	f7fe fcc2 	bl	800293c <HAL_GetTick>
 8003fb8:	0002      	movs	r2, r0
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e079      	b.n	80040ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fc6:	4b3f      	ldr	r3, [pc, #252]	; (80040c4 <HAL_RCC_OscConfig+0x620>)
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	2380      	movs	r3, #128	; 0x80
 8003fcc:	049b      	lsls	r3, r3, #18
 8003fce:	4013      	ands	r3, r2
 8003fd0:	d1f0      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fd2:	4b3c      	ldr	r3, [pc, #240]	; (80040c4 <HAL_RCC_OscConfig+0x620>)
 8003fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd6:	220f      	movs	r2, #15
 8003fd8:	4393      	bics	r3, r2
 8003fda:	0019      	movs	r1, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fe0:	4b38      	ldr	r3, [pc, #224]	; (80040c4 <HAL_RCC_OscConfig+0x620>)
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	62da      	str	r2, [r3, #44]	; 0x2c
 8003fe6:	4b37      	ldr	r3, [pc, #220]	; (80040c4 <HAL_RCC_OscConfig+0x620>)
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	4a3a      	ldr	r2, [pc, #232]	; (80040d4 <HAL_RCC_OscConfig+0x630>)
 8003fec:	4013      	ands	r3, r2
 8003fee:	0019      	movs	r1, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff8:	431a      	orrs	r2, r3
 8003ffa:	4b32      	ldr	r3, [pc, #200]	; (80040c4 <HAL_RCC_OscConfig+0x620>)
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004000:	4b30      	ldr	r3, [pc, #192]	; (80040c4 <HAL_RCC_OscConfig+0x620>)
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	4b2f      	ldr	r3, [pc, #188]	; (80040c4 <HAL_RCC_OscConfig+0x620>)
 8004006:	2180      	movs	r1, #128	; 0x80
 8004008:	0449      	lsls	r1, r1, #17
 800400a:	430a      	orrs	r2, r1
 800400c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800400e:	f7fe fc95 	bl	800293c <HAL_GetTick>
 8004012:	0003      	movs	r3, r0
 8004014:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004016:	e008      	b.n	800402a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004018:	f7fe fc90 	bl	800293c <HAL_GetTick>
 800401c:	0002      	movs	r2, r0
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b02      	cmp	r3, #2
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e047      	b.n	80040ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800402a:	4b26      	ldr	r3, [pc, #152]	; (80040c4 <HAL_RCC_OscConfig+0x620>)
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	2380      	movs	r3, #128	; 0x80
 8004030:	049b      	lsls	r3, r3, #18
 8004032:	4013      	ands	r3, r2
 8004034:	d0f0      	beq.n	8004018 <HAL_RCC_OscConfig+0x574>
 8004036:	e03f      	b.n	80040b8 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004038:	4b22      	ldr	r3, [pc, #136]	; (80040c4 <HAL_RCC_OscConfig+0x620>)
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	4b21      	ldr	r3, [pc, #132]	; (80040c4 <HAL_RCC_OscConfig+0x620>)
 800403e:	4924      	ldr	r1, [pc, #144]	; (80040d0 <HAL_RCC_OscConfig+0x62c>)
 8004040:	400a      	ands	r2, r1
 8004042:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004044:	f7fe fc7a 	bl	800293c <HAL_GetTick>
 8004048:	0003      	movs	r3, r0
 800404a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800404c:	e008      	b.n	8004060 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800404e:	f7fe fc75 	bl	800293c <HAL_GetTick>
 8004052:	0002      	movs	r2, r0
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	2b02      	cmp	r3, #2
 800405a:	d901      	bls.n	8004060 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e02c      	b.n	80040ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004060:	4b18      	ldr	r3, [pc, #96]	; (80040c4 <HAL_RCC_OscConfig+0x620>)
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	2380      	movs	r3, #128	; 0x80
 8004066:	049b      	lsls	r3, r3, #18
 8004068:	4013      	ands	r3, r2
 800406a:	d1f0      	bne.n	800404e <HAL_RCC_OscConfig+0x5aa>
 800406c:	e024      	b.n	80040b8 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	2b01      	cmp	r3, #1
 8004074:	d101      	bne.n	800407a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e01f      	b.n	80040ba <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800407a:	4b12      	ldr	r3, [pc, #72]	; (80040c4 <HAL_RCC_OscConfig+0x620>)
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004080:	4b10      	ldr	r3, [pc, #64]	; (80040c4 <HAL_RCC_OscConfig+0x620>)
 8004082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004084:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	2380      	movs	r3, #128	; 0x80
 800408a:	025b      	lsls	r3, r3, #9
 800408c:	401a      	ands	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004092:	429a      	cmp	r2, r3
 8004094:	d10e      	bne.n	80040b4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	220f      	movs	r2, #15
 800409a:	401a      	ands	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d107      	bne.n	80040b4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	23f0      	movs	r3, #240	; 0xf0
 80040a8:	039b      	lsls	r3, r3, #14
 80040aa:	401a      	ands	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d001      	beq.n	80040b8 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e000      	b.n	80040ba <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	0018      	movs	r0, r3
 80040bc:	46bd      	mov	sp, r7
 80040be:	b008      	add	sp, #32
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	46c0      	nop			; (mov r8, r8)
 80040c4:	40021000 	.word	0x40021000
 80040c8:	00001388 	.word	0x00001388
 80040cc:	efffffff 	.word	0xefffffff
 80040d0:	feffffff 	.word	0xfeffffff
 80040d4:	ffc2ffff 	.word	0xffc2ffff

080040d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d101      	bne.n	80040ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e0b3      	b.n	8004254 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040ec:	4b5b      	ldr	r3, [pc, #364]	; (800425c <HAL_RCC_ClockConfig+0x184>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2201      	movs	r2, #1
 80040f2:	4013      	ands	r3, r2
 80040f4:	683a      	ldr	r2, [r7, #0]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d911      	bls.n	800411e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040fa:	4b58      	ldr	r3, [pc, #352]	; (800425c <HAL_RCC_ClockConfig+0x184>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2201      	movs	r2, #1
 8004100:	4393      	bics	r3, r2
 8004102:	0019      	movs	r1, r3
 8004104:	4b55      	ldr	r3, [pc, #340]	; (800425c <HAL_RCC_ClockConfig+0x184>)
 8004106:	683a      	ldr	r2, [r7, #0]
 8004108:	430a      	orrs	r2, r1
 800410a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800410c:	4b53      	ldr	r3, [pc, #332]	; (800425c <HAL_RCC_ClockConfig+0x184>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2201      	movs	r2, #1
 8004112:	4013      	ands	r3, r2
 8004114:	683a      	ldr	r2, [r7, #0]
 8004116:	429a      	cmp	r2, r3
 8004118:	d001      	beq.n	800411e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e09a      	b.n	8004254 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2202      	movs	r2, #2
 8004124:	4013      	ands	r3, r2
 8004126:	d015      	beq.n	8004154 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2204      	movs	r2, #4
 800412e:	4013      	ands	r3, r2
 8004130:	d006      	beq.n	8004140 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004132:	4b4b      	ldr	r3, [pc, #300]	; (8004260 <HAL_RCC_ClockConfig+0x188>)
 8004134:	685a      	ldr	r2, [r3, #4]
 8004136:	4b4a      	ldr	r3, [pc, #296]	; (8004260 <HAL_RCC_ClockConfig+0x188>)
 8004138:	21e0      	movs	r1, #224	; 0xe0
 800413a:	00c9      	lsls	r1, r1, #3
 800413c:	430a      	orrs	r2, r1
 800413e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004140:	4b47      	ldr	r3, [pc, #284]	; (8004260 <HAL_RCC_ClockConfig+0x188>)
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	22f0      	movs	r2, #240	; 0xf0
 8004146:	4393      	bics	r3, r2
 8004148:	0019      	movs	r1, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	689a      	ldr	r2, [r3, #8]
 800414e:	4b44      	ldr	r3, [pc, #272]	; (8004260 <HAL_RCC_ClockConfig+0x188>)
 8004150:	430a      	orrs	r2, r1
 8004152:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2201      	movs	r2, #1
 800415a:	4013      	ands	r3, r2
 800415c:	d040      	beq.n	80041e0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d107      	bne.n	8004176 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004166:	4b3e      	ldr	r3, [pc, #248]	; (8004260 <HAL_RCC_ClockConfig+0x188>)
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	2380      	movs	r3, #128	; 0x80
 800416c:	029b      	lsls	r3, r3, #10
 800416e:	4013      	ands	r3, r2
 8004170:	d114      	bne.n	800419c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e06e      	b.n	8004254 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	2b02      	cmp	r3, #2
 800417c:	d107      	bne.n	800418e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800417e:	4b38      	ldr	r3, [pc, #224]	; (8004260 <HAL_RCC_ClockConfig+0x188>)
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	2380      	movs	r3, #128	; 0x80
 8004184:	049b      	lsls	r3, r3, #18
 8004186:	4013      	ands	r3, r2
 8004188:	d108      	bne.n	800419c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e062      	b.n	8004254 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800418e:	4b34      	ldr	r3, [pc, #208]	; (8004260 <HAL_RCC_ClockConfig+0x188>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2202      	movs	r2, #2
 8004194:	4013      	ands	r3, r2
 8004196:	d101      	bne.n	800419c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e05b      	b.n	8004254 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800419c:	4b30      	ldr	r3, [pc, #192]	; (8004260 <HAL_RCC_ClockConfig+0x188>)
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	2203      	movs	r2, #3
 80041a2:	4393      	bics	r3, r2
 80041a4:	0019      	movs	r1, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	4b2d      	ldr	r3, [pc, #180]	; (8004260 <HAL_RCC_ClockConfig+0x188>)
 80041ac:	430a      	orrs	r2, r1
 80041ae:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041b0:	f7fe fbc4 	bl	800293c <HAL_GetTick>
 80041b4:	0003      	movs	r3, r0
 80041b6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041b8:	e009      	b.n	80041ce <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041ba:	f7fe fbbf 	bl	800293c <HAL_GetTick>
 80041be:	0002      	movs	r2, r0
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	4a27      	ldr	r2, [pc, #156]	; (8004264 <HAL_RCC_ClockConfig+0x18c>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e042      	b.n	8004254 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ce:	4b24      	ldr	r3, [pc, #144]	; (8004260 <HAL_RCC_ClockConfig+0x188>)
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	220c      	movs	r2, #12
 80041d4:	401a      	ands	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	429a      	cmp	r2, r3
 80041de:	d1ec      	bne.n	80041ba <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041e0:	4b1e      	ldr	r3, [pc, #120]	; (800425c <HAL_RCC_ClockConfig+0x184>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2201      	movs	r2, #1
 80041e6:	4013      	ands	r3, r2
 80041e8:	683a      	ldr	r2, [r7, #0]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d211      	bcs.n	8004212 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ee:	4b1b      	ldr	r3, [pc, #108]	; (800425c <HAL_RCC_ClockConfig+0x184>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2201      	movs	r2, #1
 80041f4:	4393      	bics	r3, r2
 80041f6:	0019      	movs	r1, r3
 80041f8:	4b18      	ldr	r3, [pc, #96]	; (800425c <HAL_RCC_ClockConfig+0x184>)
 80041fa:	683a      	ldr	r2, [r7, #0]
 80041fc:	430a      	orrs	r2, r1
 80041fe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004200:	4b16      	ldr	r3, [pc, #88]	; (800425c <HAL_RCC_ClockConfig+0x184>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2201      	movs	r2, #1
 8004206:	4013      	ands	r3, r2
 8004208:	683a      	ldr	r2, [r7, #0]
 800420a:	429a      	cmp	r2, r3
 800420c:	d001      	beq.n	8004212 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e020      	b.n	8004254 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2204      	movs	r2, #4
 8004218:	4013      	ands	r3, r2
 800421a:	d009      	beq.n	8004230 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800421c:	4b10      	ldr	r3, [pc, #64]	; (8004260 <HAL_RCC_ClockConfig+0x188>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	4a11      	ldr	r2, [pc, #68]	; (8004268 <HAL_RCC_ClockConfig+0x190>)
 8004222:	4013      	ands	r3, r2
 8004224:	0019      	movs	r1, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68da      	ldr	r2, [r3, #12]
 800422a:	4b0d      	ldr	r3, [pc, #52]	; (8004260 <HAL_RCC_ClockConfig+0x188>)
 800422c:	430a      	orrs	r2, r1
 800422e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004230:	f000 f820 	bl	8004274 <HAL_RCC_GetSysClockFreq>
 8004234:	0001      	movs	r1, r0
 8004236:	4b0a      	ldr	r3, [pc, #40]	; (8004260 <HAL_RCC_ClockConfig+0x188>)
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	091b      	lsrs	r3, r3, #4
 800423c:	220f      	movs	r2, #15
 800423e:	4013      	ands	r3, r2
 8004240:	4a0a      	ldr	r2, [pc, #40]	; (800426c <HAL_RCC_ClockConfig+0x194>)
 8004242:	5cd3      	ldrb	r3, [r2, r3]
 8004244:	000a      	movs	r2, r1
 8004246:	40da      	lsrs	r2, r3
 8004248:	4b09      	ldr	r3, [pc, #36]	; (8004270 <HAL_RCC_ClockConfig+0x198>)
 800424a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800424c:	2003      	movs	r0, #3
 800424e:	f7fe fb2f 	bl	80028b0 <HAL_InitTick>
  
  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	0018      	movs	r0, r3
 8004256:	46bd      	mov	sp, r7
 8004258:	b004      	add	sp, #16
 800425a:	bd80      	pop	{r7, pc}
 800425c:	40022000 	.word	0x40022000
 8004260:	40021000 	.word	0x40021000
 8004264:	00001388 	.word	0x00001388
 8004268:	fffff8ff 	.word	0xfffff8ff
 800426c:	08005dac 	.word	0x08005dac
 8004270:	2000000c 	.word	0x2000000c

08004274 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004274:	b590      	push	{r4, r7, lr}
 8004276:	b08f      	sub	sp, #60	; 0x3c
 8004278:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800427a:	2314      	movs	r3, #20
 800427c:	18fb      	adds	r3, r7, r3
 800427e:	4a2b      	ldr	r2, [pc, #172]	; (800432c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004280:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004282:	c313      	stmia	r3!, {r0, r1, r4}
 8004284:	6812      	ldr	r2, [r2, #0]
 8004286:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004288:	1d3b      	adds	r3, r7, #4
 800428a:	4a29      	ldr	r2, [pc, #164]	; (8004330 <HAL_RCC_GetSysClockFreq+0xbc>)
 800428c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800428e:	c313      	stmia	r3!, {r0, r1, r4}
 8004290:	6812      	ldr	r2, [r2, #0]
 8004292:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004294:	2300      	movs	r3, #0
 8004296:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004298:	2300      	movs	r3, #0
 800429a:	62bb      	str	r3, [r7, #40]	; 0x28
 800429c:	2300      	movs	r3, #0
 800429e:	637b      	str	r3, [r7, #52]	; 0x34
 80042a0:	2300      	movs	r3, #0
 80042a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80042a4:	2300      	movs	r3, #0
 80042a6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80042a8:	4b22      	ldr	r3, [pc, #136]	; (8004334 <HAL_RCC_GetSysClockFreq+0xc0>)
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80042ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b0:	220c      	movs	r2, #12
 80042b2:	4013      	ands	r3, r2
 80042b4:	2b04      	cmp	r3, #4
 80042b6:	d002      	beq.n	80042be <HAL_RCC_GetSysClockFreq+0x4a>
 80042b8:	2b08      	cmp	r3, #8
 80042ba:	d003      	beq.n	80042c4 <HAL_RCC_GetSysClockFreq+0x50>
 80042bc:	e02d      	b.n	800431a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80042be:	4b1e      	ldr	r3, [pc, #120]	; (8004338 <HAL_RCC_GetSysClockFreq+0xc4>)
 80042c0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80042c2:	e02d      	b.n	8004320 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80042c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c6:	0c9b      	lsrs	r3, r3, #18
 80042c8:	220f      	movs	r2, #15
 80042ca:	4013      	ands	r3, r2
 80042cc:	2214      	movs	r2, #20
 80042ce:	18ba      	adds	r2, r7, r2
 80042d0:	5cd3      	ldrb	r3, [r2, r3]
 80042d2:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80042d4:	4b17      	ldr	r3, [pc, #92]	; (8004334 <HAL_RCC_GetSysClockFreq+0xc0>)
 80042d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d8:	220f      	movs	r2, #15
 80042da:	4013      	ands	r3, r2
 80042dc:	1d3a      	adds	r2, r7, #4
 80042de:	5cd3      	ldrb	r3, [r2, r3]
 80042e0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80042e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042e4:	2380      	movs	r3, #128	; 0x80
 80042e6:	025b      	lsls	r3, r3, #9
 80042e8:	4013      	ands	r3, r2
 80042ea:	d009      	beq.n	8004300 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80042ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042ee:	4812      	ldr	r0, [pc, #72]	; (8004338 <HAL_RCC_GetSysClockFreq+0xc4>)
 80042f0:	f7fb ff14 	bl	800011c <__udivsi3>
 80042f4:	0003      	movs	r3, r0
 80042f6:	001a      	movs	r2, r3
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fa:	4353      	muls	r3, r2
 80042fc:	637b      	str	r3, [r7, #52]	; 0x34
 80042fe:	e009      	b.n	8004314 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004300:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004302:	000a      	movs	r2, r1
 8004304:	0152      	lsls	r2, r2, #5
 8004306:	1a52      	subs	r2, r2, r1
 8004308:	0193      	lsls	r3, r2, #6
 800430a:	1a9b      	subs	r3, r3, r2
 800430c:	00db      	lsls	r3, r3, #3
 800430e:	185b      	adds	r3, r3, r1
 8004310:	021b      	lsls	r3, r3, #8
 8004312:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8004314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004316:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004318:	e002      	b.n	8004320 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800431a:	4b07      	ldr	r3, [pc, #28]	; (8004338 <HAL_RCC_GetSysClockFreq+0xc4>)
 800431c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800431e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004322:	0018      	movs	r0, r3
 8004324:	46bd      	mov	sp, r7
 8004326:	b00f      	add	sp, #60	; 0x3c
 8004328:	bd90      	pop	{r4, r7, pc}
 800432a:	46c0      	nop			; (mov r8, r8)
 800432c:	08005cc4 	.word	0x08005cc4
 8004330:	08005cd4 	.word	0x08005cd4
 8004334:	40021000 	.word	0x40021000
 8004338:	007a1200 	.word	0x007a1200

0800433c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004340:	4b02      	ldr	r3, [pc, #8]	; (800434c <HAL_RCC_GetHCLKFreq+0x10>)
 8004342:	681b      	ldr	r3, [r3, #0]
}
 8004344:	0018      	movs	r0, r3
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	46c0      	nop			; (mov r8, r8)
 800434c:	2000000c 	.word	0x2000000c

08004350 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004354:	f7ff fff2 	bl	800433c <HAL_RCC_GetHCLKFreq>
 8004358:	0001      	movs	r1, r0
 800435a:	4b06      	ldr	r3, [pc, #24]	; (8004374 <HAL_RCC_GetPCLK1Freq+0x24>)
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	0a1b      	lsrs	r3, r3, #8
 8004360:	2207      	movs	r2, #7
 8004362:	4013      	ands	r3, r2
 8004364:	4a04      	ldr	r2, [pc, #16]	; (8004378 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004366:	5cd3      	ldrb	r3, [r2, r3]
 8004368:	40d9      	lsrs	r1, r3
 800436a:	000b      	movs	r3, r1
}    
 800436c:	0018      	movs	r0, r3
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	46c0      	nop			; (mov r8, r8)
 8004374:	40021000 	.word	0x40021000
 8004378:	08005dbc 	.word	0x08005dbc

0800437c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004384:	2300      	movs	r3, #0
 8004386:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004388:	2300      	movs	r3, #0
 800438a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	2380      	movs	r3, #128	; 0x80
 8004392:	025b      	lsls	r3, r3, #9
 8004394:	4013      	ands	r3, r2
 8004396:	d100      	bne.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004398:	e08e      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800439a:	2017      	movs	r0, #23
 800439c:	183b      	adds	r3, r7, r0
 800439e:	2200      	movs	r2, #0
 80043a0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043a2:	4b57      	ldr	r3, [pc, #348]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80043a4:	69da      	ldr	r2, [r3, #28]
 80043a6:	2380      	movs	r3, #128	; 0x80
 80043a8:	055b      	lsls	r3, r3, #21
 80043aa:	4013      	ands	r3, r2
 80043ac:	d110      	bne.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80043ae:	4b54      	ldr	r3, [pc, #336]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80043b0:	69da      	ldr	r2, [r3, #28]
 80043b2:	4b53      	ldr	r3, [pc, #332]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80043b4:	2180      	movs	r1, #128	; 0x80
 80043b6:	0549      	lsls	r1, r1, #21
 80043b8:	430a      	orrs	r2, r1
 80043ba:	61da      	str	r2, [r3, #28]
 80043bc:	4b50      	ldr	r3, [pc, #320]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80043be:	69da      	ldr	r2, [r3, #28]
 80043c0:	2380      	movs	r3, #128	; 0x80
 80043c2:	055b      	lsls	r3, r3, #21
 80043c4:	4013      	ands	r3, r2
 80043c6:	60bb      	str	r3, [r7, #8]
 80043c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043ca:	183b      	adds	r3, r7, r0
 80043cc:	2201      	movs	r2, #1
 80043ce:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043d0:	4b4c      	ldr	r3, [pc, #304]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	2380      	movs	r3, #128	; 0x80
 80043d6:	005b      	lsls	r3, r3, #1
 80043d8:	4013      	ands	r3, r2
 80043da:	d11a      	bne.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043dc:	4b49      	ldr	r3, [pc, #292]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	4b48      	ldr	r3, [pc, #288]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80043e2:	2180      	movs	r1, #128	; 0x80
 80043e4:	0049      	lsls	r1, r1, #1
 80043e6:	430a      	orrs	r2, r1
 80043e8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043ea:	f7fe faa7 	bl	800293c <HAL_GetTick>
 80043ee:	0003      	movs	r3, r0
 80043f0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043f2:	e008      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043f4:	f7fe faa2 	bl	800293c <HAL_GetTick>
 80043f8:	0002      	movs	r2, r0
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b64      	cmp	r3, #100	; 0x64
 8004400:	d901      	bls.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e077      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004406:	4b3f      	ldr	r3, [pc, #252]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	2380      	movs	r3, #128	; 0x80
 800440c:	005b      	lsls	r3, r3, #1
 800440e:	4013      	ands	r3, r2
 8004410:	d0f0      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004412:	4b3b      	ldr	r3, [pc, #236]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004414:	6a1a      	ldr	r2, [r3, #32]
 8004416:	23c0      	movs	r3, #192	; 0xc0
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	4013      	ands	r3, r2
 800441c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d034      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685a      	ldr	r2, [r3, #4]
 8004428:	23c0      	movs	r3, #192	; 0xc0
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	4013      	ands	r3, r2
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	429a      	cmp	r2, r3
 8004432:	d02c      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004434:	4b32      	ldr	r3, [pc, #200]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	4a33      	ldr	r2, [pc, #204]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800443a:	4013      	ands	r3, r2
 800443c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800443e:	4b30      	ldr	r3, [pc, #192]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004440:	6a1a      	ldr	r2, [r3, #32]
 8004442:	4b2f      	ldr	r3, [pc, #188]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004444:	2180      	movs	r1, #128	; 0x80
 8004446:	0249      	lsls	r1, r1, #9
 8004448:	430a      	orrs	r2, r1
 800444a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800444c:	4b2c      	ldr	r3, [pc, #176]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800444e:	6a1a      	ldr	r2, [r3, #32]
 8004450:	4b2b      	ldr	r3, [pc, #172]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004452:	492e      	ldr	r1, [pc, #184]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004454:	400a      	ands	r2, r1
 8004456:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004458:	4b29      	ldr	r3, [pc, #164]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2201      	movs	r2, #1
 8004462:	4013      	ands	r3, r2
 8004464:	d013      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004466:	f7fe fa69 	bl	800293c <HAL_GetTick>
 800446a:	0003      	movs	r3, r0
 800446c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800446e:	e009      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004470:	f7fe fa64 	bl	800293c <HAL_GetTick>
 8004474:	0002      	movs	r2, r0
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	4a25      	ldr	r2, [pc, #148]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d901      	bls.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e038      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004484:	4b1e      	ldr	r3, [pc, #120]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004486:	6a1b      	ldr	r3, [r3, #32]
 8004488:	2202      	movs	r2, #2
 800448a:	4013      	ands	r3, r2
 800448c:	d0f0      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800448e:	4b1c      	ldr	r3, [pc, #112]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	4a1d      	ldr	r2, [pc, #116]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004494:	4013      	ands	r3, r2
 8004496:	0019      	movs	r1, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685a      	ldr	r2, [r3, #4]
 800449c:	4b18      	ldr	r3, [pc, #96]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800449e:	430a      	orrs	r2, r1
 80044a0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80044a2:	2317      	movs	r3, #23
 80044a4:	18fb      	adds	r3, r7, r3
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d105      	bne.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044ac:	4b14      	ldr	r3, [pc, #80]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80044ae:	69da      	ldr	r2, [r3, #28]
 80044b0:	4b13      	ldr	r3, [pc, #76]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80044b2:	4918      	ldr	r1, [pc, #96]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80044b4:	400a      	ands	r2, r1
 80044b6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2201      	movs	r2, #1
 80044be:	4013      	ands	r3, r2
 80044c0:	d009      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044c2:	4b0f      	ldr	r3, [pc, #60]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80044c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c6:	2203      	movs	r2, #3
 80044c8:	4393      	bics	r3, r2
 80044ca:	0019      	movs	r1, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689a      	ldr	r2, [r3, #8]
 80044d0:	4b0b      	ldr	r3, [pc, #44]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80044d2:	430a      	orrs	r2, r1
 80044d4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2220      	movs	r2, #32
 80044dc:	4013      	ands	r3, r2
 80044de:	d009      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044e0:	4b07      	ldr	r3, [pc, #28]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80044e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e4:	2210      	movs	r2, #16
 80044e6:	4393      	bics	r3, r2
 80044e8:	0019      	movs	r1, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	68da      	ldr	r2, [r3, #12]
 80044ee:	4b04      	ldr	r3, [pc, #16]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80044f0:	430a      	orrs	r2, r1
 80044f2:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	0018      	movs	r0, r3
 80044f8:	46bd      	mov	sp, r7
 80044fa:	b006      	add	sp, #24
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	46c0      	nop			; (mov r8, r8)
 8004500:	40021000 	.word	0x40021000
 8004504:	40007000 	.word	0x40007000
 8004508:	fffffcff 	.word	0xfffffcff
 800450c:	fffeffff 	.word	0xfffeffff
 8004510:	00001388 	.word	0x00001388
 8004514:	efffffff 	.word	0xefffffff

08004518 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d101      	bne.n	800452a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e042      	b.n	80045b0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	223d      	movs	r2, #61	; 0x3d
 800452e:	5c9b      	ldrb	r3, [r3, r2]
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d107      	bne.n	8004546 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	223c      	movs	r2, #60	; 0x3c
 800453a:	2100      	movs	r1, #0
 800453c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	0018      	movs	r0, r3
 8004542:	f7fe f85d 	bl	8002600 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	223d      	movs	r2, #61	; 0x3d
 800454a:	2102      	movs	r1, #2
 800454c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	3304      	adds	r3, #4
 8004556:	0019      	movs	r1, r3
 8004558:	0010      	movs	r0, r2
 800455a:	f000 f9b7 	bl	80048cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2246      	movs	r2, #70	; 0x46
 8004562:	2101      	movs	r1, #1
 8004564:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	223e      	movs	r2, #62	; 0x3e
 800456a:	2101      	movs	r1, #1
 800456c:	5499      	strb	r1, [r3, r2]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	223f      	movs	r2, #63	; 0x3f
 8004572:	2101      	movs	r1, #1
 8004574:	5499      	strb	r1, [r3, r2]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2240      	movs	r2, #64	; 0x40
 800457a:	2101      	movs	r1, #1
 800457c:	5499      	strb	r1, [r3, r2]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2241      	movs	r2, #65	; 0x41
 8004582:	2101      	movs	r1, #1
 8004584:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2242      	movs	r2, #66	; 0x42
 800458a:	2101      	movs	r1, #1
 800458c:	5499      	strb	r1, [r3, r2]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2243      	movs	r2, #67	; 0x43
 8004592:	2101      	movs	r1, #1
 8004594:	5499      	strb	r1, [r3, r2]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2244      	movs	r2, #68	; 0x44
 800459a:	2101      	movs	r1, #1
 800459c:	5499      	strb	r1, [r3, r2]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2245      	movs	r2, #69	; 0x45
 80045a2:	2101      	movs	r1, #1
 80045a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	223d      	movs	r2, #61	; 0x3d
 80045aa:	2101      	movs	r1, #1
 80045ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	0018      	movs	r0, r3
 80045b2:	46bd      	mov	sp, r7
 80045b4:	b002      	add	sp, #8
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	223d      	movs	r2, #61	; 0x3d
 80045c4:	5c9b      	ldrb	r3, [r3, r2]
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d001      	beq.n	80045d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e035      	b.n	800463c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	223d      	movs	r2, #61	; 0x3d
 80045d4:	2102      	movs	r1, #2
 80045d6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68da      	ldr	r2, [r3, #12]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2101      	movs	r1, #1
 80045e4:	430a      	orrs	r2, r1
 80045e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a15      	ldr	r2, [pc, #84]	; (8004644 <HAL_TIM_Base_Start_IT+0x8c>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d009      	beq.n	8004606 <HAL_TIM_Base_Start_IT+0x4e>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a14      	ldr	r2, [pc, #80]	; (8004648 <HAL_TIM_Base_Start_IT+0x90>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d004      	beq.n	8004606 <HAL_TIM_Base_Start_IT+0x4e>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a12      	ldr	r2, [pc, #72]	; (800464c <HAL_TIM_Base_Start_IT+0x94>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d111      	bne.n	800462a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	2207      	movs	r2, #7
 800460e:	4013      	ands	r3, r2
 8004610:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2b06      	cmp	r3, #6
 8004616:	d010      	beq.n	800463a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2101      	movs	r1, #1
 8004624:	430a      	orrs	r2, r1
 8004626:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004628:	e007      	b.n	800463a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2101      	movs	r1, #1
 8004636:	430a      	orrs	r2, r1
 8004638:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	0018      	movs	r0, r3
 800463e:	46bd      	mov	sp, r7
 8004640:	b004      	add	sp, #16
 8004642:	bd80      	pop	{r7, pc}
 8004644:	40012c00 	.word	0x40012c00
 8004648:	40000400 	.word	0x40000400
 800464c:	40014000 	.word	0x40014000

08004650 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	2202      	movs	r2, #2
 8004660:	4013      	ands	r3, r2
 8004662:	2b02      	cmp	r3, #2
 8004664:	d124      	bne.n	80046b0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	2202      	movs	r2, #2
 800466e:	4013      	ands	r3, r2
 8004670:	2b02      	cmp	r3, #2
 8004672:	d11d      	bne.n	80046b0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2203      	movs	r2, #3
 800467a:	4252      	negs	r2, r2
 800467c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2201      	movs	r2, #1
 8004682:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	2203      	movs	r2, #3
 800468c:	4013      	ands	r3, r2
 800468e:	d004      	beq.n	800469a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	0018      	movs	r0, r3
 8004694:	f000 f902 	bl	800489c <HAL_TIM_IC_CaptureCallback>
 8004698:	e007      	b.n	80046aa <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	0018      	movs	r0, r3
 800469e:	f000 f8f5 	bl	800488c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	0018      	movs	r0, r3
 80046a6:	f000 f901 	bl	80048ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	2204      	movs	r2, #4
 80046b8:	4013      	ands	r3, r2
 80046ba:	2b04      	cmp	r3, #4
 80046bc:	d125      	bne.n	800470a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	2204      	movs	r2, #4
 80046c6:	4013      	ands	r3, r2
 80046c8:	2b04      	cmp	r3, #4
 80046ca:	d11e      	bne.n	800470a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2205      	movs	r2, #5
 80046d2:	4252      	negs	r2, r2
 80046d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2202      	movs	r2, #2
 80046da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	699a      	ldr	r2, [r3, #24]
 80046e2:	23c0      	movs	r3, #192	; 0xc0
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	4013      	ands	r3, r2
 80046e8:	d004      	beq.n	80046f4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	0018      	movs	r0, r3
 80046ee:	f000 f8d5 	bl	800489c <HAL_TIM_IC_CaptureCallback>
 80046f2:	e007      	b.n	8004704 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	0018      	movs	r0, r3
 80046f8:	f000 f8c8 	bl	800488c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	0018      	movs	r0, r3
 8004700:	f000 f8d4 	bl	80048ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	2208      	movs	r2, #8
 8004712:	4013      	ands	r3, r2
 8004714:	2b08      	cmp	r3, #8
 8004716:	d124      	bne.n	8004762 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	2208      	movs	r2, #8
 8004720:	4013      	ands	r3, r2
 8004722:	2b08      	cmp	r3, #8
 8004724:	d11d      	bne.n	8004762 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2209      	movs	r2, #9
 800472c:	4252      	negs	r2, r2
 800472e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2204      	movs	r2, #4
 8004734:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	69db      	ldr	r3, [r3, #28]
 800473c:	2203      	movs	r2, #3
 800473e:	4013      	ands	r3, r2
 8004740:	d004      	beq.n	800474c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	0018      	movs	r0, r3
 8004746:	f000 f8a9 	bl	800489c <HAL_TIM_IC_CaptureCallback>
 800474a:	e007      	b.n	800475c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	0018      	movs	r0, r3
 8004750:	f000 f89c 	bl	800488c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	0018      	movs	r0, r3
 8004758:	f000 f8a8 	bl	80048ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	2210      	movs	r2, #16
 800476a:	4013      	ands	r3, r2
 800476c:	2b10      	cmp	r3, #16
 800476e:	d125      	bne.n	80047bc <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	2210      	movs	r2, #16
 8004778:	4013      	ands	r3, r2
 800477a:	2b10      	cmp	r3, #16
 800477c:	d11e      	bne.n	80047bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2211      	movs	r2, #17
 8004784:	4252      	negs	r2, r2
 8004786:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2208      	movs	r2, #8
 800478c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	69da      	ldr	r2, [r3, #28]
 8004794:	23c0      	movs	r3, #192	; 0xc0
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	4013      	ands	r3, r2
 800479a:	d004      	beq.n	80047a6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	0018      	movs	r0, r3
 80047a0:	f000 f87c 	bl	800489c <HAL_TIM_IC_CaptureCallback>
 80047a4:	e007      	b.n	80047b6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	0018      	movs	r0, r3
 80047aa:	f000 f86f 	bl	800488c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	0018      	movs	r0, r3
 80047b2:	f000 f87b 	bl	80048ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	2201      	movs	r2, #1
 80047c4:	4013      	ands	r3, r2
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d10f      	bne.n	80047ea <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	2201      	movs	r2, #1
 80047d2:	4013      	ands	r3, r2
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d108      	bne.n	80047ea <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2202      	movs	r2, #2
 80047de:	4252      	negs	r2, r2
 80047e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	0018      	movs	r0, r3
 80047e6:	f000 f849 	bl	800487c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	2280      	movs	r2, #128	; 0x80
 80047f2:	4013      	ands	r3, r2
 80047f4:	2b80      	cmp	r3, #128	; 0x80
 80047f6:	d10f      	bne.n	8004818 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	2280      	movs	r2, #128	; 0x80
 8004800:	4013      	ands	r3, r2
 8004802:	2b80      	cmp	r3, #128	; 0x80
 8004804:	d108      	bne.n	8004818 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2281      	movs	r2, #129	; 0x81
 800480c:	4252      	negs	r2, r2
 800480e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	0018      	movs	r0, r3
 8004814:	f000 f8d8 	bl	80049c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	2240      	movs	r2, #64	; 0x40
 8004820:	4013      	ands	r3, r2
 8004822:	2b40      	cmp	r3, #64	; 0x40
 8004824:	d10f      	bne.n	8004846 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	2240      	movs	r2, #64	; 0x40
 800482e:	4013      	ands	r3, r2
 8004830:	2b40      	cmp	r3, #64	; 0x40
 8004832:	d108      	bne.n	8004846 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2241      	movs	r2, #65	; 0x41
 800483a:	4252      	negs	r2, r2
 800483c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	0018      	movs	r0, r3
 8004842:	f000 f83b 	bl	80048bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	2220      	movs	r2, #32
 800484e:	4013      	ands	r3, r2
 8004850:	2b20      	cmp	r3, #32
 8004852:	d10f      	bne.n	8004874 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	2220      	movs	r2, #32
 800485c:	4013      	ands	r3, r2
 800485e:	2b20      	cmp	r3, #32
 8004860:	d108      	bne.n	8004874 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2221      	movs	r2, #33	; 0x21
 8004868:	4252      	negs	r2, r2
 800486a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	0018      	movs	r0, r3
 8004870:	f000 f8a2 	bl	80049b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004874:	46c0      	nop			; (mov r8, r8)
 8004876:	46bd      	mov	sp, r7
 8004878:	b002      	add	sp, #8
 800487a:	bd80      	pop	{r7, pc}

0800487c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004884:	46c0      	nop			; (mov r8, r8)
 8004886:	46bd      	mov	sp, r7
 8004888:	b002      	add	sp, #8
 800488a:	bd80      	pop	{r7, pc}

0800488c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004894:	46c0      	nop			; (mov r8, r8)
 8004896:	46bd      	mov	sp, r7
 8004898:	b002      	add	sp, #8
 800489a:	bd80      	pop	{r7, pc}

0800489c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048a4:	46c0      	nop			; (mov r8, r8)
 80048a6:	46bd      	mov	sp, r7
 80048a8:	b002      	add	sp, #8
 80048aa:	bd80      	pop	{r7, pc}

080048ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048b4:	46c0      	nop			; (mov r8, r8)
 80048b6:	46bd      	mov	sp, r7
 80048b8:	b002      	add	sp, #8
 80048ba:	bd80      	pop	{r7, pc}

080048bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048c4:	46c0      	nop			; (mov r8, r8)
 80048c6:	46bd      	mov	sp, r7
 80048c8:	b002      	add	sp, #8
 80048ca:	bd80      	pop	{r7, pc}

080048cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a2f      	ldr	r2, [pc, #188]	; (800499c <TIM_Base_SetConfig+0xd0>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d003      	beq.n	80048ec <TIM_Base_SetConfig+0x20>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a2e      	ldr	r2, [pc, #184]	; (80049a0 <TIM_Base_SetConfig+0xd4>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d108      	bne.n	80048fe <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2270      	movs	r2, #112	; 0x70
 80048f0:	4393      	bics	r3, r2
 80048f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a26      	ldr	r2, [pc, #152]	; (800499c <TIM_Base_SetConfig+0xd0>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d013      	beq.n	800492e <TIM_Base_SetConfig+0x62>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a25      	ldr	r2, [pc, #148]	; (80049a0 <TIM_Base_SetConfig+0xd4>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d00f      	beq.n	800492e <TIM_Base_SetConfig+0x62>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a24      	ldr	r2, [pc, #144]	; (80049a4 <TIM_Base_SetConfig+0xd8>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d00b      	beq.n	800492e <TIM_Base_SetConfig+0x62>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a23      	ldr	r2, [pc, #140]	; (80049a8 <TIM_Base_SetConfig+0xdc>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d007      	beq.n	800492e <TIM_Base_SetConfig+0x62>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a22      	ldr	r2, [pc, #136]	; (80049ac <TIM_Base_SetConfig+0xe0>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d003      	beq.n	800492e <TIM_Base_SetConfig+0x62>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a21      	ldr	r2, [pc, #132]	; (80049b0 <TIM_Base_SetConfig+0xe4>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d108      	bne.n	8004940 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	4a20      	ldr	r2, [pc, #128]	; (80049b4 <TIM_Base_SetConfig+0xe8>)
 8004932:	4013      	ands	r3, r2
 8004934:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	4313      	orrs	r3, r2
 800493e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2280      	movs	r2, #128	; 0x80
 8004944:	4393      	bics	r3, r2
 8004946:	001a      	movs	r2, r3
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	4313      	orrs	r3, r2
 800494e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	689a      	ldr	r2, [r3, #8]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a0c      	ldr	r2, [pc, #48]	; (800499c <TIM_Base_SetConfig+0xd0>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d00b      	beq.n	8004986 <TIM_Base_SetConfig+0xba>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a0d      	ldr	r2, [pc, #52]	; (80049a8 <TIM_Base_SetConfig+0xdc>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d007      	beq.n	8004986 <TIM_Base_SetConfig+0xba>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a0c      	ldr	r2, [pc, #48]	; (80049ac <TIM_Base_SetConfig+0xe0>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d003      	beq.n	8004986 <TIM_Base_SetConfig+0xba>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a0b      	ldr	r2, [pc, #44]	; (80049b0 <TIM_Base_SetConfig+0xe4>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d103      	bne.n	800498e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	691a      	ldr	r2, [r3, #16]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	615a      	str	r2, [r3, #20]
}
 8004994:	46c0      	nop			; (mov r8, r8)
 8004996:	46bd      	mov	sp, r7
 8004998:	b004      	add	sp, #16
 800499a:	bd80      	pop	{r7, pc}
 800499c:	40012c00 	.word	0x40012c00
 80049a0:	40000400 	.word	0x40000400
 80049a4:	40002000 	.word	0x40002000
 80049a8:	40014000 	.word	0x40014000
 80049ac:	40014400 	.word	0x40014400
 80049b0:	40014800 	.word	0x40014800
 80049b4:	fffffcff 	.word	0xfffffcff

080049b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049c0:	46c0      	nop			; (mov r8, r8)
 80049c2:	46bd      	mov	sp, r7
 80049c4:	b002      	add	sp, #8
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049d0:	46c0      	nop			; (mov r8, r8)
 80049d2:	46bd      	mov	sp, r7
 80049d4:	b002      	add	sp, #8
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b08a      	sub	sp, #40	; 0x28
 80049dc:	af02      	add	r7, sp, #8
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	603b      	str	r3, [r7, #0]
 80049e4:	1dbb      	adds	r3, r7, #6
 80049e6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049ec:	2b20      	cmp	r3, #32
 80049ee:	d000      	beq.n	80049f2 <HAL_UART_Transmit+0x1a>
 80049f0:	e096      	b.n	8004b20 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d003      	beq.n	8004a00 <HAL_UART_Transmit+0x28>
 80049f8:	1dbb      	adds	r3, r7, #6
 80049fa:	881b      	ldrh	r3, [r3, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d101      	bne.n	8004a04 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e08e      	b.n	8004b22 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	689a      	ldr	r2, [r3, #8]
 8004a08:	2380      	movs	r3, #128	; 0x80
 8004a0a:	015b      	lsls	r3, r3, #5
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d109      	bne.n	8004a24 <HAL_UART_Transmit+0x4c>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d105      	bne.n	8004a24 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	d001      	beq.n	8004a24 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e07e      	b.n	8004b22 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2274      	movs	r2, #116	; 0x74
 8004a28:	5c9b      	ldrb	r3, [r3, r2]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d101      	bne.n	8004a32 <HAL_UART_Transmit+0x5a>
 8004a2e:	2302      	movs	r3, #2
 8004a30:	e077      	b.n	8004b22 <HAL_UART_Transmit+0x14a>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2274      	movs	r2, #116	; 0x74
 8004a36:	2101      	movs	r1, #1
 8004a38:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2280      	movs	r2, #128	; 0x80
 8004a3e:	2100      	movs	r1, #0
 8004a40:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2221      	movs	r2, #33	; 0x21
 8004a46:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a48:	f7fd ff78 	bl	800293c <HAL_GetTick>
 8004a4c:	0003      	movs	r3, r0
 8004a4e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	1dba      	adds	r2, r7, #6
 8004a54:	2150      	movs	r1, #80	; 0x50
 8004a56:	8812      	ldrh	r2, [r2, #0]
 8004a58:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	1dba      	adds	r2, r7, #6
 8004a5e:	2152      	movs	r1, #82	; 0x52
 8004a60:	8812      	ldrh	r2, [r2, #0]
 8004a62:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	689a      	ldr	r2, [r3, #8]
 8004a68:	2380      	movs	r3, #128	; 0x80
 8004a6a:	015b      	lsls	r3, r3, #5
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d108      	bne.n	8004a82 <HAL_UART_Transmit+0xaa>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d104      	bne.n	8004a82 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	61bb      	str	r3, [r7, #24]
 8004a80:	e003      	b.n	8004a8a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a86:	2300      	movs	r3, #0
 8004a88:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2274      	movs	r2, #116	; 0x74
 8004a8e:	2100      	movs	r1, #0
 8004a90:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8004a92:	e02d      	b.n	8004af0 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	68f8      	ldr	r0, [r7, #12]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	0013      	movs	r3, r2
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	2180      	movs	r1, #128	; 0x80
 8004aa2:	f000 fa7f 	bl	8004fa4 <UART_WaitOnFlagUntilTimeout>
 8004aa6:	1e03      	subs	r3, r0, #0
 8004aa8:	d001      	beq.n	8004aae <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e039      	b.n	8004b22 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d10b      	bne.n	8004acc <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	881a      	ldrh	r2, [r3, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	05d2      	lsls	r2, r2, #23
 8004abe:	0dd2      	lsrs	r2, r2, #23
 8004ac0:	b292      	uxth	r2, r2
 8004ac2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	3302      	adds	r3, #2
 8004ac8:	61bb      	str	r3, [r7, #24]
 8004aca:	e008      	b.n	8004ade <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	781a      	ldrb	r2, [r3, #0]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	b292      	uxth	r2, r2
 8004ad6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	3301      	adds	r3, #1
 8004adc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2252      	movs	r2, #82	; 0x52
 8004ae2:	5a9b      	ldrh	r3, [r3, r2]
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	b299      	uxth	r1, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2252      	movs	r2, #82	; 0x52
 8004aee:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2252      	movs	r2, #82	; 0x52
 8004af4:	5a9b      	ldrh	r3, [r3, r2]
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1cb      	bne.n	8004a94 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	0013      	movs	r3, r2
 8004b06:	2200      	movs	r2, #0
 8004b08:	2140      	movs	r1, #64	; 0x40
 8004b0a:	f000 fa4b 	bl	8004fa4 <UART_WaitOnFlagUntilTimeout>
 8004b0e:	1e03      	subs	r3, r0, #0
 8004b10:	d001      	beq.n	8004b16 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e005      	b.n	8004b22 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2220      	movs	r2, #32
 8004b1a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	e000      	b.n	8004b22 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004b20:	2302      	movs	r3, #2
  }
}
 8004b22:	0018      	movs	r0, r3
 8004b24:	46bd      	mov	sp, r7
 8004b26:	b008      	add	sp, #32
 8004b28:	bd80      	pop	{r7, pc}
	...

08004b2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b088      	sub	sp, #32
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b34:	231e      	movs	r3, #30
 8004b36:	18fb      	adds	r3, r7, r3
 8004b38:	2200      	movs	r2, #0
 8004b3a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689a      	ldr	r2, [r3, #8]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	431a      	orrs	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	431a      	orrs	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	69db      	ldr	r3, [r3, #28]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a8d      	ldr	r2, [pc, #564]	; (8004d90 <UART_SetConfig+0x264>)
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	0019      	movs	r1, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	697a      	ldr	r2, [r7, #20]
 8004b66:	430a      	orrs	r2, r1
 8004b68:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	4a88      	ldr	r2, [pc, #544]	; (8004d94 <UART_SetConfig+0x268>)
 8004b72:	4013      	ands	r3, r2
 8004b74:	0019      	movs	r1, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68da      	ldr	r2, [r3, #12]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a1b      	ldr	r3, [r3, #32]
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	4a7f      	ldr	r2, [pc, #508]	; (8004d98 <UART_SetConfig+0x26c>)
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	0019      	movs	r1, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a7b      	ldr	r2, [pc, #492]	; (8004d9c <UART_SetConfig+0x270>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d127      	bne.n	8004c02 <UART_SetConfig+0xd6>
 8004bb2:	4b7b      	ldr	r3, [pc, #492]	; (8004da0 <UART_SetConfig+0x274>)
 8004bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb6:	2203      	movs	r2, #3
 8004bb8:	4013      	ands	r3, r2
 8004bba:	2b03      	cmp	r3, #3
 8004bbc:	d00d      	beq.n	8004bda <UART_SetConfig+0xae>
 8004bbe:	d81b      	bhi.n	8004bf8 <UART_SetConfig+0xcc>
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d014      	beq.n	8004bee <UART_SetConfig+0xc2>
 8004bc4:	d818      	bhi.n	8004bf8 <UART_SetConfig+0xcc>
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d002      	beq.n	8004bd0 <UART_SetConfig+0xa4>
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d00a      	beq.n	8004be4 <UART_SetConfig+0xb8>
 8004bce:	e013      	b.n	8004bf8 <UART_SetConfig+0xcc>
 8004bd0:	231f      	movs	r3, #31
 8004bd2:	18fb      	adds	r3, r7, r3
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	701a      	strb	r2, [r3, #0]
 8004bd8:	e021      	b.n	8004c1e <UART_SetConfig+0xf2>
 8004bda:	231f      	movs	r3, #31
 8004bdc:	18fb      	adds	r3, r7, r3
 8004bde:	2202      	movs	r2, #2
 8004be0:	701a      	strb	r2, [r3, #0]
 8004be2:	e01c      	b.n	8004c1e <UART_SetConfig+0xf2>
 8004be4:	231f      	movs	r3, #31
 8004be6:	18fb      	adds	r3, r7, r3
 8004be8:	2204      	movs	r2, #4
 8004bea:	701a      	strb	r2, [r3, #0]
 8004bec:	e017      	b.n	8004c1e <UART_SetConfig+0xf2>
 8004bee:	231f      	movs	r3, #31
 8004bf0:	18fb      	adds	r3, r7, r3
 8004bf2:	2208      	movs	r2, #8
 8004bf4:	701a      	strb	r2, [r3, #0]
 8004bf6:	e012      	b.n	8004c1e <UART_SetConfig+0xf2>
 8004bf8:	231f      	movs	r3, #31
 8004bfa:	18fb      	adds	r3, r7, r3
 8004bfc:	2210      	movs	r2, #16
 8004bfe:	701a      	strb	r2, [r3, #0]
 8004c00:	e00d      	b.n	8004c1e <UART_SetConfig+0xf2>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a67      	ldr	r2, [pc, #412]	; (8004da4 <UART_SetConfig+0x278>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d104      	bne.n	8004c16 <UART_SetConfig+0xea>
 8004c0c:	231f      	movs	r3, #31
 8004c0e:	18fb      	adds	r3, r7, r3
 8004c10:	2200      	movs	r2, #0
 8004c12:	701a      	strb	r2, [r3, #0]
 8004c14:	e003      	b.n	8004c1e <UART_SetConfig+0xf2>
 8004c16:	231f      	movs	r3, #31
 8004c18:	18fb      	adds	r3, r7, r3
 8004c1a:	2210      	movs	r2, #16
 8004c1c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	69da      	ldr	r2, [r3, #28]
 8004c22:	2380      	movs	r3, #128	; 0x80
 8004c24:	021b      	lsls	r3, r3, #8
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d15d      	bne.n	8004ce6 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8004c2a:	231f      	movs	r3, #31
 8004c2c:	18fb      	adds	r3, r7, r3
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	2b08      	cmp	r3, #8
 8004c32:	d015      	beq.n	8004c60 <UART_SetConfig+0x134>
 8004c34:	dc18      	bgt.n	8004c68 <UART_SetConfig+0x13c>
 8004c36:	2b04      	cmp	r3, #4
 8004c38:	d00d      	beq.n	8004c56 <UART_SetConfig+0x12a>
 8004c3a:	dc15      	bgt.n	8004c68 <UART_SetConfig+0x13c>
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d002      	beq.n	8004c46 <UART_SetConfig+0x11a>
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d005      	beq.n	8004c50 <UART_SetConfig+0x124>
 8004c44:	e010      	b.n	8004c68 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c46:	f7ff fb83 	bl	8004350 <HAL_RCC_GetPCLK1Freq>
 8004c4a:	0003      	movs	r3, r0
 8004c4c:	61bb      	str	r3, [r7, #24]
        break;
 8004c4e:	e012      	b.n	8004c76 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c50:	4b55      	ldr	r3, [pc, #340]	; (8004da8 <UART_SetConfig+0x27c>)
 8004c52:	61bb      	str	r3, [r7, #24]
        break;
 8004c54:	e00f      	b.n	8004c76 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c56:	f7ff fb0d 	bl	8004274 <HAL_RCC_GetSysClockFreq>
 8004c5a:	0003      	movs	r3, r0
 8004c5c:	61bb      	str	r3, [r7, #24]
        break;
 8004c5e:	e00a      	b.n	8004c76 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c60:	2380      	movs	r3, #128	; 0x80
 8004c62:	021b      	lsls	r3, r3, #8
 8004c64:	61bb      	str	r3, [r7, #24]
        break;
 8004c66:	e006      	b.n	8004c76 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c6c:	231e      	movs	r3, #30
 8004c6e:	18fb      	adds	r3, r7, r3
 8004c70:	2201      	movs	r2, #1
 8004c72:	701a      	strb	r2, [r3, #0]
        break;
 8004c74:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d100      	bne.n	8004c7e <UART_SetConfig+0x152>
 8004c7c:	e07b      	b.n	8004d76 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	005a      	lsls	r2, r3, #1
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	085b      	lsrs	r3, r3, #1
 8004c88:	18d2      	adds	r2, r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	0019      	movs	r1, r3
 8004c90:	0010      	movs	r0, r2
 8004c92:	f7fb fa43 	bl	800011c <__udivsi3>
 8004c96:	0003      	movs	r3, r0
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	2b0f      	cmp	r3, #15
 8004ca0:	d91c      	bls.n	8004cdc <UART_SetConfig+0x1b0>
 8004ca2:	693a      	ldr	r2, [r7, #16]
 8004ca4:	2380      	movs	r3, #128	; 0x80
 8004ca6:	025b      	lsls	r3, r3, #9
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d217      	bcs.n	8004cdc <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	200e      	movs	r0, #14
 8004cb2:	183b      	adds	r3, r7, r0
 8004cb4:	210f      	movs	r1, #15
 8004cb6:	438a      	bics	r2, r1
 8004cb8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	085b      	lsrs	r3, r3, #1
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	2207      	movs	r2, #7
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	b299      	uxth	r1, r3
 8004cc6:	183b      	adds	r3, r7, r0
 8004cc8:	183a      	adds	r2, r7, r0
 8004cca:	8812      	ldrh	r2, [r2, #0]
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	183a      	adds	r2, r7, r0
 8004cd6:	8812      	ldrh	r2, [r2, #0]
 8004cd8:	60da      	str	r2, [r3, #12]
 8004cda:	e04c      	b.n	8004d76 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8004cdc:	231e      	movs	r3, #30
 8004cde:	18fb      	adds	r3, r7, r3
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	701a      	strb	r2, [r3, #0]
 8004ce4:	e047      	b.n	8004d76 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ce6:	231f      	movs	r3, #31
 8004ce8:	18fb      	adds	r3, r7, r3
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	2b08      	cmp	r3, #8
 8004cee:	d015      	beq.n	8004d1c <UART_SetConfig+0x1f0>
 8004cf0:	dc18      	bgt.n	8004d24 <UART_SetConfig+0x1f8>
 8004cf2:	2b04      	cmp	r3, #4
 8004cf4:	d00d      	beq.n	8004d12 <UART_SetConfig+0x1e6>
 8004cf6:	dc15      	bgt.n	8004d24 <UART_SetConfig+0x1f8>
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d002      	beq.n	8004d02 <UART_SetConfig+0x1d6>
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d005      	beq.n	8004d0c <UART_SetConfig+0x1e0>
 8004d00:	e010      	b.n	8004d24 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d02:	f7ff fb25 	bl	8004350 <HAL_RCC_GetPCLK1Freq>
 8004d06:	0003      	movs	r3, r0
 8004d08:	61bb      	str	r3, [r7, #24]
        break;
 8004d0a:	e012      	b.n	8004d32 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d0c:	4b26      	ldr	r3, [pc, #152]	; (8004da8 <UART_SetConfig+0x27c>)
 8004d0e:	61bb      	str	r3, [r7, #24]
        break;
 8004d10:	e00f      	b.n	8004d32 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d12:	f7ff faaf 	bl	8004274 <HAL_RCC_GetSysClockFreq>
 8004d16:	0003      	movs	r3, r0
 8004d18:	61bb      	str	r3, [r7, #24]
        break;
 8004d1a:	e00a      	b.n	8004d32 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d1c:	2380      	movs	r3, #128	; 0x80
 8004d1e:	021b      	lsls	r3, r3, #8
 8004d20:	61bb      	str	r3, [r7, #24]
        break;
 8004d22:	e006      	b.n	8004d32 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8004d24:	2300      	movs	r3, #0
 8004d26:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d28:	231e      	movs	r3, #30
 8004d2a:	18fb      	adds	r3, r7, r3
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	701a      	strb	r2, [r3, #0]
        break;
 8004d30:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d01e      	beq.n	8004d76 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	085a      	lsrs	r2, r3, #1
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	18d2      	adds	r2, r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	0019      	movs	r1, r3
 8004d48:	0010      	movs	r0, r2
 8004d4a:	f7fb f9e7 	bl	800011c <__udivsi3>
 8004d4e:	0003      	movs	r3, r0
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	2b0f      	cmp	r3, #15
 8004d58:	d909      	bls.n	8004d6e <UART_SetConfig+0x242>
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	2380      	movs	r3, #128	; 0x80
 8004d5e:	025b      	lsls	r3, r3, #9
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d204      	bcs.n	8004d6e <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	60da      	str	r2, [r3, #12]
 8004d6c:	e003      	b.n	8004d76 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8004d6e:	231e      	movs	r3, #30
 8004d70:	18fb      	adds	r3, r7, r3
 8004d72:	2201      	movs	r2, #1
 8004d74:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004d82:	231e      	movs	r3, #30
 8004d84:	18fb      	adds	r3, r7, r3
 8004d86:	781b      	ldrb	r3, [r3, #0]
}
 8004d88:	0018      	movs	r0, r3
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	b008      	add	sp, #32
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	ffff69f3 	.word	0xffff69f3
 8004d94:	ffffcfff 	.word	0xffffcfff
 8004d98:	fffff4ff 	.word	0xfffff4ff
 8004d9c:	40013800 	.word	0x40013800
 8004da0:	40021000 	.word	0x40021000
 8004da4:	40004400 	.word	0x40004400
 8004da8:	007a1200 	.word	0x007a1200

08004dac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db8:	2201      	movs	r2, #1
 8004dba:	4013      	ands	r3, r2
 8004dbc:	d00b      	beq.n	8004dd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	4a4a      	ldr	r2, [pc, #296]	; (8004ef0 <UART_AdvFeatureConfig+0x144>)
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	0019      	movs	r1, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dda:	2202      	movs	r2, #2
 8004ddc:	4013      	ands	r3, r2
 8004dde:	d00b      	beq.n	8004df8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	4a43      	ldr	r2, [pc, #268]	; (8004ef4 <UART_AdvFeatureConfig+0x148>)
 8004de8:	4013      	ands	r3, r2
 8004dea:	0019      	movs	r1, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	430a      	orrs	r2, r1
 8004df6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfc:	2204      	movs	r2, #4
 8004dfe:	4013      	ands	r3, r2
 8004e00:	d00b      	beq.n	8004e1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	4a3b      	ldr	r2, [pc, #236]	; (8004ef8 <UART_AdvFeatureConfig+0x14c>)
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	0019      	movs	r1, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	430a      	orrs	r2, r1
 8004e18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1e:	2208      	movs	r2, #8
 8004e20:	4013      	ands	r3, r2
 8004e22:	d00b      	beq.n	8004e3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	4a34      	ldr	r2, [pc, #208]	; (8004efc <UART_AdvFeatureConfig+0x150>)
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	0019      	movs	r1, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e40:	2210      	movs	r2, #16
 8004e42:	4013      	ands	r3, r2
 8004e44:	d00b      	beq.n	8004e5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	4a2c      	ldr	r2, [pc, #176]	; (8004f00 <UART_AdvFeatureConfig+0x154>)
 8004e4e:	4013      	ands	r3, r2
 8004e50:	0019      	movs	r1, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	430a      	orrs	r2, r1
 8004e5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e62:	2220      	movs	r2, #32
 8004e64:	4013      	ands	r3, r2
 8004e66:	d00b      	beq.n	8004e80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	4a25      	ldr	r2, [pc, #148]	; (8004f04 <UART_AdvFeatureConfig+0x158>)
 8004e70:	4013      	ands	r3, r2
 8004e72:	0019      	movs	r1, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e84:	2240      	movs	r2, #64	; 0x40
 8004e86:	4013      	ands	r3, r2
 8004e88:	d01d      	beq.n	8004ec6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	4a1d      	ldr	r2, [pc, #116]	; (8004f08 <UART_AdvFeatureConfig+0x15c>)
 8004e92:	4013      	ands	r3, r2
 8004e94:	0019      	movs	r1, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ea6:	2380      	movs	r3, #128	; 0x80
 8004ea8:	035b      	lsls	r3, r3, #13
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d10b      	bne.n	8004ec6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	4a15      	ldr	r2, [pc, #84]	; (8004f0c <UART_AdvFeatureConfig+0x160>)
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	0019      	movs	r1, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eca:	2280      	movs	r2, #128	; 0x80
 8004ecc:	4013      	ands	r3, r2
 8004ece:	d00b      	beq.n	8004ee8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	4a0e      	ldr	r2, [pc, #56]	; (8004f10 <UART_AdvFeatureConfig+0x164>)
 8004ed8:	4013      	ands	r3, r2
 8004eda:	0019      	movs	r1, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	605a      	str	r2, [r3, #4]
  }
}
 8004ee8:	46c0      	nop			; (mov r8, r8)
 8004eea:	46bd      	mov	sp, r7
 8004eec:	b002      	add	sp, #8
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	fffdffff 	.word	0xfffdffff
 8004ef4:	fffeffff 	.word	0xfffeffff
 8004ef8:	fffbffff 	.word	0xfffbffff
 8004efc:	ffff7fff 	.word	0xffff7fff
 8004f00:	ffffefff 	.word	0xffffefff
 8004f04:	ffffdfff 	.word	0xffffdfff
 8004f08:	ffefffff 	.word	0xffefffff
 8004f0c:	ff9fffff 	.word	0xff9fffff
 8004f10:	fff7ffff 	.word	0xfff7ffff

08004f14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b086      	sub	sp, #24
 8004f18:	af02      	add	r7, sp, #8
 8004f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2280      	movs	r2, #128	; 0x80
 8004f20:	2100      	movs	r1, #0
 8004f22:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f24:	f7fd fd0a 	bl	800293c <HAL_GetTick>
 8004f28:	0003      	movs	r3, r0
 8004f2a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2208      	movs	r2, #8
 8004f34:	4013      	ands	r3, r2
 8004f36:	2b08      	cmp	r3, #8
 8004f38:	d10c      	bne.n	8004f54 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2280      	movs	r2, #128	; 0x80
 8004f3e:	0391      	lsls	r1, r2, #14
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	4a17      	ldr	r2, [pc, #92]	; (8004fa0 <UART_CheckIdleState+0x8c>)
 8004f44:	9200      	str	r2, [sp, #0]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f000 f82c 	bl	8004fa4 <UART_WaitOnFlagUntilTimeout>
 8004f4c:	1e03      	subs	r3, r0, #0
 8004f4e:	d001      	beq.n	8004f54 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e021      	b.n	8004f98 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2204      	movs	r2, #4
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	2b04      	cmp	r3, #4
 8004f60:	d10c      	bne.n	8004f7c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2280      	movs	r2, #128	; 0x80
 8004f66:	03d1      	lsls	r1, r2, #15
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	4a0d      	ldr	r2, [pc, #52]	; (8004fa0 <UART_CheckIdleState+0x8c>)
 8004f6c:	9200      	str	r2, [sp, #0]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f000 f818 	bl	8004fa4 <UART_WaitOnFlagUntilTimeout>
 8004f74:	1e03      	subs	r3, r0, #0
 8004f76:	d001      	beq.n	8004f7c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e00d      	b.n	8004f98 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2220      	movs	r2, #32
 8004f80:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2220      	movs	r2, #32
 8004f86:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2274      	movs	r2, #116	; 0x74
 8004f92:	2100      	movs	r1, #0
 8004f94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	0018      	movs	r0, r3
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	b004      	add	sp, #16
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	01ffffff 	.word	0x01ffffff

08004fa4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b094      	sub	sp, #80	; 0x50
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	603b      	str	r3, [r7, #0]
 8004fb0:	1dfb      	adds	r3, r7, #7
 8004fb2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fb4:	e0a3      	b.n	80050fe <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fb8:	3301      	adds	r3, #1
 8004fba:	d100      	bne.n	8004fbe <UART_WaitOnFlagUntilTimeout+0x1a>
 8004fbc:	e09f      	b.n	80050fe <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fbe:	f7fd fcbd 	bl	800293c <HAL_GetTick>
 8004fc2:	0002      	movs	r2, r0
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d302      	bcc.n	8004fd4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d13d      	bne.n	8005050 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fd4:	f3ef 8310 	mrs	r3, PRIMASK
 8004fd8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fdc:	647b      	str	r3, [r7, #68]	; 0x44
 8004fde:	2301      	movs	r3, #1
 8004fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe4:	f383 8810 	msr	PRIMASK, r3
}
 8004fe8:	46c0      	nop			; (mov r8, r8)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	494c      	ldr	r1, [pc, #304]	; (8005128 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004ff6:	400a      	ands	r2, r1
 8004ff8:	601a      	str	r2, [r3, #0]
 8004ffa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ffc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005000:	f383 8810 	msr	PRIMASK, r3
}
 8005004:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005006:	f3ef 8310 	mrs	r3, PRIMASK
 800500a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800500c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800500e:	643b      	str	r3, [r7, #64]	; 0x40
 8005010:	2301      	movs	r3, #1
 8005012:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005016:	f383 8810 	msr	PRIMASK, r3
}
 800501a:	46c0      	nop			; (mov r8, r8)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	689a      	ldr	r2, [r3, #8]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2101      	movs	r1, #1
 8005028:	438a      	bics	r2, r1
 800502a:	609a      	str	r2, [r3, #8]
 800502c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800502e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005032:	f383 8810 	msr	PRIMASK, r3
}
 8005036:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2220      	movs	r2, #32
 800503c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2220      	movs	r2, #32
 8005042:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2274      	movs	r2, #116	; 0x74
 8005048:	2100      	movs	r1, #0
 800504a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e067      	b.n	8005120 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2204      	movs	r2, #4
 8005058:	4013      	ands	r3, r2
 800505a:	d050      	beq.n	80050fe <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	69da      	ldr	r2, [r3, #28]
 8005062:	2380      	movs	r3, #128	; 0x80
 8005064:	011b      	lsls	r3, r3, #4
 8005066:	401a      	ands	r2, r3
 8005068:	2380      	movs	r3, #128	; 0x80
 800506a:	011b      	lsls	r3, r3, #4
 800506c:	429a      	cmp	r2, r3
 800506e:	d146      	bne.n	80050fe <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2280      	movs	r2, #128	; 0x80
 8005076:	0112      	lsls	r2, r2, #4
 8005078:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800507a:	f3ef 8310 	mrs	r3, PRIMASK
 800507e:	613b      	str	r3, [r7, #16]
  return(result);
 8005080:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005082:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005084:	2301      	movs	r3, #1
 8005086:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	f383 8810 	msr	PRIMASK, r3
}
 800508e:	46c0      	nop			; (mov r8, r8)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4923      	ldr	r1, [pc, #140]	; (8005128 <UART_WaitOnFlagUntilTimeout+0x184>)
 800509c:	400a      	ands	r2, r1
 800509e:	601a      	str	r2, [r3, #0]
 80050a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050a2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	f383 8810 	msr	PRIMASK, r3
}
 80050aa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050ac:	f3ef 8310 	mrs	r3, PRIMASK
 80050b0:	61fb      	str	r3, [r7, #28]
  return(result);
 80050b2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80050b6:	2301      	movs	r3, #1
 80050b8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ba:	6a3b      	ldr	r3, [r7, #32]
 80050bc:	f383 8810 	msr	PRIMASK, r3
}
 80050c0:	46c0      	nop			; (mov r8, r8)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	689a      	ldr	r2, [r3, #8]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2101      	movs	r1, #1
 80050ce:	438a      	bics	r2, r1
 80050d0:	609a      	str	r2, [r3, #8]
 80050d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050d4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d8:	f383 8810 	msr	PRIMASK, r3
}
 80050dc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2220      	movs	r2, #32
 80050e2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2220      	movs	r2, #32
 80050e8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2280      	movs	r2, #128	; 0x80
 80050ee:	2120      	movs	r1, #32
 80050f0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2274      	movs	r2, #116	; 0x74
 80050f6:	2100      	movs	r1, #0
 80050f8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e010      	b.n	8005120 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	69db      	ldr	r3, [r3, #28]
 8005104:	68ba      	ldr	r2, [r7, #8]
 8005106:	4013      	ands	r3, r2
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	425a      	negs	r2, r3
 800510e:	4153      	adcs	r3, r2
 8005110:	b2db      	uxtb	r3, r3
 8005112:	001a      	movs	r2, r3
 8005114:	1dfb      	adds	r3, r7, #7
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	429a      	cmp	r2, r3
 800511a:	d100      	bne.n	800511e <UART_WaitOnFlagUntilTimeout+0x17a>
 800511c:	e74b      	b.n	8004fb6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	0018      	movs	r0, r3
 8005122:	46bd      	mov	sp, r7
 8005124:	b014      	add	sp, #80	; 0x50
 8005126:	bd80      	pop	{r7, pc}
 8005128:	fffffe5f 	.word	0xfffffe5f

0800512c <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b086      	sub	sp, #24
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
 8005138:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d101      	bne.n	8005144 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e05b      	b.n	80051fc <HAL_RS485Ex_Init+0xd0>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005148:	2b00      	cmp	r3, #0
 800514a:	d107      	bne.n	800515c <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2274      	movs	r2, #116	; 0x74
 8005150:	2100      	movs	r1, #0
 8005152:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	0018      	movs	r0, r3
 8005158:	f7fd fa78 	bl	800264c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2224      	movs	r2, #36	; 0x24
 8005160:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2101      	movs	r1, #1
 800516e:	438a      	bics	r2, r1
 8005170:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	0018      	movs	r0, r3
 8005176:	f7ff fcd9 	bl	8004b2c <UART_SetConfig>
 800517a:	0003      	movs	r3, r0
 800517c:	2b01      	cmp	r3, #1
 800517e:	d101      	bne.n	8005184 <HAL_RS485Ex_Init+0x58>
  {
    return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e03b      	b.n	80051fc <HAL_RS485Ex_Init+0xd0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005188:	2b00      	cmp	r3, #0
 800518a:	d003      	beq.n	8005194 <HAL_RS485Ex_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	0018      	movs	r0, r3
 8005190:	f7ff fe0c 	bl	8004dac <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	689a      	ldr	r2, [r3, #8]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2180      	movs	r1, #128	; 0x80
 80051a0:	01c9      	lsls	r1, r1, #7
 80051a2:	430a      	orrs	r2, r1
 80051a4:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	4a15      	ldr	r2, [pc, #84]	; (8005204 <HAL_RS485Ex_Init+0xd8>)
 80051ae:	4013      	ands	r3, r2
 80051b0:	0019      	movs	r1, r3
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68ba      	ldr	r2, [r7, #8]
 80051b8:	430a      	orrs	r2, r1
 80051ba:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	055b      	lsls	r3, r3, #21
 80051c0:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	041b      	lsls	r3, r3, #16
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a0d      	ldr	r2, [pc, #52]	; (8005208 <HAL_RS485Ex_Init+0xdc>)
 80051d4:	4013      	ands	r3, r2
 80051d6:	0019      	movs	r1, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	430a      	orrs	r2, r1
 80051e0:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2101      	movs	r1, #1
 80051ee:	430a      	orrs	r2, r1
 80051f0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	0018      	movs	r0, r3
 80051f6:	f7ff fe8d 	bl	8004f14 <UART_CheckIdleState>
 80051fa:	0003      	movs	r3, r0
}
 80051fc:	0018      	movs	r0, r3
 80051fe:	46bd      	mov	sp, r7
 8005200:	b006      	add	sp, #24
 8005202:	bd80      	pop	{r7, pc}
 8005204:	ffff7fff 	.word	0xffff7fff
 8005208:	fc00ffff 	.word	0xfc00ffff

0800520c <__errno>:
 800520c:	4b01      	ldr	r3, [pc, #4]	; (8005214 <__errno+0x8>)
 800520e:	6818      	ldr	r0, [r3, #0]
 8005210:	4770      	bx	lr
 8005212:	46c0      	nop			; (mov r8, r8)
 8005214:	20000018 	.word	0x20000018

08005218 <__libc_init_array>:
 8005218:	b570      	push	{r4, r5, r6, lr}
 800521a:	2600      	movs	r6, #0
 800521c:	4d0c      	ldr	r5, [pc, #48]	; (8005250 <__libc_init_array+0x38>)
 800521e:	4c0d      	ldr	r4, [pc, #52]	; (8005254 <__libc_init_array+0x3c>)
 8005220:	1b64      	subs	r4, r4, r5
 8005222:	10a4      	asrs	r4, r4, #2
 8005224:	42a6      	cmp	r6, r4
 8005226:	d109      	bne.n	800523c <__libc_init_array+0x24>
 8005228:	2600      	movs	r6, #0
 800522a:	f000 fc8b 	bl	8005b44 <_init>
 800522e:	4d0a      	ldr	r5, [pc, #40]	; (8005258 <__libc_init_array+0x40>)
 8005230:	4c0a      	ldr	r4, [pc, #40]	; (800525c <__libc_init_array+0x44>)
 8005232:	1b64      	subs	r4, r4, r5
 8005234:	10a4      	asrs	r4, r4, #2
 8005236:	42a6      	cmp	r6, r4
 8005238:	d105      	bne.n	8005246 <__libc_init_array+0x2e>
 800523a:	bd70      	pop	{r4, r5, r6, pc}
 800523c:	00b3      	lsls	r3, r6, #2
 800523e:	58eb      	ldr	r3, [r5, r3]
 8005240:	4798      	blx	r3
 8005242:	3601      	adds	r6, #1
 8005244:	e7ee      	b.n	8005224 <__libc_init_array+0xc>
 8005246:	00b3      	lsls	r3, r6, #2
 8005248:	58eb      	ldr	r3, [r5, r3]
 800524a:	4798      	blx	r3
 800524c:	3601      	adds	r6, #1
 800524e:	e7f2      	b.n	8005236 <__libc_init_array+0x1e>
 8005250:	08005df8 	.word	0x08005df8
 8005254:	08005df8 	.word	0x08005df8
 8005258:	08005df8 	.word	0x08005df8
 800525c:	08005dfc 	.word	0x08005dfc

08005260 <memset>:
 8005260:	0003      	movs	r3, r0
 8005262:	1882      	adds	r2, r0, r2
 8005264:	4293      	cmp	r3, r2
 8005266:	d100      	bne.n	800526a <memset+0xa>
 8005268:	4770      	bx	lr
 800526a:	7019      	strb	r1, [r3, #0]
 800526c:	3301      	adds	r3, #1
 800526e:	e7f9      	b.n	8005264 <memset+0x4>

08005270 <siprintf>:
 8005270:	b40e      	push	{r1, r2, r3}
 8005272:	b500      	push	{lr}
 8005274:	490b      	ldr	r1, [pc, #44]	; (80052a4 <siprintf+0x34>)
 8005276:	b09c      	sub	sp, #112	; 0x70
 8005278:	ab1d      	add	r3, sp, #116	; 0x74
 800527a:	9002      	str	r0, [sp, #8]
 800527c:	9006      	str	r0, [sp, #24]
 800527e:	9107      	str	r1, [sp, #28]
 8005280:	9104      	str	r1, [sp, #16]
 8005282:	4809      	ldr	r0, [pc, #36]	; (80052a8 <siprintf+0x38>)
 8005284:	4909      	ldr	r1, [pc, #36]	; (80052ac <siprintf+0x3c>)
 8005286:	cb04      	ldmia	r3!, {r2}
 8005288:	9105      	str	r1, [sp, #20]
 800528a:	6800      	ldr	r0, [r0, #0]
 800528c:	a902      	add	r1, sp, #8
 800528e:	9301      	str	r3, [sp, #4]
 8005290:	f000 f870 	bl	8005374 <_svfiprintf_r>
 8005294:	2300      	movs	r3, #0
 8005296:	9a02      	ldr	r2, [sp, #8]
 8005298:	7013      	strb	r3, [r2, #0]
 800529a:	b01c      	add	sp, #112	; 0x70
 800529c:	bc08      	pop	{r3}
 800529e:	b003      	add	sp, #12
 80052a0:	4718      	bx	r3
 80052a2:	46c0      	nop			; (mov r8, r8)
 80052a4:	7fffffff 	.word	0x7fffffff
 80052a8:	20000018 	.word	0x20000018
 80052ac:	ffff0208 	.word	0xffff0208

080052b0 <__ssputs_r>:
 80052b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052b2:	688e      	ldr	r6, [r1, #8]
 80052b4:	b085      	sub	sp, #20
 80052b6:	0007      	movs	r7, r0
 80052b8:	000c      	movs	r4, r1
 80052ba:	9203      	str	r2, [sp, #12]
 80052bc:	9301      	str	r3, [sp, #4]
 80052be:	429e      	cmp	r6, r3
 80052c0:	d83c      	bhi.n	800533c <__ssputs_r+0x8c>
 80052c2:	2390      	movs	r3, #144	; 0x90
 80052c4:	898a      	ldrh	r2, [r1, #12]
 80052c6:	00db      	lsls	r3, r3, #3
 80052c8:	421a      	tst	r2, r3
 80052ca:	d034      	beq.n	8005336 <__ssputs_r+0x86>
 80052cc:	6909      	ldr	r1, [r1, #16]
 80052ce:	6823      	ldr	r3, [r4, #0]
 80052d0:	6960      	ldr	r0, [r4, #20]
 80052d2:	1a5b      	subs	r3, r3, r1
 80052d4:	9302      	str	r3, [sp, #8]
 80052d6:	2303      	movs	r3, #3
 80052d8:	4343      	muls	r3, r0
 80052da:	0fdd      	lsrs	r5, r3, #31
 80052dc:	18ed      	adds	r5, r5, r3
 80052de:	9b01      	ldr	r3, [sp, #4]
 80052e0:	9802      	ldr	r0, [sp, #8]
 80052e2:	3301      	adds	r3, #1
 80052e4:	181b      	adds	r3, r3, r0
 80052e6:	106d      	asrs	r5, r5, #1
 80052e8:	42ab      	cmp	r3, r5
 80052ea:	d900      	bls.n	80052ee <__ssputs_r+0x3e>
 80052ec:	001d      	movs	r5, r3
 80052ee:	0553      	lsls	r3, r2, #21
 80052f0:	d532      	bpl.n	8005358 <__ssputs_r+0xa8>
 80052f2:	0029      	movs	r1, r5
 80052f4:	0038      	movs	r0, r7
 80052f6:	f000 fb53 	bl	80059a0 <_malloc_r>
 80052fa:	1e06      	subs	r6, r0, #0
 80052fc:	d109      	bne.n	8005312 <__ssputs_r+0x62>
 80052fe:	230c      	movs	r3, #12
 8005300:	603b      	str	r3, [r7, #0]
 8005302:	2340      	movs	r3, #64	; 0x40
 8005304:	2001      	movs	r0, #1
 8005306:	89a2      	ldrh	r2, [r4, #12]
 8005308:	4240      	negs	r0, r0
 800530a:	4313      	orrs	r3, r2
 800530c:	81a3      	strh	r3, [r4, #12]
 800530e:	b005      	add	sp, #20
 8005310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005312:	9a02      	ldr	r2, [sp, #8]
 8005314:	6921      	ldr	r1, [r4, #16]
 8005316:	f000 faba 	bl	800588e <memcpy>
 800531a:	89a3      	ldrh	r3, [r4, #12]
 800531c:	4a14      	ldr	r2, [pc, #80]	; (8005370 <__ssputs_r+0xc0>)
 800531e:	401a      	ands	r2, r3
 8005320:	2380      	movs	r3, #128	; 0x80
 8005322:	4313      	orrs	r3, r2
 8005324:	81a3      	strh	r3, [r4, #12]
 8005326:	9b02      	ldr	r3, [sp, #8]
 8005328:	6126      	str	r6, [r4, #16]
 800532a:	18f6      	adds	r6, r6, r3
 800532c:	6026      	str	r6, [r4, #0]
 800532e:	6165      	str	r5, [r4, #20]
 8005330:	9e01      	ldr	r6, [sp, #4]
 8005332:	1aed      	subs	r5, r5, r3
 8005334:	60a5      	str	r5, [r4, #8]
 8005336:	9b01      	ldr	r3, [sp, #4]
 8005338:	429e      	cmp	r6, r3
 800533a:	d900      	bls.n	800533e <__ssputs_r+0x8e>
 800533c:	9e01      	ldr	r6, [sp, #4]
 800533e:	0032      	movs	r2, r6
 8005340:	9903      	ldr	r1, [sp, #12]
 8005342:	6820      	ldr	r0, [r4, #0]
 8005344:	f000 faac 	bl	80058a0 <memmove>
 8005348:	68a3      	ldr	r3, [r4, #8]
 800534a:	2000      	movs	r0, #0
 800534c:	1b9b      	subs	r3, r3, r6
 800534e:	60a3      	str	r3, [r4, #8]
 8005350:	6823      	ldr	r3, [r4, #0]
 8005352:	199e      	adds	r6, r3, r6
 8005354:	6026      	str	r6, [r4, #0]
 8005356:	e7da      	b.n	800530e <__ssputs_r+0x5e>
 8005358:	002a      	movs	r2, r5
 800535a:	0038      	movs	r0, r7
 800535c:	f000 fb96 	bl	8005a8c <_realloc_r>
 8005360:	1e06      	subs	r6, r0, #0
 8005362:	d1e0      	bne.n	8005326 <__ssputs_r+0x76>
 8005364:	0038      	movs	r0, r7
 8005366:	6921      	ldr	r1, [r4, #16]
 8005368:	f000 faae 	bl	80058c8 <_free_r>
 800536c:	e7c7      	b.n	80052fe <__ssputs_r+0x4e>
 800536e:	46c0      	nop			; (mov r8, r8)
 8005370:	fffffb7f 	.word	0xfffffb7f

08005374 <_svfiprintf_r>:
 8005374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005376:	b0a1      	sub	sp, #132	; 0x84
 8005378:	9003      	str	r0, [sp, #12]
 800537a:	001d      	movs	r5, r3
 800537c:	898b      	ldrh	r3, [r1, #12]
 800537e:	000f      	movs	r7, r1
 8005380:	0016      	movs	r6, r2
 8005382:	061b      	lsls	r3, r3, #24
 8005384:	d511      	bpl.n	80053aa <_svfiprintf_r+0x36>
 8005386:	690b      	ldr	r3, [r1, #16]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10e      	bne.n	80053aa <_svfiprintf_r+0x36>
 800538c:	2140      	movs	r1, #64	; 0x40
 800538e:	f000 fb07 	bl	80059a0 <_malloc_r>
 8005392:	6038      	str	r0, [r7, #0]
 8005394:	6138      	str	r0, [r7, #16]
 8005396:	2800      	cmp	r0, #0
 8005398:	d105      	bne.n	80053a6 <_svfiprintf_r+0x32>
 800539a:	230c      	movs	r3, #12
 800539c:	9a03      	ldr	r2, [sp, #12]
 800539e:	3801      	subs	r0, #1
 80053a0:	6013      	str	r3, [r2, #0]
 80053a2:	b021      	add	sp, #132	; 0x84
 80053a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053a6:	2340      	movs	r3, #64	; 0x40
 80053a8:	617b      	str	r3, [r7, #20]
 80053aa:	2300      	movs	r3, #0
 80053ac:	ac08      	add	r4, sp, #32
 80053ae:	6163      	str	r3, [r4, #20]
 80053b0:	3320      	adds	r3, #32
 80053b2:	7663      	strb	r3, [r4, #25]
 80053b4:	3310      	adds	r3, #16
 80053b6:	76a3      	strb	r3, [r4, #26]
 80053b8:	9507      	str	r5, [sp, #28]
 80053ba:	0035      	movs	r5, r6
 80053bc:	782b      	ldrb	r3, [r5, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d001      	beq.n	80053c6 <_svfiprintf_r+0x52>
 80053c2:	2b25      	cmp	r3, #37	; 0x25
 80053c4:	d147      	bne.n	8005456 <_svfiprintf_r+0xe2>
 80053c6:	1bab      	subs	r3, r5, r6
 80053c8:	9305      	str	r3, [sp, #20]
 80053ca:	42b5      	cmp	r5, r6
 80053cc:	d00c      	beq.n	80053e8 <_svfiprintf_r+0x74>
 80053ce:	0032      	movs	r2, r6
 80053d0:	0039      	movs	r1, r7
 80053d2:	9803      	ldr	r0, [sp, #12]
 80053d4:	f7ff ff6c 	bl	80052b0 <__ssputs_r>
 80053d8:	1c43      	adds	r3, r0, #1
 80053da:	d100      	bne.n	80053de <_svfiprintf_r+0x6a>
 80053dc:	e0ae      	b.n	800553c <_svfiprintf_r+0x1c8>
 80053de:	6962      	ldr	r2, [r4, #20]
 80053e0:	9b05      	ldr	r3, [sp, #20]
 80053e2:	4694      	mov	ip, r2
 80053e4:	4463      	add	r3, ip
 80053e6:	6163      	str	r3, [r4, #20]
 80053e8:	782b      	ldrb	r3, [r5, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d100      	bne.n	80053f0 <_svfiprintf_r+0x7c>
 80053ee:	e0a5      	b.n	800553c <_svfiprintf_r+0x1c8>
 80053f0:	2201      	movs	r2, #1
 80053f2:	2300      	movs	r3, #0
 80053f4:	4252      	negs	r2, r2
 80053f6:	6062      	str	r2, [r4, #4]
 80053f8:	a904      	add	r1, sp, #16
 80053fa:	3254      	adds	r2, #84	; 0x54
 80053fc:	1852      	adds	r2, r2, r1
 80053fe:	1c6e      	adds	r6, r5, #1
 8005400:	6023      	str	r3, [r4, #0]
 8005402:	60e3      	str	r3, [r4, #12]
 8005404:	60a3      	str	r3, [r4, #8]
 8005406:	7013      	strb	r3, [r2, #0]
 8005408:	65a3      	str	r3, [r4, #88]	; 0x58
 800540a:	2205      	movs	r2, #5
 800540c:	7831      	ldrb	r1, [r6, #0]
 800540e:	4854      	ldr	r0, [pc, #336]	; (8005560 <_svfiprintf_r+0x1ec>)
 8005410:	f000 fa32 	bl	8005878 <memchr>
 8005414:	1c75      	adds	r5, r6, #1
 8005416:	2800      	cmp	r0, #0
 8005418:	d11f      	bne.n	800545a <_svfiprintf_r+0xe6>
 800541a:	6822      	ldr	r2, [r4, #0]
 800541c:	06d3      	lsls	r3, r2, #27
 800541e:	d504      	bpl.n	800542a <_svfiprintf_r+0xb6>
 8005420:	2353      	movs	r3, #83	; 0x53
 8005422:	a904      	add	r1, sp, #16
 8005424:	185b      	adds	r3, r3, r1
 8005426:	2120      	movs	r1, #32
 8005428:	7019      	strb	r1, [r3, #0]
 800542a:	0713      	lsls	r3, r2, #28
 800542c:	d504      	bpl.n	8005438 <_svfiprintf_r+0xc4>
 800542e:	2353      	movs	r3, #83	; 0x53
 8005430:	a904      	add	r1, sp, #16
 8005432:	185b      	adds	r3, r3, r1
 8005434:	212b      	movs	r1, #43	; 0x2b
 8005436:	7019      	strb	r1, [r3, #0]
 8005438:	7833      	ldrb	r3, [r6, #0]
 800543a:	2b2a      	cmp	r3, #42	; 0x2a
 800543c:	d016      	beq.n	800546c <_svfiprintf_r+0xf8>
 800543e:	0035      	movs	r5, r6
 8005440:	2100      	movs	r1, #0
 8005442:	200a      	movs	r0, #10
 8005444:	68e3      	ldr	r3, [r4, #12]
 8005446:	782a      	ldrb	r2, [r5, #0]
 8005448:	1c6e      	adds	r6, r5, #1
 800544a:	3a30      	subs	r2, #48	; 0x30
 800544c:	2a09      	cmp	r2, #9
 800544e:	d94e      	bls.n	80054ee <_svfiprintf_r+0x17a>
 8005450:	2900      	cmp	r1, #0
 8005452:	d111      	bne.n	8005478 <_svfiprintf_r+0x104>
 8005454:	e017      	b.n	8005486 <_svfiprintf_r+0x112>
 8005456:	3501      	adds	r5, #1
 8005458:	e7b0      	b.n	80053bc <_svfiprintf_r+0x48>
 800545a:	4b41      	ldr	r3, [pc, #260]	; (8005560 <_svfiprintf_r+0x1ec>)
 800545c:	6822      	ldr	r2, [r4, #0]
 800545e:	1ac0      	subs	r0, r0, r3
 8005460:	2301      	movs	r3, #1
 8005462:	4083      	lsls	r3, r0
 8005464:	4313      	orrs	r3, r2
 8005466:	002e      	movs	r6, r5
 8005468:	6023      	str	r3, [r4, #0]
 800546a:	e7ce      	b.n	800540a <_svfiprintf_r+0x96>
 800546c:	9b07      	ldr	r3, [sp, #28]
 800546e:	1d19      	adds	r1, r3, #4
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	9107      	str	r1, [sp, #28]
 8005474:	2b00      	cmp	r3, #0
 8005476:	db01      	blt.n	800547c <_svfiprintf_r+0x108>
 8005478:	930b      	str	r3, [sp, #44]	; 0x2c
 800547a:	e004      	b.n	8005486 <_svfiprintf_r+0x112>
 800547c:	425b      	negs	r3, r3
 800547e:	60e3      	str	r3, [r4, #12]
 8005480:	2302      	movs	r3, #2
 8005482:	4313      	orrs	r3, r2
 8005484:	6023      	str	r3, [r4, #0]
 8005486:	782b      	ldrb	r3, [r5, #0]
 8005488:	2b2e      	cmp	r3, #46	; 0x2e
 800548a:	d10a      	bne.n	80054a2 <_svfiprintf_r+0x12e>
 800548c:	786b      	ldrb	r3, [r5, #1]
 800548e:	2b2a      	cmp	r3, #42	; 0x2a
 8005490:	d135      	bne.n	80054fe <_svfiprintf_r+0x18a>
 8005492:	9b07      	ldr	r3, [sp, #28]
 8005494:	3502      	adds	r5, #2
 8005496:	1d1a      	adds	r2, r3, #4
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	9207      	str	r2, [sp, #28]
 800549c:	2b00      	cmp	r3, #0
 800549e:	db2b      	blt.n	80054f8 <_svfiprintf_r+0x184>
 80054a0:	9309      	str	r3, [sp, #36]	; 0x24
 80054a2:	4e30      	ldr	r6, [pc, #192]	; (8005564 <_svfiprintf_r+0x1f0>)
 80054a4:	2203      	movs	r2, #3
 80054a6:	0030      	movs	r0, r6
 80054a8:	7829      	ldrb	r1, [r5, #0]
 80054aa:	f000 f9e5 	bl	8005878 <memchr>
 80054ae:	2800      	cmp	r0, #0
 80054b0:	d006      	beq.n	80054c0 <_svfiprintf_r+0x14c>
 80054b2:	2340      	movs	r3, #64	; 0x40
 80054b4:	1b80      	subs	r0, r0, r6
 80054b6:	4083      	lsls	r3, r0
 80054b8:	6822      	ldr	r2, [r4, #0]
 80054ba:	3501      	adds	r5, #1
 80054bc:	4313      	orrs	r3, r2
 80054be:	6023      	str	r3, [r4, #0]
 80054c0:	7829      	ldrb	r1, [r5, #0]
 80054c2:	2206      	movs	r2, #6
 80054c4:	4828      	ldr	r0, [pc, #160]	; (8005568 <_svfiprintf_r+0x1f4>)
 80054c6:	1c6e      	adds	r6, r5, #1
 80054c8:	7621      	strb	r1, [r4, #24]
 80054ca:	f000 f9d5 	bl	8005878 <memchr>
 80054ce:	2800      	cmp	r0, #0
 80054d0:	d03c      	beq.n	800554c <_svfiprintf_r+0x1d8>
 80054d2:	4b26      	ldr	r3, [pc, #152]	; (800556c <_svfiprintf_r+0x1f8>)
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d125      	bne.n	8005524 <_svfiprintf_r+0x1b0>
 80054d8:	2207      	movs	r2, #7
 80054da:	9b07      	ldr	r3, [sp, #28]
 80054dc:	3307      	adds	r3, #7
 80054de:	4393      	bics	r3, r2
 80054e0:	3308      	adds	r3, #8
 80054e2:	9307      	str	r3, [sp, #28]
 80054e4:	6963      	ldr	r3, [r4, #20]
 80054e6:	9a04      	ldr	r2, [sp, #16]
 80054e8:	189b      	adds	r3, r3, r2
 80054ea:	6163      	str	r3, [r4, #20]
 80054ec:	e765      	b.n	80053ba <_svfiprintf_r+0x46>
 80054ee:	4343      	muls	r3, r0
 80054f0:	0035      	movs	r5, r6
 80054f2:	2101      	movs	r1, #1
 80054f4:	189b      	adds	r3, r3, r2
 80054f6:	e7a6      	b.n	8005446 <_svfiprintf_r+0xd2>
 80054f8:	2301      	movs	r3, #1
 80054fa:	425b      	negs	r3, r3
 80054fc:	e7d0      	b.n	80054a0 <_svfiprintf_r+0x12c>
 80054fe:	2300      	movs	r3, #0
 8005500:	200a      	movs	r0, #10
 8005502:	001a      	movs	r2, r3
 8005504:	3501      	adds	r5, #1
 8005506:	6063      	str	r3, [r4, #4]
 8005508:	7829      	ldrb	r1, [r5, #0]
 800550a:	1c6e      	adds	r6, r5, #1
 800550c:	3930      	subs	r1, #48	; 0x30
 800550e:	2909      	cmp	r1, #9
 8005510:	d903      	bls.n	800551a <_svfiprintf_r+0x1a6>
 8005512:	2b00      	cmp	r3, #0
 8005514:	d0c5      	beq.n	80054a2 <_svfiprintf_r+0x12e>
 8005516:	9209      	str	r2, [sp, #36]	; 0x24
 8005518:	e7c3      	b.n	80054a2 <_svfiprintf_r+0x12e>
 800551a:	4342      	muls	r2, r0
 800551c:	0035      	movs	r5, r6
 800551e:	2301      	movs	r3, #1
 8005520:	1852      	adds	r2, r2, r1
 8005522:	e7f1      	b.n	8005508 <_svfiprintf_r+0x194>
 8005524:	ab07      	add	r3, sp, #28
 8005526:	9300      	str	r3, [sp, #0]
 8005528:	003a      	movs	r2, r7
 800552a:	0021      	movs	r1, r4
 800552c:	4b10      	ldr	r3, [pc, #64]	; (8005570 <_svfiprintf_r+0x1fc>)
 800552e:	9803      	ldr	r0, [sp, #12]
 8005530:	e000      	b.n	8005534 <_svfiprintf_r+0x1c0>
 8005532:	bf00      	nop
 8005534:	9004      	str	r0, [sp, #16]
 8005536:	9b04      	ldr	r3, [sp, #16]
 8005538:	3301      	adds	r3, #1
 800553a:	d1d3      	bne.n	80054e4 <_svfiprintf_r+0x170>
 800553c:	89bb      	ldrh	r3, [r7, #12]
 800553e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005540:	065b      	lsls	r3, r3, #25
 8005542:	d400      	bmi.n	8005546 <_svfiprintf_r+0x1d2>
 8005544:	e72d      	b.n	80053a2 <_svfiprintf_r+0x2e>
 8005546:	2001      	movs	r0, #1
 8005548:	4240      	negs	r0, r0
 800554a:	e72a      	b.n	80053a2 <_svfiprintf_r+0x2e>
 800554c:	ab07      	add	r3, sp, #28
 800554e:	9300      	str	r3, [sp, #0]
 8005550:	003a      	movs	r2, r7
 8005552:	0021      	movs	r1, r4
 8005554:	4b06      	ldr	r3, [pc, #24]	; (8005570 <_svfiprintf_r+0x1fc>)
 8005556:	9803      	ldr	r0, [sp, #12]
 8005558:	f000 f87c 	bl	8005654 <_printf_i>
 800555c:	e7ea      	b.n	8005534 <_svfiprintf_r+0x1c0>
 800555e:	46c0      	nop			; (mov r8, r8)
 8005560:	08005dc4 	.word	0x08005dc4
 8005564:	08005dca 	.word	0x08005dca
 8005568:	08005dce 	.word	0x08005dce
 800556c:	00000000 	.word	0x00000000
 8005570:	080052b1 	.word	0x080052b1

08005574 <_printf_common>:
 8005574:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005576:	0015      	movs	r5, r2
 8005578:	9301      	str	r3, [sp, #4]
 800557a:	688a      	ldr	r2, [r1, #8]
 800557c:	690b      	ldr	r3, [r1, #16]
 800557e:	000c      	movs	r4, r1
 8005580:	9000      	str	r0, [sp, #0]
 8005582:	4293      	cmp	r3, r2
 8005584:	da00      	bge.n	8005588 <_printf_common+0x14>
 8005586:	0013      	movs	r3, r2
 8005588:	0022      	movs	r2, r4
 800558a:	602b      	str	r3, [r5, #0]
 800558c:	3243      	adds	r2, #67	; 0x43
 800558e:	7812      	ldrb	r2, [r2, #0]
 8005590:	2a00      	cmp	r2, #0
 8005592:	d001      	beq.n	8005598 <_printf_common+0x24>
 8005594:	3301      	adds	r3, #1
 8005596:	602b      	str	r3, [r5, #0]
 8005598:	6823      	ldr	r3, [r4, #0]
 800559a:	069b      	lsls	r3, r3, #26
 800559c:	d502      	bpl.n	80055a4 <_printf_common+0x30>
 800559e:	682b      	ldr	r3, [r5, #0]
 80055a0:	3302      	adds	r3, #2
 80055a2:	602b      	str	r3, [r5, #0]
 80055a4:	6822      	ldr	r2, [r4, #0]
 80055a6:	2306      	movs	r3, #6
 80055a8:	0017      	movs	r7, r2
 80055aa:	401f      	ands	r7, r3
 80055ac:	421a      	tst	r2, r3
 80055ae:	d027      	beq.n	8005600 <_printf_common+0x8c>
 80055b0:	0023      	movs	r3, r4
 80055b2:	3343      	adds	r3, #67	; 0x43
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	1e5a      	subs	r2, r3, #1
 80055b8:	4193      	sbcs	r3, r2
 80055ba:	6822      	ldr	r2, [r4, #0]
 80055bc:	0692      	lsls	r2, r2, #26
 80055be:	d430      	bmi.n	8005622 <_printf_common+0xae>
 80055c0:	0022      	movs	r2, r4
 80055c2:	9901      	ldr	r1, [sp, #4]
 80055c4:	9800      	ldr	r0, [sp, #0]
 80055c6:	9e08      	ldr	r6, [sp, #32]
 80055c8:	3243      	adds	r2, #67	; 0x43
 80055ca:	47b0      	blx	r6
 80055cc:	1c43      	adds	r3, r0, #1
 80055ce:	d025      	beq.n	800561c <_printf_common+0xa8>
 80055d0:	2306      	movs	r3, #6
 80055d2:	6820      	ldr	r0, [r4, #0]
 80055d4:	682a      	ldr	r2, [r5, #0]
 80055d6:	68e1      	ldr	r1, [r4, #12]
 80055d8:	2500      	movs	r5, #0
 80055da:	4003      	ands	r3, r0
 80055dc:	2b04      	cmp	r3, #4
 80055de:	d103      	bne.n	80055e8 <_printf_common+0x74>
 80055e0:	1a8d      	subs	r5, r1, r2
 80055e2:	43eb      	mvns	r3, r5
 80055e4:	17db      	asrs	r3, r3, #31
 80055e6:	401d      	ands	r5, r3
 80055e8:	68a3      	ldr	r3, [r4, #8]
 80055ea:	6922      	ldr	r2, [r4, #16]
 80055ec:	4293      	cmp	r3, r2
 80055ee:	dd01      	ble.n	80055f4 <_printf_common+0x80>
 80055f0:	1a9b      	subs	r3, r3, r2
 80055f2:	18ed      	adds	r5, r5, r3
 80055f4:	2700      	movs	r7, #0
 80055f6:	42bd      	cmp	r5, r7
 80055f8:	d120      	bne.n	800563c <_printf_common+0xc8>
 80055fa:	2000      	movs	r0, #0
 80055fc:	e010      	b.n	8005620 <_printf_common+0xac>
 80055fe:	3701      	adds	r7, #1
 8005600:	68e3      	ldr	r3, [r4, #12]
 8005602:	682a      	ldr	r2, [r5, #0]
 8005604:	1a9b      	subs	r3, r3, r2
 8005606:	42bb      	cmp	r3, r7
 8005608:	ddd2      	ble.n	80055b0 <_printf_common+0x3c>
 800560a:	0022      	movs	r2, r4
 800560c:	2301      	movs	r3, #1
 800560e:	9901      	ldr	r1, [sp, #4]
 8005610:	9800      	ldr	r0, [sp, #0]
 8005612:	9e08      	ldr	r6, [sp, #32]
 8005614:	3219      	adds	r2, #25
 8005616:	47b0      	blx	r6
 8005618:	1c43      	adds	r3, r0, #1
 800561a:	d1f0      	bne.n	80055fe <_printf_common+0x8a>
 800561c:	2001      	movs	r0, #1
 800561e:	4240      	negs	r0, r0
 8005620:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005622:	2030      	movs	r0, #48	; 0x30
 8005624:	18e1      	adds	r1, r4, r3
 8005626:	3143      	adds	r1, #67	; 0x43
 8005628:	7008      	strb	r0, [r1, #0]
 800562a:	0021      	movs	r1, r4
 800562c:	1c5a      	adds	r2, r3, #1
 800562e:	3145      	adds	r1, #69	; 0x45
 8005630:	7809      	ldrb	r1, [r1, #0]
 8005632:	18a2      	adds	r2, r4, r2
 8005634:	3243      	adds	r2, #67	; 0x43
 8005636:	3302      	adds	r3, #2
 8005638:	7011      	strb	r1, [r2, #0]
 800563a:	e7c1      	b.n	80055c0 <_printf_common+0x4c>
 800563c:	0022      	movs	r2, r4
 800563e:	2301      	movs	r3, #1
 8005640:	9901      	ldr	r1, [sp, #4]
 8005642:	9800      	ldr	r0, [sp, #0]
 8005644:	9e08      	ldr	r6, [sp, #32]
 8005646:	321a      	adds	r2, #26
 8005648:	47b0      	blx	r6
 800564a:	1c43      	adds	r3, r0, #1
 800564c:	d0e6      	beq.n	800561c <_printf_common+0xa8>
 800564e:	3701      	adds	r7, #1
 8005650:	e7d1      	b.n	80055f6 <_printf_common+0x82>
	...

08005654 <_printf_i>:
 8005654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005656:	b08b      	sub	sp, #44	; 0x2c
 8005658:	9206      	str	r2, [sp, #24]
 800565a:	000a      	movs	r2, r1
 800565c:	3243      	adds	r2, #67	; 0x43
 800565e:	9307      	str	r3, [sp, #28]
 8005660:	9005      	str	r0, [sp, #20]
 8005662:	9204      	str	r2, [sp, #16]
 8005664:	7e0a      	ldrb	r2, [r1, #24]
 8005666:	000c      	movs	r4, r1
 8005668:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800566a:	2a78      	cmp	r2, #120	; 0x78
 800566c:	d807      	bhi.n	800567e <_printf_i+0x2a>
 800566e:	2a62      	cmp	r2, #98	; 0x62
 8005670:	d809      	bhi.n	8005686 <_printf_i+0x32>
 8005672:	2a00      	cmp	r2, #0
 8005674:	d100      	bne.n	8005678 <_printf_i+0x24>
 8005676:	e0c1      	b.n	80057fc <_printf_i+0x1a8>
 8005678:	2a58      	cmp	r2, #88	; 0x58
 800567a:	d100      	bne.n	800567e <_printf_i+0x2a>
 800567c:	e08c      	b.n	8005798 <_printf_i+0x144>
 800567e:	0026      	movs	r6, r4
 8005680:	3642      	adds	r6, #66	; 0x42
 8005682:	7032      	strb	r2, [r6, #0]
 8005684:	e022      	b.n	80056cc <_printf_i+0x78>
 8005686:	0010      	movs	r0, r2
 8005688:	3863      	subs	r0, #99	; 0x63
 800568a:	2815      	cmp	r0, #21
 800568c:	d8f7      	bhi.n	800567e <_printf_i+0x2a>
 800568e:	f7fa fd3b 	bl	8000108 <__gnu_thumb1_case_shi>
 8005692:	0016      	.short	0x0016
 8005694:	fff6001f 	.word	0xfff6001f
 8005698:	fff6fff6 	.word	0xfff6fff6
 800569c:	001ffff6 	.word	0x001ffff6
 80056a0:	fff6fff6 	.word	0xfff6fff6
 80056a4:	fff6fff6 	.word	0xfff6fff6
 80056a8:	003600a8 	.word	0x003600a8
 80056ac:	fff6009a 	.word	0xfff6009a
 80056b0:	00b9fff6 	.word	0x00b9fff6
 80056b4:	0036fff6 	.word	0x0036fff6
 80056b8:	fff6fff6 	.word	0xfff6fff6
 80056bc:	009e      	.short	0x009e
 80056be:	0026      	movs	r6, r4
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	3642      	adds	r6, #66	; 0x42
 80056c4:	1d11      	adds	r1, r2, #4
 80056c6:	6019      	str	r1, [r3, #0]
 80056c8:	6813      	ldr	r3, [r2, #0]
 80056ca:	7033      	strb	r3, [r6, #0]
 80056cc:	2301      	movs	r3, #1
 80056ce:	e0a7      	b.n	8005820 <_printf_i+0x1cc>
 80056d0:	6808      	ldr	r0, [r1, #0]
 80056d2:	6819      	ldr	r1, [r3, #0]
 80056d4:	1d0a      	adds	r2, r1, #4
 80056d6:	0605      	lsls	r5, r0, #24
 80056d8:	d50b      	bpl.n	80056f2 <_printf_i+0x9e>
 80056da:	680d      	ldr	r5, [r1, #0]
 80056dc:	601a      	str	r2, [r3, #0]
 80056de:	2d00      	cmp	r5, #0
 80056e0:	da03      	bge.n	80056ea <_printf_i+0x96>
 80056e2:	232d      	movs	r3, #45	; 0x2d
 80056e4:	9a04      	ldr	r2, [sp, #16]
 80056e6:	426d      	negs	r5, r5
 80056e8:	7013      	strb	r3, [r2, #0]
 80056ea:	4b61      	ldr	r3, [pc, #388]	; (8005870 <_printf_i+0x21c>)
 80056ec:	270a      	movs	r7, #10
 80056ee:	9303      	str	r3, [sp, #12]
 80056f0:	e01b      	b.n	800572a <_printf_i+0xd6>
 80056f2:	680d      	ldr	r5, [r1, #0]
 80056f4:	601a      	str	r2, [r3, #0]
 80056f6:	0641      	lsls	r1, r0, #25
 80056f8:	d5f1      	bpl.n	80056de <_printf_i+0x8a>
 80056fa:	b22d      	sxth	r5, r5
 80056fc:	e7ef      	b.n	80056de <_printf_i+0x8a>
 80056fe:	680d      	ldr	r5, [r1, #0]
 8005700:	6819      	ldr	r1, [r3, #0]
 8005702:	1d08      	adds	r0, r1, #4
 8005704:	6018      	str	r0, [r3, #0]
 8005706:	062e      	lsls	r6, r5, #24
 8005708:	d501      	bpl.n	800570e <_printf_i+0xba>
 800570a:	680d      	ldr	r5, [r1, #0]
 800570c:	e003      	b.n	8005716 <_printf_i+0xc2>
 800570e:	066d      	lsls	r5, r5, #25
 8005710:	d5fb      	bpl.n	800570a <_printf_i+0xb6>
 8005712:	680d      	ldr	r5, [r1, #0]
 8005714:	b2ad      	uxth	r5, r5
 8005716:	4b56      	ldr	r3, [pc, #344]	; (8005870 <_printf_i+0x21c>)
 8005718:	2708      	movs	r7, #8
 800571a:	9303      	str	r3, [sp, #12]
 800571c:	2a6f      	cmp	r2, #111	; 0x6f
 800571e:	d000      	beq.n	8005722 <_printf_i+0xce>
 8005720:	3702      	adds	r7, #2
 8005722:	0023      	movs	r3, r4
 8005724:	2200      	movs	r2, #0
 8005726:	3343      	adds	r3, #67	; 0x43
 8005728:	701a      	strb	r2, [r3, #0]
 800572a:	6863      	ldr	r3, [r4, #4]
 800572c:	60a3      	str	r3, [r4, #8]
 800572e:	2b00      	cmp	r3, #0
 8005730:	db03      	blt.n	800573a <_printf_i+0xe6>
 8005732:	2204      	movs	r2, #4
 8005734:	6821      	ldr	r1, [r4, #0]
 8005736:	4391      	bics	r1, r2
 8005738:	6021      	str	r1, [r4, #0]
 800573a:	2d00      	cmp	r5, #0
 800573c:	d102      	bne.n	8005744 <_printf_i+0xf0>
 800573e:	9e04      	ldr	r6, [sp, #16]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00c      	beq.n	800575e <_printf_i+0x10a>
 8005744:	9e04      	ldr	r6, [sp, #16]
 8005746:	0028      	movs	r0, r5
 8005748:	0039      	movs	r1, r7
 800574a:	f7fa fd6d 	bl	8000228 <__aeabi_uidivmod>
 800574e:	9b03      	ldr	r3, [sp, #12]
 8005750:	3e01      	subs	r6, #1
 8005752:	5c5b      	ldrb	r3, [r3, r1]
 8005754:	7033      	strb	r3, [r6, #0]
 8005756:	002b      	movs	r3, r5
 8005758:	0005      	movs	r5, r0
 800575a:	429f      	cmp	r7, r3
 800575c:	d9f3      	bls.n	8005746 <_printf_i+0xf2>
 800575e:	2f08      	cmp	r7, #8
 8005760:	d109      	bne.n	8005776 <_printf_i+0x122>
 8005762:	6823      	ldr	r3, [r4, #0]
 8005764:	07db      	lsls	r3, r3, #31
 8005766:	d506      	bpl.n	8005776 <_printf_i+0x122>
 8005768:	6863      	ldr	r3, [r4, #4]
 800576a:	6922      	ldr	r2, [r4, #16]
 800576c:	4293      	cmp	r3, r2
 800576e:	dc02      	bgt.n	8005776 <_printf_i+0x122>
 8005770:	2330      	movs	r3, #48	; 0x30
 8005772:	3e01      	subs	r6, #1
 8005774:	7033      	strb	r3, [r6, #0]
 8005776:	9b04      	ldr	r3, [sp, #16]
 8005778:	1b9b      	subs	r3, r3, r6
 800577a:	6123      	str	r3, [r4, #16]
 800577c:	9b07      	ldr	r3, [sp, #28]
 800577e:	0021      	movs	r1, r4
 8005780:	9300      	str	r3, [sp, #0]
 8005782:	9805      	ldr	r0, [sp, #20]
 8005784:	9b06      	ldr	r3, [sp, #24]
 8005786:	aa09      	add	r2, sp, #36	; 0x24
 8005788:	f7ff fef4 	bl	8005574 <_printf_common>
 800578c:	1c43      	adds	r3, r0, #1
 800578e:	d14c      	bne.n	800582a <_printf_i+0x1d6>
 8005790:	2001      	movs	r0, #1
 8005792:	4240      	negs	r0, r0
 8005794:	b00b      	add	sp, #44	; 0x2c
 8005796:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005798:	3145      	adds	r1, #69	; 0x45
 800579a:	700a      	strb	r2, [r1, #0]
 800579c:	4a34      	ldr	r2, [pc, #208]	; (8005870 <_printf_i+0x21c>)
 800579e:	9203      	str	r2, [sp, #12]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	6821      	ldr	r1, [r4, #0]
 80057a4:	ca20      	ldmia	r2!, {r5}
 80057a6:	601a      	str	r2, [r3, #0]
 80057a8:	0608      	lsls	r0, r1, #24
 80057aa:	d516      	bpl.n	80057da <_printf_i+0x186>
 80057ac:	07cb      	lsls	r3, r1, #31
 80057ae:	d502      	bpl.n	80057b6 <_printf_i+0x162>
 80057b0:	2320      	movs	r3, #32
 80057b2:	4319      	orrs	r1, r3
 80057b4:	6021      	str	r1, [r4, #0]
 80057b6:	2710      	movs	r7, #16
 80057b8:	2d00      	cmp	r5, #0
 80057ba:	d1b2      	bne.n	8005722 <_printf_i+0xce>
 80057bc:	2320      	movs	r3, #32
 80057be:	6822      	ldr	r2, [r4, #0]
 80057c0:	439a      	bics	r2, r3
 80057c2:	6022      	str	r2, [r4, #0]
 80057c4:	e7ad      	b.n	8005722 <_printf_i+0xce>
 80057c6:	2220      	movs	r2, #32
 80057c8:	6809      	ldr	r1, [r1, #0]
 80057ca:	430a      	orrs	r2, r1
 80057cc:	6022      	str	r2, [r4, #0]
 80057ce:	0022      	movs	r2, r4
 80057d0:	2178      	movs	r1, #120	; 0x78
 80057d2:	3245      	adds	r2, #69	; 0x45
 80057d4:	7011      	strb	r1, [r2, #0]
 80057d6:	4a27      	ldr	r2, [pc, #156]	; (8005874 <_printf_i+0x220>)
 80057d8:	e7e1      	b.n	800579e <_printf_i+0x14a>
 80057da:	0648      	lsls	r0, r1, #25
 80057dc:	d5e6      	bpl.n	80057ac <_printf_i+0x158>
 80057de:	b2ad      	uxth	r5, r5
 80057e0:	e7e4      	b.n	80057ac <_printf_i+0x158>
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	680d      	ldr	r5, [r1, #0]
 80057e6:	1d10      	adds	r0, r2, #4
 80057e8:	6949      	ldr	r1, [r1, #20]
 80057ea:	6018      	str	r0, [r3, #0]
 80057ec:	6813      	ldr	r3, [r2, #0]
 80057ee:	062e      	lsls	r6, r5, #24
 80057f0:	d501      	bpl.n	80057f6 <_printf_i+0x1a2>
 80057f2:	6019      	str	r1, [r3, #0]
 80057f4:	e002      	b.n	80057fc <_printf_i+0x1a8>
 80057f6:	066d      	lsls	r5, r5, #25
 80057f8:	d5fb      	bpl.n	80057f2 <_printf_i+0x19e>
 80057fa:	8019      	strh	r1, [r3, #0]
 80057fc:	2300      	movs	r3, #0
 80057fe:	9e04      	ldr	r6, [sp, #16]
 8005800:	6123      	str	r3, [r4, #16]
 8005802:	e7bb      	b.n	800577c <_printf_i+0x128>
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	1d11      	adds	r1, r2, #4
 8005808:	6019      	str	r1, [r3, #0]
 800580a:	6816      	ldr	r6, [r2, #0]
 800580c:	2100      	movs	r1, #0
 800580e:	0030      	movs	r0, r6
 8005810:	6862      	ldr	r2, [r4, #4]
 8005812:	f000 f831 	bl	8005878 <memchr>
 8005816:	2800      	cmp	r0, #0
 8005818:	d001      	beq.n	800581e <_printf_i+0x1ca>
 800581a:	1b80      	subs	r0, r0, r6
 800581c:	6060      	str	r0, [r4, #4]
 800581e:	6863      	ldr	r3, [r4, #4]
 8005820:	6123      	str	r3, [r4, #16]
 8005822:	2300      	movs	r3, #0
 8005824:	9a04      	ldr	r2, [sp, #16]
 8005826:	7013      	strb	r3, [r2, #0]
 8005828:	e7a8      	b.n	800577c <_printf_i+0x128>
 800582a:	6923      	ldr	r3, [r4, #16]
 800582c:	0032      	movs	r2, r6
 800582e:	9906      	ldr	r1, [sp, #24]
 8005830:	9805      	ldr	r0, [sp, #20]
 8005832:	9d07      	ldr	r5, [sp, #28]
 8005834:	47a8      	blx	r5
 8005836:	1c43      	adds	r3, r0, #1
 8005838:	d0aa      	beq.n	8005790 <_printf_i+0x13c>
 800583a:	6823      	ldr	r3, [r4, #0]
 800583c:	079b      	lsls	r3, r3, #30
 800583e:	d415      	bmi.n	800586c <_printf_i+0x218>
 8005840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005842:	68e0      	ldr	r0, [r4, #12]
 8005844:	4298      	cmp	r0, r3
 8005846:	daa5      	bge.n	8005794 <_printf_i+0x140>
 8005848:	0018      	movs	r0, r3
 800584a:	e7a3      	b.n	8005794 <_printf_i+0x140>
 800584c:	0022      	movs	r2, r4
 800584e:	2301      	movs	r3, #1
 8005850:	9906      	ldr	r1, [sp, #24]
 8005852:	9805      	ldr	r0, [sp, #20]
 8005854:	9e07      	ldr	r6, [sp, #28]
 8005856:	3219      	adds	r2, #25
 8005858:	47b0      	blx	r6
 800585a:	1c43      	adds	r3, r0, #1
 800585c:	d098      	beq.n	8005790 <_printf_i+0x13c>
 800585e:	3501      	adds	r5, #1
 8005860:	68e3      	ldr	r3, [r4, #12]
 8005862:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005864:	1a9b      	subs	r3, r3, r2
 8005866:	42ab      	cmp	r3, r5
 8005868:	dcf0      	bgt.n	800584c <_printf_i+0x1f8>
 800586a:	e7e9      	b.n	8005840 <_printf_i+0x1ec>
 800586c:	2500      	movs	r5, #0
 800586e:	e7f7      	b.n	8005860 <_printf_i+0x20c>
 8005870:	08005dd5 	.word	0x08005dd5
 8005874:	08005de6 	.word	0x08005de6

08005878 <memchr>:
 8005878:	b2c9      	uxtb	r1, r1
 800587a:	1882      	adds	r2, r0, r2
 800587c:	4290      	cmp	r0, r2
 800587e:	d101      	bne.n	8005884 <memchr+0xc>
 8005880:	2000      	movs	r0, #0
 8005882:	4770      	bx	lr
 8005884:	7803      	ldrb	r3, [r0, #0]
 8005886:	428b      	cmp	r3, r1
 8005888:	d0fb      	beq.n	8005882 <memchr+0xa>
 800588a:	3001      	adds	r0, #1
 800588c:	e7f6      	b.n	800587c <memchr+0x4>

0800588e <memcpy>:
 800588e:	2300      	movs	r3, #0
 8005890:	b510      	push	{r4, lr}
 8005892:	429a      	cmp	r2, r3
 8005894:	d100      	bne.n	8005898 <memcpy+0xa>
 8005896:	bd10      	pop	{r4, pc}
 8005898:	5ccc      	ldrb	r4, [r1, r3]
 800589a:	54c4      	strb	r4, [r0, r3]
 800589c:	3301      	adds	r3, #1
 800589e:	e7f8      	b.n	8005892 <memcpy+0x4>

080058a0 <memmove>:
 80058a0:	b510      	push	{r4, lr}
 80058a2:	4288      	cmp	r0, r1
 80058a4:	d902      	bls.n	80058ac <memmove+0xc>
 80058a6:	188b      	adds	r3, r1, r2
 80058a8:	4298      	cmp	r0, r3
 80058aa:	d303      	bcc.n	80058b4 <memmove+0x14>
 80058ac:	2300      	movs	r3, #0
 80058ae:	e007      	b.n	80058c0 <memmove+0x20>
 80058b0:	5c8b      	ldrb	r3, [r1, r2]
 80058b2:	5483      	strb	r3, [r0, r2]
 80058b4:	3a01      	subs	r2, #1
 80058b6:	d2fb      	bcs.n	80058b0 <memmove+0x10>
 80058b8:	bd10      	pop	{r4, pc}
 80058ba:	5ccc      	ldrb	r4, [r1, r3]
 80058bc:	54c4      	strb	r4, [r0, r3]
 80058be:	3301      	adds	r3, #1
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d1fa      	bne.n	80058ba <memmove+0x1a>
 80058c4:	e7f8      	b.n	80058b8 <memmove+0x18>
	...

080058c8 <_free_r>:
 80058c8:	b570      	push	{r4, r5, r6, lr}
 80058ca:	0005      	movs	r5, r0
 80058cc:	2900      	cmp	r1, #0
 80058ce:	d010      	beq.n	80058f2 <_free_r+0x2a>
 80058d0:	1f0c      	subs	r4, r1, #4
 80058d2:	6823      	ldr	r3, [r4, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	da00      	bge.n	80058da <_free_r+0x12>
 80058d8:	18e4      	adds	r4, r4, r3
 80058da:	0028      	movs	r0, r5
 80058dc:	f000 f918 	bl	8005b10 <__malloc_lock>
 80058e0:	4a1d      	ldr	r2, [pc, #116]	; (8005958 <_free_r+0x90>)
 80058e2:	6813      	ldr	r3, [r2, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d105      	bne.n	80058f4 <_free_r+0x2c>
 80058e8:	6063      	str	r3, [r4, #4]
 80058ea:	6014      	str	r4, [r2, #0]
 80058ec:	0028      	movs	r0, r5
 80058ee:	f000 f917 	bl	8005b20 <__malloc_unlock>
 80058f2:	bd70      	pop	{r4, r5, r6, pc}
 80058f4:	42a3      	cmp	r3, r4
 80058f6:	d908      	bls.n	800590a <_free_r+0x42>
 80058f8:	6821      	ldr	r1, [r4, #0]
 80058fa:	1860      	adds	r0, r4, r1
 80058fc:	4283      	cmp	r3, r0
 80058fe:	d1f3      	bne.n	80058e8 <_free_r+0x20>
 8005900:	6818      	ldr	r0, [r3, #0]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	1841      	adds	r1, r0, r1
 8005906:	6021      	str	r1, [r4, #0]
 8005908:	e7ee      	b.n	80058e8 <_free_r+0x20>
 800590a:	001a      	movs	r2, r3
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d001      	beq.n	8005916 <_free_r+0x4e>
 8005912:	42a3      	cmp	r3, r4
 8005914:	d9f9      	bls.n	800590a <_free_r+0x42>
 8005916:	6811      	ldr	r1, [r2, #0]
 8005918:	1850      	adds	r0, r2, r1
 800591a:	42a0      	cmp	r0, r4
 800591c:	d10b      	bne.n	8005936 <_free_r+0x6e>
 800591e:	6820      	ldr	r0, [r4, #0]
 8005920:	1809      	adds	r1, r1, r0
 8005922:	1850      	adds	r0, r2, r1
 8005924:	6011      	str	r1, [r2, #0]
 8005926:	4283      	cmp	r3, r0
 8005928:	d1e0      	bne.n	80058ec <_free_r+0x24>
 800592a:	6818      	ldr	r0, [r3, #0]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	1841      	adds	r1, r0, r1
 8005930:	6011      	str	r1, [r2, #0]
 8005932:	6053      	str	r3, [r2, #4]
 8005934:	e7da      	b.n	80058ec <_free_r+0x24>
 8005936:	42a0      	cmp	r0, r4
 8005938:	d902      	bls.n	8005940 <_free_r+0x78>
 800593a:	230c      	movs	r3, #12
 800593c:	602b      	str	r3, [r5, #0]
 800593e:	e7d5      	b.n	80058ec <_free_r+0x24>
 8005940:	6821      	ldr	r1, [r4, #0]
 8005942:	1860      	adds	r0, r4, r1
 8005944:	4283      	cmp	r3, r0
 8005946:	d103      	bne.n	8005950 <_free_r+0x88>
 8005948:	6818      	ldr	r0, [r3, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	1841      	adds	r1, r0, r1
 800594e:	6021      	str	r1, [r4, #0]
 8005950:	6063      	str	r3, [r4, #4]
 8005952:	6054      	str	r4, [r2, #4]
 8005954:	e7ca      	b.n	80058ec <_free_r+0x24>
 8005956:	46c0      	nop			; (mov r8, r8)
 8005958:	200001e8 	.word	0x200001e8

0800595c <sbrk_aligned>:
 800595c:	b570      	push	{r4, r5, r6, lr}
 800595e:	4e0f      	ldr	r6, [pc, #60]	; (800599c <sbrk_aligned+0x40>)
 8005960:	000d      	movs	r5, r1
 8005962:	6831      	ldr	r1, [r6, #0]
 8005964:	0004      	movs	r4, r0
 8005966:	2900      	cmp	r1, #0
 8005968:	d102      	bne.n	8005970 <sbrk_aligned+0x14>
 800596a:	f000 f8bf 	bl	8005aec <_sbrk_r>
 800596e:	6030      	str	r0, [r6, #0]
 8005970:	0029      	movs	r1, r5
 8005972:	0020      	movs	r0, r4
 8005974:	f000 f8ba 	bl	8005aec <_sbrk_r>
 8005978:	1c43      	adds	r3, r0, #1
 800597a:	d00a      	beq.n	8005992 <sbrk_aligned+0x36>
 800597c:	2303      	movs	r3, #3
 800597e:	1cc5      	adds	r5, r0, #3
 8005980:	439d      	bics	r5, r3
 8005982:	42a8      	cmp	r0, r5
 8005984:	d007      	beq.n	8005996 <sbrk_aligned+0x3a>
 8005986:	1a29      	subs	r1, r5, r0
 8005988:	0020      	movs	r0, r4
 800598a:	f000 f8af 	bl	8005aec <_sbrk_r>
 800598e:	1c43      	adds	r3, r0, #1
 8005990:	d101      	bne.n	8005996 <sbrk_aligned+0x3a>
 8005992:	2501      	movs	r5, #1
 8005994:	426d      	negs	r5, r5
 8005996:	0028      	movs	r0, r5
 8005998:	bd70      	pop	{r4, r5, r6, pc}
 800599a:	46c0      	nop			; (mov r8, r8)
 800599c:	200001ec 	.word	0x200001ec

080059a0 <_malloc_r>:
 80059a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059a2:	2203      	movs	r2, #3
 80059a4:	1ccb      	adds	r3, r1, #3
 80059a6:	4393      	bics	r3, r2
 80059a8:	3308      	adds	r3, #8
 80059aa:	0006      	movs	r6, r0
 80059ac:	001f      	movs	r7, r3
 80059ae:	2b0c      	cmp	r3, #12
 80059b0:	d232      	bcs.n	8005a18 <_malloc_r+0x78>
 80059b2:	270c      	movs	r7, #12
 80059b4:	42b9      	cmp	r1, r7
 80059b6:	d831      	bhi.n	8005a1c <_malloc_r+0x7c>
 80059b8:	0030      	movs	r0, r6
 80059ba:	f000 f8a9 	bl	8005b10 <__malloc_lock>
 80059be:	4d32      	ldr	r5, [pc, #200]	; (8005a88 <_malloc_r+0xe8>)
 80059c0:	682b      	ldr	r3, [r5, #0]
 80059c2:	001c      	movs	r4, r3
 80059c4:	2c00      	cmp	r4, #0
 80059c6:	d12e      	bne.n	8005a26 <_malloc_r+0x86>
 80059c8:	0039      	movs	r1, r7
 80059ca:	0030      	movs	r0, r6
 80059cc:	f7ff ffc6 	bl	800595c <sbrk_aligned>
 80059d0:	0004      	movs	r4, r0
 80059d2:	1c43      	adds	r3, r0, #1
 80059d4:	d11e      	bne.n	8005a14 <_malloc_r+0x74>
 80059d6:	682c      	ldr	r4, [r5, #0]
 80059d8:	0025      	movs	r5, r4
 80059da:	2d00      	cmp	r5, #0
 80059dc:	d14a      	bne.n	8005a74 <_malloc_r+0xd4>
 80059de:	6823      	ldr	r3, [r4, #0]
 80059e0:	0029      	movs	r1, r5
 80059e2:	18e3      	adds	r3, r4, r3
 80059e4:	0030      	movs	r0, r6
 80059e6:	9301      	str	r3, [sp, #4]
 80059e8:	f000 f880 	bl	8005aec <_sbrk_r>
 80059ec:	9b01      	ldr	r3, [sp, #4]
 80059ee:	4283      	cmp	r3, r0
 80059f0:	d143      	bne.n	8005a7a <_malloc_r+0xda>
 80059f2:	6823      	ldr	r3, [r4, #0]
 80059f4:	3703      	adds	r7, #3
 80059f6:	1aff      	subs	r7, r7, r3
 80059f8:	2303      	movs	r3, #3
 80059fa:	439f      	bics	r7, r3
 80059fc:	3708      	adds	r7, #8
 80059fe:	2f0c      	cmp	r7, #12
 8005a00:	d200      	bcs.n	8005a04 <_malloc_r+0x64>
 8005a02:	270c      	movs	r7, #12
 8005a04:	0039      	movs	r1, r7
 8005a06:	0030      	movs	r0, r6
 8005a08:	f7ff ffa8 	bl	800595c <sbrk_aligned>
 8005a0c:	1c43      	adds	r3, r0, #1
 8005a0e:	d034      	beq.n	8005a7a <_malloc_r+0xda>
 8005a10:	6823      	ldr	r3, [r4, #0]
 8005a12:	19df      	adds	r7, r3, r7
 8005a14:	6027      	str	r7, [r4, #0]
 8005a16:	e013      	b.n	8005a40 <_malloc_r+0xa0>
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	dacb      	bge.n	80059b4 <_malloc_r+0x14>
 8005a1c:	230c      	movs	r3, #12
 8005a1e:	2500      	movs	r5, #0
 8005a20:	6033      	str	r3, [r6, #0]
 8005a22:	0028      	movs	r0, r5
 8005a24:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005a26:	6822      	ldr	r2, [r4, #0]
 8005a28:	1bd1      	subs	r1, r2, r7
 8005a2a:	d420      	bmi.n	8005a6e <_malloc_r+0xce>
 8005a2c:	290b      	cmp	r1, #11
 8005a2e:	d917      	bls.n	8005a60 <_malloc_r+0xc0>
 8005a30:	19e2      	adds	r2, r4, r7
 8005a32:	6027      	str	r7, [r4, #0]
 8005a34:	42a3      	cmp	r3, r4
 8005a36:	d111      	bne.n	8005a5c <_malloc_r+0xbc>
 8005a38:	602a      	str	r2, [r5, #0]
 8005a3a:	6863      	ldr	r3, [r4, #4]
 8005a3c:	6011      	str	r1, [r2, #0]
 8005a3e:	6053      	str	r3, [r2, #4]
 8005a40:	0030      	movs	r0, r6
 8005a42:	0025      	movs	r5, r4
 8005a44:	f000 f86c 	bl	8005b20 <__malloc_unlock>
 8005a48:	2207      	movs	r2, #7
 8005a4a:	350b      	adds	r5, #11
 8005a4c:	1d23      	adds	r3, r4, #4
 8005a4e:	4395      	bics	r5, r2
 8005a50:	1aea      	subs	r2, r5, r3
 8005a52:	429d      	cmp	r5, r3
 8005a54:	d0e5      	beq.n	8005a22 <_malloc_r+0x82>
 8005a56:	1b5b      	subs	r3, r3, r5
 8005a58:	50a3      	str	r3, [r4, r2]
 8005a5a:	e7e2      	b.n	8005a22 <_malloc_r+0x82>
 8005a5c:	605a      	str	r2, [r3, #4]
 8005a5e:	e7ec      	b.n	8005a3a <_malloc_r+0x9a>
 8005a60:	6862      	ldr	r2, [r4, #4]
 8005a62:	42a3      	cmp	r3, r4
 8005a64:	d101      	bne.n	8005a6a <_malloc_r+0xca>
 8005a66:	602a      	str	r2, [r5, #0]
 8005a68:	e7ea      	b.n	8005a40 <_malloc_r+0xa0>
 8005a6a:	605a      	str	r2, [r3, #4]
 8005a6c:	e7e8      	b.n	8005a40 <_malloc_r+0xa0>
 8005a6e:	0023      	movs	r3, r4
 8005a70:	6864      	ldr	r4, [r4, #4]
 8005a72:	e7a7      	b.n	80059c4 <_malloc_r+0x24>
 8005a74:	002c      	movs	r4, r5
 8005a76:	686d      	ldr	r5, [r5, #4]
 8005a78:	e7af      	b.n	80059da <_malloc_r+0x3a>
 8005a7a:	230c      	movs	r3, #12
 8005a7c:	0030      	movs	r0, r6
 8005a7e:	6033      	str	r3, [r6, #0]
 8005a80:	f000 f84e 	bl	8005b20 <__malloc_unlock>
 8005a84:	e7cd      	b.n	8005a22 <_malloc_r+0x82>
 8005a86:	46c0      	nop			; (mov r8, r8)
 8005a88:	200001e8 	.word	0x200001e8

08005a8c <_realloc_r>:
 8005a8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a8e:	0007      	movs	r7, r0
 8005a90:	000e      	movs	r6, r1
 8005a92:	0014      	movs	r4, r2
 8005a94:	2900      	cmp	r1, #0
 8005a96:	d105      	bne.n	8005aa4 <_realloc_r+0x18>
 8005a98:	0011      	movs	r1, r2
 8005a9a:	f7ff ff81 	bl	80059a0 <_malloc_r>
 8005a9e:	0005      	movs	r5, r0
 8005aa0:	0028      	movs	r0, r5
 8005aa2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005aa4:	2a00      	cmp	r2, #0
 8005aa6:	d103      	bne.n	8005ab0 <_realloc_r+0x24>
 8005aa8:	f7ff ff0e 	bl	80058c8 <_free_r>
 8005aac:	0025      	movs	r5, r4
 8005aae:	e7f7      	b.n	8005aa0 <_realloc_r+0x14>
 8005ab0:	f000 f83e 	bl	8005b30 <_malloc_usable_size_r>
 8005ab4:	9001      	str	r0, [sp, #4]
 8005ab6:	4284      	cmp	r4, r0
 8005ab8:	d803      	bhi.n	8005ac2 <_realloc_r+0x36>
 8005aba:	0035      	movs	r5, r6
 8005abc:	0843      	lsrs	r3, r0, #1
 8005abe:	42a3      	cmp	r3, r4
 8005ac0:	d3ee      	bcc.n	8005aa0 <_realloc_r+0x14>
 8005ac2:	0021      	movs	r1, r4
 8005ac4:	0038      	movs	r0, r7
 8005ac6:	f7ff ff6b 	bl	80059a0 <_malloc_r>
 8005aca:	1e05      	subs	r5, r0, #0
 8005acc:	d0e8      	beq.n	8005aa0 <_realloc_r+0x14>
 8005ace:	9b01      	ldr	r3, [sp, #4]
 8005ad0:	0022      	movs	r2, r4
 8005ad2:	429c      	cmp	r4, r3
 8005ad4:	d900      	bls.n	8005ad8 <_realloc_r+0x4c>
 8005ad6:	001a      	movs	r2, r3
 8005ad8:	0031      	movs	r1, r6
 8005ada:	0028      	movs	r0, r5
 8005adc:	f7ff fed7 	bl	800588e <memcpy>
 8005ae0:	0031      	movs	r1, r6
 8005ae2:	0038      	movs	r0, r7
 8005ae4:	f7ff fef0 	bl	80058c8 <_free_r>
 8005ae8:	e7da      	b.n	8005aa0 <_realloc_r+0x14>
	...

08005aec <_sbrk_r>:
 8005aec:	2300      	movs	r3, #0
 8005aee:	b570      	push	{r4, r5, r6, lr}
 8005af0:	4d06      	ldr	r5, [pc, #24]	; (8005b0c <_sbrk_r+0x20>)
 8005af2:	0004      	movs	r4, r0
 8005af4:	0008      	movs	r0, r1
 8005af6:	602b      	str	r3, [r5, #0]
 8005af8:	f7fc fe60 	bl	80027bc <_sbrk>
 8005afc:	1c43      	adds	r3, r0, #1
 8005afe:	d103      	bne.n	8005b08 <_sbrk_r+0x1c>
 8005b00:	682b      	ldr	r3, [r5, #0]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d000      	beq.n	8005b08 <_sbrk_r+0x1c>
 8005b06:	6023      	str	r3, [r4, #0]
 8005b08:	bd70      	pop	{r4, r5, r6, pc}
 8005b0a:	46c0      	nop			; (mov r8, r8)
 8005b0c:	200001f0 	.word	0x200001f0

08005b10 <__malloc_lock>:
 8005b10:	b510      	push	{r4, lr}
 8005b12:	4802      	ldr	r0, [pc, #8]	; (8005b1c <__malloc_lock+0xc>)
 8005b14:	f000 f814 	bl	8005b40 <__retarget_lock_acquire_recursive>
 8005b18:	bd10      	pop	{r4, pc}
 8005b1a:	46c0      	nop			; (mov r8, r8)
 8005b1c:	200001f4 	.word	0x200001f4

08005b20 <__malloc_unlock>:
 8005b20:	b510      	push	{r4, lr}
 8005b22:	4802      	ldr	r0, [pc, #8]	; (8005b2c <__malloc_unlock+0xc>)
 8005b24:	f000 f80d 	bl	8005b42 <__retarget_lock_release_recursive>
 8005b28:	bd10      	pop	{r4, pc}
 8005b2a:	46c0      	nop			; (mov r8, r8)
 8005b2c:	200001f4 	.word	0x200001f4

08005b30 <_malloc_usable_size_r>:
 8005b30:	1f0b      	subs	r3, r1, #4
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	1f18      	subs	r0, r3, #4
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	da01      	bge.n	8005b3e <_malloc_usable_size_r+0xe>
 8005b3a:	580b      	ldr	r3, [r1, r0]
 8005b3c:	18c0      	adds	r0, r0, r3
 8005b3e:	4770      	bx	lr

08005b40 <__retarget_lock_acquire_recursive>:
 8005b40:	4770      	bx	lr

08005b42 <__retarget_lock_release_recursive>:
 8005b42:	4770      	bx	lr

08005b44 <_init>:
 8005b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b46:	46c0      	nop			; (mov r8, r8)
 8005b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b4a:	bc08      	pop	{r3}
 8005b4c:	469e      	mov	lr, r3
 8005b4e:	4770      	bx	lr

08005b50 <_fini>:
 8005b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b52:	46c0      	nop			; (mov r8, r8)
 8005b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b56:	bc08      	pop	{r3}
 8005b58:	469e      	mov	lr, r3
 8005b5a:	4770      	bx	lr
