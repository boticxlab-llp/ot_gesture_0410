
ot_gesture_updated.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053e8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  080054a8  080054a8  000154a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056f4  080056f4  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  080056f4  080056f4  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080056f4  080056f4  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056f4  080056f4  000156f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056f8  080056f8  000156f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080056fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  2000007c  08005778  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001f4  08005778  000201f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011aa2  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002678  00000000  00000000  00031b46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f80  00000000  00000000  000341c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e88  00000000  00000000  00035140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011635  00000000  00000000  00035fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000132fe  00000000  00000000  000475fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00067707  00000000  00000000  0005a8fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c2002  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b9c  00000000  00000000  000c2054  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000007c 	.word	0x2000007c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005490 	.word	0x08005490

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000080 	.word	0x20000080
 8000104:	08005490 	.word	0x08005490

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <init_gesture>:
int _gestureDirInY = 0;
int _gestureSensitivity;
// _detectedGesture = GESTURE_NONE;

uint8_t init_gesture()
{
 8000234:	b590      	push	{r4, r7, lr}
 8000236:	b083      	sub	sp, #12
 8000238:	af00      	add	r7, sp, #0
	uint8_t temp;
	// verify device active
	temp = read8(APDS9960_ID);
 800023a:	1dfc      	adds	r4, r7, #7
 800023c:	2092      	movs	r0, #146	; 0x92
 800023e:	f000 fa65 	bl	800070c <read8>
 8000242:	0003      	movs	r3, r0
 8000244:	7023      	strb	r3, [r4, #0]
	if (temp != APDS9960_ID_1)
 8000246:	1dfb      	adds	r3, r7, #7
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	2bab      	cmp	r3, #171	; 0xab
 800024c:	d001      	beq.n	8000252 <init_gesture+0x1e>
	{
		return false;
 800024e:	2300      	movs	r3, #0
 8000250:	e0a7      	b.n	80003a2 <init_gesture+0x16e>
	}
	// Disable everything
	if (!(write8(APDS9960_ENABLE, 0x00)))
 8000252:	2100      	movs	r1, #0
 8000254:	2080      	movs	r0, #128	; 0x80
 8000256:	f000 fa33 	bl	80006c0 <write8>
 800025a:	1e03      	subs	r3, r0, #0
 800025c:	d101      	bne.n	8000262 <init_gesture+0x2e>
	{
		return false;
 800025e:	2300      	movs	r3, #0
 8000260:	e09f      	b.n	80003a2 <init_gesture+0x16e>
	}

	proximityEnabled = 0;
 8000262:	4b52      	ldr	r3, [pc, #328]	; (80003ac <init_gesture+0x178>)
 8000264:	2200      	movs	r2, #0
 8000266:	701a      	strb	r2, [r3, #0]
	gesture_enable = 0;
 8000268:	4b51      	ldr	r3, [pc, #324]	; (80003b0 <init_gesture+0x17c>)
 800026a:	2200      	movs	r2, #0
 800026c:	701a      	strb	r2, [r3, #0]
	// Upon power up, the wait time register is set to 0xFF.
	if (!(write8(APDS9960_WTIME, 0xFF)))
 800026e:	21ff      	movs	r1, #255	; 0xff
 8000270:	2083      	movs	r0, #131	; 0x83
 8000272:	f000 fa25 	bl	80006c0 <write8>
 8000276:	1e03      	subs	r3, r0, #0
 8000278:	d101      	bne.n	800027e <init_gesture+0x4a>
	{
		return false;
 800027a:	2300      	movs	r3, #0
 800027c:	e091      	b.n	80003a2 <init_gesture+0x16e>
  time the LDR pin is sinking current during a gesture pulse
  2- 16μs
  Gesture Pulses - 8
  */
	// 16us, 16 pulses // default is: 0x40 = 8us, 1 pulse
	if (!(write8(APDS9960_GPULSE, 0x8F)))
 800027e:	218f      	movs	r1, #143	; 0x8f
 8000280:	20a6      	movs	r0, #166	; 0xa6
 8000282:	f000 fa1d 	bl	80006c0 <write8>
 8000286:	1e03      	subs	r3, r0, #0
 8000288:	d101      	bne.n	800028e <init_gesture+0x5a>
	{
		return false;
 800028a:	2300      	movs	r3, #0
 800028c:	e089      	b.n	80003a2 <init_gesture+0x16e>
	}

	/* The proximity pulse count register bits set the number of pulses to be output on the LDR pin.	*/

	// 16us, 16 pulses // default is: 0x40 = 8us, 1 pulse
	if (!(write8(APDS9960_PPULSE, 0x8F)))
 800028e:	218f      	movs	r1, #143	; 0x8f
 8000290:	208e      	movs	r0, #142	; 0x8e
 8000292:	f000 fa15 	bl	80006c0 <write8>
 8000296:	1e03      	subs	r3, r0, #0
 8000298:	d101      	bne.n	800029e <init_gesture+0x6a>
	{
		return false;
 800029a:	2300      	movs	r3, #0
 800029c:	e081      	b.n	80003a2 <init_gesture+0x16e>
	}

	// setGestureIntEnable

	temp = read8(APDS9960_GCONF4); // READ CONF4
 800029e:	1dfc      	adds	r4, r7, #7
 80002a0:	20ab      	movs	r0, #171	; 0xab
 80002a2:	f000 fa33 	bl	800070c <read8>
 80002a6:	0003      	movs	r3, r0
 80002a8:	7023      	strb	r3, [r4, #0]
	temp |= 0x02;
 80002aa:	1dfb      	adds	r3, r7, #7
 80002ac:	1dfa      	adds	r2, r7, #7
 80002ae:	7812      	ldrb	r2, [r2, #0]
 80002b0:	2102      	movs	r1, #2
 80002b2:	430a      	orrs	r2, r1
 80002b4:	701a      	strb	r2, [r3, #0]
	write8(APDS9960_GCONF4, temp); // // wite CONF4
 80002b6:	1dfb      	adds	r3, r7, #7
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	0019      	movs	r1, r3
 80002bc:	20ab      	movs	r0, #171	; 0xab
 80002be:	f000 f9ff 	bl	80006c0 <write8>

	// setGestureMode
	temp = read8(APDS9960_GCONF4); // READ CONF4
 80002c2:	1dfc      	adds	r4, r7, #7
 80002c4:	20ab      	movs	r0, #171	; 0xab
 80002c6:	f000 fa21 	bl	800070c <read8>
 80002ca:	0003      	movs	r3, r0
 80002cc:	7023      	strb	r3, [r4, #0]
	temp |= 0x01;
 80002ce:	1dfb      	adds	r3, r7, #7
 80002d0:	1dfa      	adds	r2, r7, #7
 80002d2:	7812      	ldrb	r2, [r2, #0]
 80002d4:	2101      	movs	r1, #1
 80002d6:	430a      	orrs	r2, r1
 80002d8:	701a      	strb	r2, [r3, #0]
	write8(APDS9960_GCONF4, temp); // // wite CONF4
 80002da:	1dfb      	adds	r3, r7, #7
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	0019      	movs	r1, r3
 80002e0:	20ab      	movs	r0, #171	; 0xab
 80002e2:	f000 f9ed 	bl	80006c0 <write8>
	gesture_enable = 1;
 80002e6:	4b32      	ldr	r3, [pc, #200]	; (80003b0 <init_gesture+0x17c>)
 80002e8:	2201      	movs	r2, #1
 80002ea:	701a      	strb	r2, [r3, #0]

	// enablePower
	temp = read8(APDS9960_ENABLE); // READ APDS9960_ENABLE
 80002ec:	1dfc      	adds	r4, r7, #7
 80002ee:	2080      	movs	r0, #128	; 0x80
 80002f0:	f000 fa0c 	bl	800070c <read8>
 80002f4:	0003      	movs	r3, r0
 80002f6:	7023      	strb	r3, [r4, #0]
	temp |= 0x01;
 80002f8:	1dfb      	adds	r3, r7, #7
 80002fa:	1dfa      	adds	r2, r7, #7
 80002fc:	7812      	ldrb	r2, [r2, #0]
 80002fe:	2101      	movs	r1, #1
 8000300:	430a      	orrs	r2, r1
 8000302:	701a      	strb	r2, [r3, #0]
	write8(APDS9960_ENABLE, temp); // // wite APDS9960_ENABLE
 8000304:	1dfb      	adds	r3, r7, #7
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	0019      	movs	r1, r3
 800030a:	2080      	movs	r0, #128	; 0x80
 800030c:	f000 f9d8 	bl	80006c0 <write8>

	// enableWait
	temp = read8(APDS9960_ENABLE); // READ APDS9960_ENABLE
 8000310:	1dfc      	adds	r4, r7, #7
 8000312:	2080      	movs	r0, #128	; 0x80
 8000314:	f000 f9fa 	bl	800070c <read8>
 8000318:	0003      	movs	r3, r0
 800031a:	7023      	strb	r3, [r4, #0]
	temp |= 0x68;
 800031c:	1dfb      	adds	r3, r7, #7
 800031e:	1dfa      	adds	r2, r7, #7
 8000320:	7812      	ldrb	r2, [r2, #0]
 8000322:	2168      	movs	r1, #104	; 0x68
 8000324:	430a      	orrs	r2, r1
 8000326:	701a      	strb	r2, [r3, #0]
	write8(APDS9960_ENABLE, temp); // // wite APDS9960_ENABLE
 8000328:	1dfb      	adds	r3, r7, #7
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	0019      	movs	r1, r3
 800032e:	2080      	movs	r0, #128	; 0x80
 8000330:	f000 f9c6 	bl	80006c0 <write8>
	temp = read8(APDS9960_ENABLE); // READ APDS9960_ENABLE
 8000334:	1dfc      	adds	r4, r7, #7
 8000336:	2080      	movs	r0, #128	; 0x80
 8000338:	f000 f9e8 	bl	800070c <read8>
 800033c:	0003      	movs	r3, r0
 800033e:	7023      	strb	r3, [r4, #0]
	// ADC Integration Time Register (0x81)
	// set ADC integration time to 10 ms
	temp = 256 - (10 / 2.78);
 8000340:	1dfb      	adds	r3, r7, #7
 8000342:	22fc      	movs	r2, #252	; 0xfc
 8000344:	701a      	strb	r2, [r3, #0]
	write8(APDS9960_ATIME, temp); // // wite APDS9960_ATIME
 8000346:	1dfb      	adds	r3, r7, #7
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	0019      	movs	r1, r3
 800034c:	2081      	movs	r0, #129	; 0x81
 800034e:	f000 f9b7 	bl	80006c0 <write8>

	// set ADC gain 4x (0x00 => 1x, 0x01 => 4x, 0x02 => 16x, 0x03 => 64x)
	write8(APDS9960_ATIME, 0x02); // // wite APDS9960_ATIME
 8000352:	2102      	movs	r1, #2
 8000354:	2081      	movs	r0, #129	; 0x81
 8000356:	f000 f9b3 	bl	80006c0 <write8>

	if (sensitivity > 100)
 800035a:	4b16      	ldr	r3, [pc, #88]	; (80003b4 <init_gesture+0x180>)
 800035c:	781b      	ldrb	r3, [r3, #0]
 800035e:	2b64      	cmp	r3, #100	; 0x64
 8000360:	d902      	bls.n	8000368 <init_gesture+0x134>
	{
		sensitivity = 100;
 8000362:	4b14      	ldr	r3, [pc, #80]	; (80003b4 <init_gesture+0x180>)
 8000364:	2264      	movs	r2, #100	; 0x64
 8000366:	701a      	strb	r2, [r3, #0]
	}
	_gestureSensitivity = 100 - sensitivity;
 8000368:	4b12      	ldr	r3, [pc, #72]	; (80003b4 <init_gesture+0x180>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	001a      	movs	r2, r3
 800036e:	2364      	movs	r3, #100	; 0x64
 8000370:	1a9a      	subs	r2, r3, r2
 8000372:	4b11      	ldr	r3, [pc, #68]	; (80003b8 <init_gesture+0x184>)
 8000374:	601a      	str	r2, [r3, #0]

	HAL_Delay(10);
 8000376:	200a      	movs	r0, #10
 8000378:	f001 ff90 	bl	800229c <HAL_Delay>

	// enablePower
	temp = read8(APDS9960_ENABLE); // READ APDS9960_ENABLE
 800037c:	1dfc      	adds	r4, r7, #7
 800037e:	2080      	movs	r0, #128	; 0x80
 8000380:	f000 f9c4 	bl	800070c <read8>
 8000384:	0003      	movs	r3, r0
 8000386:	7023      	strb	r3, [r4, #0]
	temp |= 0x01;
 8000388:	1dfb      	adds	r3, r7, #7
 800038a:	1dfa      	adds	r2, r7, #7
 800038c:	7812      	ldrb	r2, [r2, #0]
 800038e:	2101      	movs	r1, #1
 8000390:	430a      	orrs	r2, r1
 8000392:	701a      	strb	r2, [r3, #0]
	write8(APDS9960_ENABLE, temp); // // wite APDS9960_ENABLE
 8000394:	1dfb      	adds	r3, r7, #7
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	0019      	movs	r1, r3
 800039a:	2080      	movs	r0, #128	; 0x80
 800039c:	f000 f990 	bl	80006c0 <write8>

	return true;
 80003a0:	2301      	movs	r3, #1
}
 80003a2:	0018      	movs	r0, r3
 80003a4:	46bd      	mov	sp, r7
 80003a6:	b003      	add	sp, #12
 80003a8:	bd90      	pop	{r4, r7, pc}
 80003aa:	46c0      	nop			; (mov r8, r8)
 80003ac:	20000099 	.word	0x20000099
 80003b0:	20000098 	.word	0x20000098
 80003b4:	20000002 	.word	0x20000002
 80003b8:	200000ac 	.word	0x200000ac

080003bc <gestureFIFOAvailable>:

uint8_t gestureFIFOAvailable()
{
 80003bc:	b590      	push	{r4, r7, lr}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0
	uint8_t _bytes;
	_bytes = read8(APDS9960_GSTATUS); // operational condition of the gesture state machine.
 80003c2:	1dfc      	adds	r4, r7, #7
 80003c4:	20af      	movs	r0, #175	; 0xaf
 80003c6:	f000 f9a1 	bl	800070c <read8>
 80003ca:	0003      	movs	r3, r0
 80003cc:	7023      	strb	r3, [r4, #0]
	if ((_bytes & 0x01) == 0x00)
 80003ce:	1dfb      	adds	r3, r7, #7
 80003d0:	781b      	ldrb	r3, [r3, #0]
 80003d2:	2201      	movs	r2, #1
 80003d4:	4013      	ands	r3, r2
 80003d6:	d101      	bne.n	80003dc <gestureFIFOAvailable+0x20>
	{
		return false;
 80003d8:	2300      	movs	r3, #0
 80003da:	e00d      	b.n	80003f8 <gestureFIFOAvailable+0x3c>
	}

	_bytes = read8(APDS9960_GFLVL); // number of datasets that are currently available in the FIFO for read.
 80003dc:	1dfc      	adds	r4, r7, #7
 80003de:	20ae      	movs	r0, #174	; 0xae
 80003e0:	f000 f994 	bl	800070c <read8>
 80003e4:	0003      	movs	r3, r0
 80003e6:	7023      	strb	r3, [r4, #0]
	if (_bytes == 0x00)
 80003e8:	1dfb      	adds	r3, r7, #7
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d101      	bne.n	80003f4 <gestureFIFOAvailable+0x38>
	{
		return false;
 80003f0:	2300      	movs	r3, #0
 80003f2:	e001      	b.n	80003f8 <gestureFIFOAvailable+0x3c>
	}

	return _bytes;
 80003f4:	1dfb      	adds	r3, r7, #7
 80003f6:	781b      	ldrb	r3, [r3, #0]
}
 80003f8:	0018      	movs	r0, r3
 80003fa:	46bd      	mov	sp, r7
 80003fc:	b003      	add	sp, #12
 80003fe:	bd90      	pop	{r4, r7, pc}

08000400 <readGesture>:

uint8_t readGesture()
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
	uint8_t gesture = _detectedGesture;
 8000406:	1dfb      	adds	r3, r7, #7
 8000408:	4a05      	ldr	r2, [pc, #20]	; (8000420 <readGesture+0x20>)
 800040a:	7812      	ldrb	r2, [r2, #0]
 800040c:	701a      	strb	r2, [r3, #0]

	_detectedGesture = GESTURE_NONE;
 800040e:	4b04      	ldr	r3, [pc, #16]	; (8000420 <readGesture+0x20>)
 8000410:	22ff      	movs	r2, #255	; 0xff
 8000412:	701a      	strb	r2, [r3, #0]

	return gesture;
 8000414:	1dfb      	adds	r3, r7, #7
 8000416:	781b      	ldrb	r3, [r3, #0]
}
 8000418:	0018      	movs	r0, r3
 800041a:	46bd      	mov	sp, r7
 800041c:	b002      	add	sp, #8
 800041e:	bd80      	pop	{r7, pc}
 8000420:	2000009a 	.word	0x2000009a

08000424 <handleGesture>:

int32_t handleGesture()
{
 8000424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000426:	b0ab      	sub	sp, #172	; 0xac
 8000428:	af04      	add	r7, sp, #16
	const uint8_t gestureThreshold = 40;
 800042a:	2393      	movs	r3, #147	; 0x93
 800042c:	18fb      	adds	r3, r7, r3
 800042e:	2228      	movs	r2, #40	; 0x28
 8000430:	701a      	strb	r2, [r3, #0]

	while (1)
	{

		uint8_t available = gestureFIFOAvailable();
 8000432:	2592      	movs	r5, #146	; 0x92
 8000434:	197c      	adds	r4, r7, r5
 8000436:	f7ff ffc1 	bl	80003bc <gestureFIFOAvailable>
 800043a:	0003      	movs	r3, r0
 800043c:	7023      	strb	r3, [r4, #0]
		if (available <= 0)
 800043e:	197b      	adds	r3, r7, r5
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d101      	bne.n	800044a <handleGesture+0x26>
			return 0;
 8000446:	2300      	movs	r3, #0
 8000448:	e0da      	b.n	8000600 <handleGesture+0x1dc>
		uint8_t fifo_data[128];

		//		uint8_t ret;
		if ((HAL_I2C_Mem_Read(&hi2c1, APDS9960_I2C_ADDR, APDS9960_GFIFO_U, 0x01, &fifo_data[0], (available * 4), 10)) != HAL_OK)
 800044a:	4b6f      	ldr	r3, [pc, #444]	; (8000608 <handleGesture+0x1e4>)
 800044c:	8819      	ldrh	r1, [r3, #0]
 800044e:	2392      	movs	r3, #146	; 0x92
 8000450:	18fb      	adds	r3, r7, r3
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	b29b      	uxth	r3, r3
 8000456:	009b      	lsls	r3, r3, #2
 8000458:	b29b      	uxth	r3, r3
 800045a:	486c      	ldr	r0, [pc, #432]	; (800060c <handleGesture+0x1e8>)
 800045c:	220a      	movs	r2, #10
 800045e:	9202      	str	r2, [sp, #8]
 8000460:	9301      	str	r3, [sp, #4]
 8000462:	1d3b      	adds	r3, r7, #4
 8000464:	9300      	str	r3, [sp, #0]
 8000466:	2301      	movs	r3, #1
 8000468:	22fc      	movs	r2, #252	; 0xfc
 800046a:	f002 fba3 	bl	8002bb4 <HAL_I2C_Mem_Read>
 800046e:	1e03      	subs	r3, r0, #0
 8000470:	d001      	beq.n	8000476 <handleGesture+0x52>
		{
			return false;
 8000472:	2300      	movs	r3, #0
 8000474:	e0c4      	b.n	8000600 <handleGesture+0x1dc>
		}

		//	    if (bytes_read == 0)
		//	      return 0;
		for (int i = 0; i + 3 < (available * 4); i += 4)
 8000476:	2300      	movs	r3, #0
 8000478:	2294      	movs	r2, #148	; 0x94
 800047a:	18ba      	adds	r2, r7, r2
 800047c:	6013      	str	r3, [r2, #0]
 800047e:	e0b3      	b.n	80005e8 <handleGesture+0x1c4>
		{
			uint8_t u, d, l, r;
			u = fifo_data[i];
 8000480:	2491      	movs	r4, #145	; 0x91
 8000482:	193b      	adds	r3, r7, r4
 8000484:	1d39      	adds	r1, r7, #4
 8000486:	2094      	movs	r0, #148	; 0x94
 8000488:	183a      	adds	r2, r7, r0
 800048a:	6812      	ldr	r2, [r2, #0]
 800048c:	188a      	adds	r2, r1, r2
 800048e:	7812      	ldrb	r2, [r2, #0]
 8000490:	701a      	strb	r2, [r3, #0]
			d = fifo_data[i + 1];
 8000492:	183b      	adds	r3, r7, r0
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	1c5a      	adds	r2, r3, #1
 8000498:	2590      	movs	r5, #144	; 0x90
 800049a:	197b      	adds	r3, r7, r5
 800049c:	1d39      	adds	r1, r7, #4
 800049e:	5c8a      	ldrb	r2, [r1, r2]
 80004a0:	701a      	strb	r2, [r3, #0]
			l = fifo_data[i + 2];
 80004a2:	183b      	adds	r3, r7, r0
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	1c9a      	adds	r2, r3, #2
 80004a8:	268f      	movs	r6, #143	; 0x8f
 80004aa:	19bb      	adds	r3, r7, r6
 80004ac:	1d39      	adds	r1, r7, #4
 80004ae:	5c8a      	ldrb	r2, [r1, r2]
 80004b0:	701a      	strb	r2, [r3, #0]
			r = fifo_data[i + 3];
 80004b2:	183b      	adds	r3, r7, r0
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	1cda      	adds	r2, r3, #3
 80004b8:	208e      	movs	r0, #142	; 0x8e
 80004ba:	183b      	adds	r3, r7, r0
 80004bc:	1d39      	adds	r1, r7, #4
 80004be:	5c8a      	ldrb	r2, [r1, r2]
 80004c0:	701a      	strb	r2, [r3, #0]
			//	          debugPrint(&huart2, "l");
			//	          debugPrintln(&huart2, l);
			//	          debugPrint(&huart2, "r");
			//	          debugPrintln(&huart2, r);

			if (u < gestureThreshold && d < gestureThreshold && l < gestureThreshold && r < gestureThreshold)
 80004c2:	193a      	adds	r2, r7, r4
 80004c4:	2193      	movs	r1, #147	; 0x93
 80004c6:	187b      	adds	r3, r7, r1
 80004c8:	7812      	ldrb	r2, [r2, #0]
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	429a      	cmp	r2, r3
 80004ce:	d262      	bcs.n	8000596 <handleGesture+0x172>
 80004d0:	197a      	adds	r2, r7, r5
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	7812      	ldrb	r2, [r2, #0]
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	429a      	cmp	r2, r3
 80004da:	d25c      	bcs.n	8000596 <handleGesture+0x172>
 80004dc:	19ba      	adds	r2, r7, r6
 80004de:	187b      	adds	r3, r7, r1
 80004e0:	7812      	ldrb	r2, [r2, #0]
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	429a      	cmp	r2, r3
 80004e6:	d256      	bcs.n	8000596 <handleGesture+0x172>
 80004e8:	183a      	adds	r2, r7, r0
 80004ea:	187b      	adds	r3, r7, r1
 80004ec:	7812      	ldrb	r2, [r2, #0]
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	429a      	cmp	r2, r3
 80004f2:	d250      	bcs.n	8000596 <handleGesture+0x172>
			{
				_gestureIn = true;
 80004f4:	4b46      	ldr	r3, [pc, #280]	; (8000610 <handleGesture+0x1ec>)
 80004f6:	2201      	movs	r2, #1
 80004f8:	701a      	strb	r2, [r3, #0]
				if (_gestureDirInX != 0 || _gestureDirInY != 0)
 80004fa:	4b46      	ldr	r3, [pc, #280]	; (8000614 <handleGesture+0x1f0>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d103      	bne.n	800050a <handleGesture+0xe6>
 8000502:	4b45      	ldr	r3, [pc, #276]	; (8000618 <handleGesture+0x1f4>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d067      	beq.n	80005da <handleGesture+0x1b6>
				{
					int totalX = _gestureDirInX - _gestureDirectionX;
 800050a:	4b42      	ldr	r3, [pc, #264]	; (8000614 <handleGesture+0x1f0>)
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	4b43      	ldr	r3, [pc, #268]	; (800061c <handleGesture+0x1f8>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	1ad3      	subs	r3, r2, r3
 8000514:	2188      	movs	r1, #136	; 0x88
 8000516:	187a      	adds	r2, r7, r1
 8000518:	6013      	str	r3, [r2, #0]
					int totalY = _gestureDirInY - _gestureDirectionY;
 800051a:	4b3f      	ldr	r3, [pc, #252]	; (8000618 <handleGesture+0x1f4>)
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	4b40      	ldr	r3, [pc, #256]	; (8000620 <handleGesture+0x1fc>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	1ad3      	subs	r3, r2, r3
 8000524:	2284      	movs	r2, #132	; 0x84
 8000526:	18ba      	adds	r2, r7, r2
 8000528:	6013      	str	r3, [r2, #0]
					//		          debugPrint(&huart2, "out");
					//		          debugPrint(&huart2, totalX);
					//		          debugPrint(&huart2, ", ");
					//		          debugPrintln(&huart2, totalY);

					if (totalX < -_gestureSensitivity)
 800052a:	4b3e      	ldr	r3, [pc, #248]	; (8000624 <handleGesture+0x200>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	425b      	negs	r3, r3
 8000530:	187a      	adds	r2, r7, r1
 8000532:	6812      	ldr	r2, [r2, #0]
 8000534:	429a      	cmp	r2, r3
 8000536:	da02      	bge.n	800053e <handleGesture+0x11a>
					{
						_detectedGesture = GESTURE_LEFT;
 8000538:	4b3b      	ldr	r3, [pc, #236]	; (8000628 <handleGesture+0x204>)
 800053a:	2202      	movs	r2, #2
 800053c:	701a      	strb	r2, [r3, #0]
					}
					if (totalX > _gestureSensitivity)
 800053e:	4b39      	ldr	r3, [pc, #228]	; (8000624 <handleGesture+0x200>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	2288      	movs	r2, #136	; 0x88
 8000544:	18ba      	adds	r2, r7, r2
 8000546:	6812      	ldr	r2, [r2, #0]
 8000548:	429a      	cmp	r2, r3
 800054a:	dd02      	ble.n	8000552 <handleGesture+0x12e>
					{
						_detectedGesture = GESTURE_RIGHT;
 800054c:	4b36      	ldr	r3, [pc, #216]	; (8000628 <handleGesture+0x204>)
 800054e:	2203      	movs	r2, #3
 8000550:	701a      	strb	r2, [r3, #0]
					}
					if (totalY < -_gestureSensitivity)
 8000552:	4b34      	ldr	r3, [pc, #208]	; (8000624 <handleGesture+0x200>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	425b      	negs	r3, r3
 8000558:	2284      	movs	r2, #132	; 0x84
 800055a:	18ba      	adds	r2, r7, r2
 800055c:	6812      	ldr	r2, [r2, #0]
 800055e:	429a      	cmp	r2, r3
 8000560:	da02      	bge.n	8000568 <handleGesture+0x144>
					{
						_detectedGesture = GESTURE_DOWN;
 8000562:	4b31      	ldr	r3, [pc, #196]	; (8000628 <handleGesture+0x204>)
 8000564:	2201      	movs	r2, #1
 8000566:	701a      	strb	r2, [r3, #0]
					}
					if (totalY > _gestureSensitivity)
 8000568:	4b2e      	ldr	r3, [pc, #184]	; (8000624 <handleGesture+0x200>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	2284      	movs	r2, #132	; 0x84
 800056e:	18ba      	adds	r2, r7, r2
 8000570:	6812      	ldr	r2, [r2, #0]
 8000572:	429a      	cmp	r2, r3
 8000574:	dd02      	ble.n	800057c <handleGesture+0x158>
					{
						_detectedGesture = GESTURE_UP;
 8000576:	4b2c      	ldr	r3, [pc, #176]	; (8000628 <handleGesture+0x204>)
 8000578:	2200      	movs	r2, #0
 800057a:	701a      	strb	r2, [r3, #0]
					}
					_gestureDirectionX = 0;
 800057c:	4b27      	ldr	r3, [pc, #156]	; (800061c <handleGesture+0x1f8>)
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
					_gestureDirectionY = 0;
 8000582:	4b27      	ldr	r3, [pc, #156]	; (8000620 <handleGesture+0x1fc>)
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
					_gestureDirInX = 0;
 8000588:	4b22      	ldr	r3, [pc, #136]	; (8000614 <handleGesture+0x1f0>)
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
					_gestureDirInY = 0;
 800058e:	4b22      	ldr	r3, [pc, #136]	; (8000618 <handleGesture+0x1f4>)
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
				}
				continue;
 8000594:	e021      	b.n	80005da <handleGesture+0x1b6>
			}

			_gestureDirectionX = r - l;
 8000596:	238e      	movs	r3, #142	; 0x8e
 8000598:	18fb      	adds	r3, r7, r3
 800059a:	781a      	ldrb	r2, [r3, #0]
 800059c:	238f      	movs	r3, #143	; 0x8f
 800059e:	18fb      	adds	r3, r7, r3
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	1ad2      	subs	r2, r2, r3
 80005a4:	4b1d      	ldr	r3, [pc, #116]	; (800061c <handleGesture+0x1f8>)
 80005a6:	601a      	str	r2, [r3, #0]
			_gestureDirectionY = u - d;
 80005a8:	2391      	movs	r3, #145	; 0x91
 80005aa:	18fb      	adds	r3, r7, r3
 80005ac:	781a      	ldrb	r2, [r3, #0]
 80005ae:	2390      	movs	r3, #144	; 0x90
 80005b0:	18fb      	adds	r3, r7, r3
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	1ad2      	subs	r2, r2, r3
 80005b6:	4b1a      	ldr	r3, [pc, #104]	; (8000620 <handleGesture+0x1fc>)
 80005b8:	601a      	str	r2, [r3, #0]
			if (_gestureIn)
 80005ba:	4b15      	ldr	r3, [pc, #84]	; (8000610 <handleGesture+0x1ec>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d00c      	beq.n	80005dc <handleGesture+0x1b8>
			{
				_gestureIn = false;
 80005c2:	4b13      	ldr	r3, [pc, #76]	; (8000610 <handleGesture+0x1ec>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	701a      	strb	r2, [r3, #0]
				_gestureDirInX = _gestureDirectionX;
 80005c8:	4b14      	ldr	r3, [pc, #80]	; (800061c <handleGesture+0x1f8>)
 80005ca:	681a      	ldr	r2, [r3, #0]
 80005cc:	4b11      	ldr	r3, [pc, #68]	; (8000614 <handleGesture+0x1f0>)
 80005ce:	601a      	str	r2, [r3, #0]
				_gestureDirInY = _gestureDirectionY;
 80005d0:	4b13      	ldr	r3, [pc, #76]	; (8000620 <handleGesture+0x1fc>)
 80005d2:	681a      	ldr	r2, [r3, #0]
 80005d4:	4b10      	ldr	r3, [pc, #64]	; (8000618 <handleGesture+0x1f4>)
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	e000      	b.n	80005dc <handleGesture+0x1b8>
				continue;
 80005da:	46c0      	nop			; (mov r8, r8)
		for (int i = 0; i + 3 < (available * 4); i += 4)
 80005dc:	2294      	movs	r2, #148	; 0x94
 80005de:	18bb      	adds	r3, r7, r2
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	3304      	adds	r3, #4
 80005e4:	18ba      	adds	r2, r7, r2
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	2394      	movs	r3, #148	; 0x94
 80005ea:	18fb      	adds	r3, r7, r3
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	1cda      	adds	r2, r3, #3
 80005f0:	2392      	movs	r3, #146	; 0x92
 80005f2:	18fb      	adds	r3, r7, r3
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	009b      	lsls	r3, r3, #2
 80005f8:	429a      	cmp	r2, r3
 80005fa:	da00      	bge.n	80005fe <handleGesture+0x1da>
 80005fc:	e740      	b.n	8000480 <handleGesture+0x5c>
	{
 80005fe:	e718      	b.n	8000432 <handleGesture+0xe>
			}
		}
	}
}
 8000600:	0018      	movs	r0, r3
 8000602:	46bd      	mov	sp, r7
 8000604:	b027      	add	sp, #156	; 0x9c
 8000606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000608:	20000000 	.word	0x20000000
 800060c:	200000c0 	.word	0x200000c0
 8000610:	2000009b 	.word	0x2000009b
 8000614:	200000a4 	.word	0x200000a4
 8000618:	200000a8 	.word	0x200000a8
 800061c:	2000009c 	.word	0x2000009c
 8000620:	200000a0 	.word	0x200000a0
 8000624:	200000ac 	.word	0x200000ac
 8000628:	2000009a 	.word	0x2000009a

0800062c <gestureAvailable>:

uint8_t gestureAvailable()
{
 800062c:	b590      	push	{r4, r7, lr}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
	uint8_t r;
	// enable gesture

	// setGestureMode
	r = read8(APDS9960_ENABLE); // READ CONF4
 8000632:	1dfc      	adds	r4, r7, #7
 8000634:	2080      	movs	r0, #128	; 0x80
 8000636:	f000 f869 	bl	800070c <read8>
 800063a:	0003      	movs	r3, r0
 800063c:	7023      	strb	r3, [r4, #0]
	if ((r & 0b01000000) != 0)
 800063e:	1dfb      	adds	r3, r7, #7
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2240      	movs	r2, #64	; 0x40
 8000644:	4013      	ands	r3, r2
 8000646:	d003      	beq.n	8000650 <gestureAvailable+0x24>
	{
		gesture_enable = true;
 8000648:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <gestureAvailable+0x90>)
 800064a:	2201      	movs	r2, #1
 800064c:	701a      	strb	r2, [r3, #0]
 800064e:	e019      	b.n	8000684 <gestureAvailable+0x58>
		// return true;
	}
	else
	{
		r |= 0b01000001;
 8000650:	1dfb      	adds	r3, r7, #7
 8000652:	1dfa      	adds	r2, r7, #7
 8000654:	7812      	ldrb	r2, [r2, #0]
 8000656:	2141      	movs	r1, #65	; 0x41
 8000658:	430a      	orrs	r2, r1
 800065a:	701a      	strb	r2, [r3, #0]
		write8(APDS9960_ENABLE, r);
 800065c:	1dfb      	adds	r3, r7, #7
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	0019      	movs	r1, r3
 8000662:	2080      	movs	r0, #128	; 0x80
 8000664:	f000 f82c 	bl	80006c0 <write8>
		r = read8(APDS9960_ENABLE); // READ CONF4
 8000668:	1dfc      	adds	r4, r7, #7
 800066a:	2080      	movs	r0, #128	; 0x80
 800066c:	f000 f84e 	bl	800070c <read8>
 8000670:	0003      	movs	r3, r0
 8000672:	7023      	strb	r3, [r4, #0]
		if ((r & 0b01000000) != 0)
 8000674:	1dfb      	adds	r3, r7, #7
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	2240      	movs	r2, #64	; 0x40
 800067a:	4013      	ands	r3, r2
 800067c:	d002      	beq.n	8000684 <gestureAvailable+0x58>
		{
			gesture_enable = true;
 800067e:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <gestureAvailable+0x90>)
 8000680:	2201      	movs	r2, #1
 8000682:	701a      	strb	r2, [r3, #0]
			// return true;
		}
	}

	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) != 0)
 8000684:	2380      	movs	r3, #128	; 0x80
 8000686:	021a      	lsls	r2, r3, #8
 8000688:	2390      	movs	r3, #144	; 0x90
 800068a:	05db      	lsls	r3, r3, #23
 800068c:	0011      	movs	r1, r2
 800068e:	0018      	movs	r0, r3
 8000690:	f002 f876 	bl	8002780 <HAL_GPIO_ReadPin>
 8000694:	1e03      	subs	r3, r0, #0
 8000696:	d001      	beq.n	800069c <gestureAvailable+0x70>
	{
		return 0;
 8000698:	2300      	movs	r3, #0
 800069a:	e00b      	b.n	80006b4 <gestureAvailable+0x88>
	}

	if (!gestureFIFOAvailable())
 800069c:	f7ff fe8e 	bl	80003bc <gestureFIFOAvailable>
 80006a0:	1e03      	subs	r3, r0, #0
 80006a2:	d101      	bne.n	80006a8 <gestureAvailable+0x7c>
	{
		return false;
 80006a4:	2300      	movs	r3, #0
 80006a6:	e005      	b.n	80006b4 <gestureAvailable+0x88>
	}

	handleGesture();
 80006a8:	f7ff febc 	bl	8000424 <handleGesture>
	//			r = read8(APDS9960_GCONF4); // READ CONF4
	//			r &= 0xFE;
	//			write8(APDS9960_GCONF4,r); // // wite CONF4
	//			gesture_enable = 1;
	//	  }
	HAL_Delay(10);
 80006ac:	200a      	movs	r0, #10
 80006ae:	f001 fdf5 	bl	800229c <HAL_Delay>

	return (_detectedGesture == GESTURE_NONE) ? 0 : 1;
 80006b2:	2301      	movs	r3, #1
}
 80006b4:	0018      	movs	r0, r3
 80006b6:	46bd      	mov	sp, r7
 80006b8:	b003      	add	sp, #12
 80006ba:	bd90      	pop	{r4, r7, pc}
 80006bc:	20000098 	.word	0x20000098

080006c0 <write8>:

uint8_t write8(uint8_t reg, uint8_t value)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b086      	sub	sp, #24
 80006c4:	af04      	add	r7, sp, #16
 80006c6:	0002      	movs	r2, r0
 80006c8:	1dfb      	adds	r3, r7, #7
 80006ca:	701a      	strb	r2, [r3, #0]
 80006cc:	1dbb      	adds	r3, r7, #6
 80006ce:	1c0a      	adds	r2, r1, #0
 80006d0:	701a      	strb	r2, [r3, #0]

	if ((HAL_I2C_Mem_Write(&hi2c1, APDS9960_I2C_ADDR, reg, 0x01, &value, 0x01, 10)) != HAL_OK)
 80006d2:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <write8+0x44>)
 80006d4:	8819      	ldrh	r1, [r3, #0]
 80006d6:	1dfb      	adds	r3, r7, #7
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	b29a      	uxth	r2, r3
 80006dc:	480a      	ldr	r0, [pc, #40]	; (8000708 <write8+0x48>)
 80006de:	230a      	movs	r3, #10
 80006e0:	9302      	str	r3, [sp, #8]
 80006e2:	2301      	movs	r3, #1
 80006e4:	9301      	str	r3, [sp, #4]
 80006e6:	1dbb      	adds	r3, r7, #6
 80006e8:	9300      	str	r3, [sp, #0]
 80006ea:	2301      	movs	r3, #1
 80006ec:	f002 f934 	bl	8002958 <HAL_I2C_Mem_Write>
 80006f0:	1e03      	subs	r3, r0, #0
 80006f2:	d001      	beq.n	80006f8 <write8+0x38>
	{
		return false;
 80006f4:	2300      	movs	r3, #0
 80006f6:	e000      	b.n	80006fa <write8+0x3a>
	}

	return true;
 80006f8:	2301      	movs	r3, #1
}
 80006fa:	0018      	movs	r0, r3
 80006fc:	46bd      	mov	sp, r7
 80006fe:	b002      	add	sp, #8
 8000700:	bd80      	pop	{r7, pc}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	20000000 	.word	0x20000000
 8000708:	200000c0 	.word	0x200000c0

0800070c <read8>:

uint8_t read8(uint8_t reg)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b088      	sub	sp, #32
 8000710:	af04      	add	r7, sp, #16
 8000712:	0002      	movs	r2, r0
 8000714:	1dfb      	adds	r3, r7, #7
 8000716:	701a      	strb	r2, [r3, #0]

	uint8_t ret;
	if ((HAL_I2C_Mem_Read(&hi2c1, APDS9960_I2C_ADDR, reg, 0x01, &ret, 0x01, 10)) != HAL_OK)
 8000718:	4b0d      	ldr	r3, [pc, #52]	; (8000750 <read8+0x44>)
 800071a:	8819      	ldrh	r1, [r3, #0]
 800071c:	1dfb      	adds	r3, r7, #7
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	b29a      	uxth	r2, r3
 8000722:	480c      	ldr	r0, [pc, #48]	; (8000754 <read8+0x48>)
 8000724:	230a      	movs	r3, #10
 8000726:	9302      	str	r3, [sp, #8]
 8000728:	2301      	movs	r3, #1
 800072a:	9301      	str	r3, [sp, #4]
 800072c:	230f      	movs	r3, #15
 800072e:	18fb      	adds	r3, r7, r3
 8000730:	9300      	str	r3, [sp, #0]
 8000732:	2301      	movs	r3, #1
 8000734:	f002 fa3e 	bl	8002bb4 <HAL_I2C_Mem_Read>
 8000738:	1e03      	subs	r3, r0, #0
 800073a:	d001      	beq.n	8000740 <read8+0x34>
	{
		return false;
 800073c:	2300      	movs	r3, #0
 800073e:	e002      	b.n	8000746 <read8+0x3a>
	}

	return ret;
 8000740:	230f      	movs	r3, #15
 8000742:	18fb      	adds	r3, r7, r3
 8000744:	781b      	ldrb	r3, [r3, #0]
}
 8000746:	0018      	movs	r0, r3
 8000748:	46bd      	mov	sp, r7
 800074a:	b004      	add	sp, #16
 800074c:	bd80      	pop	{r7, pc}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	20000000 	.word	0x20000000
 8000754:	200000c0 	.word	0x200000c0

08000758 <lcd_init>:

#include <lcd.h>

/*--------------- Initialize LCD ------------------*/
void lcd_init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0

	HAL_Delay(30);
 800075c:	201e      	movs	r0, #30
 800075e:	f001 fd9d 	bl	800229c <HAL_Delay>

	PIN_LOW(D4_PORT, D4_PIN);
 8000762:	2390      	movs	r3, #144	; 0x90
 8000764:	05db      	lsls	r3, r3, #23
 8000766:	2200      	movs	r2, #0
 8000768:	2101      	movs	r1, #1
 800076a:	0018      	movs	r0, r3
 800076c:	f002 f825 	bl	80027ba <HAL_GPIO_WritePin>
	PIN_HIGH(D5_PORT, D5_PIN);
 8000770:	2390      	movs	r3, #144	; 0x90
 8000772:	05db      	lsls	r3, r3, #23
 8000774:	2201      	movs	r2, #1
 8000776:	2102      	movs	r1, #2
 8000778:	0018      	movs	r0, r3
 800077a:	f002 f81e 	bl	80027ba <HAL_GPIO_WritePin>
	PIN_LOW(D6_PORT, D6_PIN);
 800077e:	2390      	movs	r3, #144	; 0x90
 8000780:	05db      	lsls	r3, r3, #23
 8000782:	2200      	movs	r2, #0
 8000784:	2104      	movs	r1, #4
 8000786:	0018      	movs	r0, r3
 8000788:	f002 f817 	bl	80027ba <HAL_GPIO_WritePin>
	PIN_LOW(D7_PORT, D7_PIN);
 800078c:	2390      	movs	r3, #144	; 0x90
 800078e:	05db      	lsls	r3, r3, #23
 8000790:	2200      	movs	r2, #0
 8000792:	2108      	movs	r1, #8
 8000794:	0018      	movs	r0, r3
 8000796:	f002 f810 	bl	80027ba <HAL_GPIO_WritePin>
	PIN_LOW(RS_PORT, RS_PIN);
 800079a:	2390      	movs	r3, #144	; 0x90
 800079c:	05db      	lsls	r3, r3, #23
 800079e:	2200      	movs	r2, #0
 80007a0:	2120      	movs	r1, #32
 80007a2:	0018      	movs	r0, r3
 80007a4:	f002 f809 	bl	80027ba <HAL_GPIO_WritePin>

	PIN_HIGH(EN_PORT, EN_PIN);
 80007a8:	2390      	movs	r3, #144	; 0x90
 80007aa:	05db      	lsls	r3, r3, #23
 80007ac:	2201      	movs	r2, #1
 80007ae:	2110      	movs	r1, #16
 80007b0:	0018      	movs	r0, r3
 80007b2:	f002 f802 	bl	80027ba <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT, EN_PIN);
 80007b6:	2390      	movs	r3, #144	; 0x90
 80007b8:	05db      	lsls	r3, r3, #23
 80007ba:	2200      	movs	r2, #0
 80007bc:	2110      	movs	r1, #16
 80007be:	0018      	movs	r0, r3
 80007c0:	f001 fffb 	bl	80027ba <HAL_GPIO_WritePin>

	HAL_Delay(50);
 80007c4:	2032      	movs	r0, #50	; 0x32
 80007c6:	f001 fd69 	bl	800229c <HAL_Delay>
	//	HAL_Delay(1);
	//	lcd_write (0,0x01);  // clear display
	//	HAL_Delay(1);
	//	lcd_write (0,0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
	//	HAL_Delay(1);
	lcd_write(0, 0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80007ca:	2128      	movs	r1, #40	; 0x28
 80007cc:	2000      	movs	r0, #0
 80007ce:	f000 f822 	bl	8000816 <lcd_write>
	HAL_Delay(1);
 80007d2:	2001      	movs	r0, #1
 80007d4:	f001 fd62 	bl	800229c <HAL_Delay>
	lcd_write(0, 0x0c);
 80007d8:	210c      	movs	r1, #12
 80007da:	2000      	movs	r0, #0
 80007dc:	f000 f81b 	bl	8000816 <lcd_write>
	HAL_Delay(1);
 80007e0:	2001      	movs	r0, #1
 80007e2:	f001 fd5b 	bl	800229c <HAL_Delay>
	lcd_write(0, 0x06); // Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80007e6:	2106      	movs	r1, #6
 80007e8:	2000      	movs	r0, #0
 80007ea:	f000 f814 	bl	8000816 <lcd_write>
	HAL_Delay(1);
 80007ee:	2001      	movs	r0, #1
 80007f0:	f001 fd54 	bl	800229c <HAL_Delay>
	lcd_write(0, 0x01); // clear display
 80007f4:	2101      	movs	r1, #1
 80007f6:	2000      	movs	r0, #0
 80007f8:	f000 f80d 	bl	8000816 <lcd_write>
	HAL_Delay(1);
 80007fc:	2001      	movs	r0, #1
 80007fe:	f001 fd4d 	bl	800229c <HAL_Delay>
	lcd_write(0, 0x80); // clear display
 8000802:	2180      	movs	r1, #128	; 0x80
 8000804:	2000      	movs	r0, #0
 8000806:	f000 f806 	bl	8000816 <lcd_write>
	HAL_Delay(1);
 800080a:	2001      	movs	r0, #1
 800080c:	f001 fd46 	bl	800229c <HAL_Delay>
}
 8000810:	46c0      	nop			; (mov r8, r8)
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <lcd_write>:

/*--------------- Write To LCD ---------------*/
void lcd_write(uint8_t type, uint8_t data)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	b082      	sub	sp, #8
 800081a:	af00      	add	r7, sp, #0
 800081c:	0002      	movs	r2, r0
 800081e:	1dfb      	adds	r3, r7, #7
 8000820:	701a      	strb	r2, [r3, #0]
 8000822:	1dbb      	adds	r3, r7, #6
 8000824:	1c0a      	adds	r2, r1, #0
 8000826:	701a      	strb	r2, [r3, #0]
	HAL_Delay(2);
 8000828:	2002      	movs	r0, #2
 800082a:	f001 fd37 	bl	800229c <HAL_Delay>
	if (type)
 800082e:	1dfb      	adds	r3, r7, #7
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d007      	beq.n	8000846 <lcd_write+0x30>
	{
		PIN_HIGH(RS_PORT, RS_PIN);
 8000836:	2390      	movs	r3, #144	; 0x90
 8000838:	05db      	lsls	r3, r3, #23
 800083a:	2201      	movs	r2, #1
 800083c:	2120      	movs	r1, #32
 800083e:	0018      	movs	r0, r3
 8000840:	f001 ffbb 	bl	80027ba <HAL_GPIO_WritePin>
 8000844:	e006      	b.n	8000854 <lcd_write+0x3e>
	}
	else
	{
		PIN_LOW(RS_PORT, RS_PIN);
 8000846:	2390      	movs	r3, #144	; 0x90
 8000848:	05db      	lsls	r3, r3, #23
 800084a:	2200      	movs	r2, #0
 800084c:	2120      	movs	r1, #32
 800084e:	0018      	movs	r0, r3
 8000850:	f001 ffb3 	bl	80027ba <HAL_GPIO_WritePin>
	}

	// Send High Nibble
	if (data & 0x80)
 8000854:	1dbb      	adds	r3, r7, #6
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	b25b      	sxtb	r3, r3
 800085a:	2b00      	cmp	r3, #0
 800085c:	da07      	bge.n	800086e <lcd_write+0x58>
	{
		PIN_HIGH(D7_PORT, D7_PIN);
 800085e:	2390      	movs	r3, #144	; 0x90
 8000860:	05db      	lsls	r3, r3, #23
 8000862:	2201      	movs	r2, #1
 8000864:	2108      	movs	r1, #8
 8000866:	0018      	movs	r0, r3
 8000868:	f001 ffa7 	bl	80027ba <HAL_GPIO_WritePin>
 800086c:	e006      	b.n	800087c <lcd_write+0x66>
	}
	else
	{
		PIN_LOW(D7_PORT, D7_PIN);
 800086e:	2390      	movs	r3, #144	; 0x90
 8000870:	05db      	lsls	r3, r3, #23
 8000872:	2200      	movs	r2, #0
 8000874:	2108      	movs	r1, #8
 8000876:	0018      	movs	r0, r3
 8000878:	f001 ff9f 	bl	80027ba <HAL_GPIO_WritePin>
	}

	if (data & 0x40)
 800087c:	1dbb      	adds	r3, r7, #6
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2240      	movs	r2, #64	; 0x40
 8000882:	4013      	ands	r3, r2
 8000884:	d007      	beq.n	8000896 <lcd_write+0x80>
	{
		PIN_HIGH(D6_PORT, D6_PIN);
 8000886:	2390      	movs	r3, #144	; 0x90
 8000888:	05db      	lsls	r3, r3, #23
 800088a:	2201      	movs	r2, #1
 800088c:	2104      	movs	r1, #4
 800088e:	0018      	movs	r0, r3
 8000890:	f001 ff93 	bl	80027ba <HAL_GPIO_WritePin>
 8000894:	e006      	b.n	80008a4 <lcd_write+0x8e>
	}
	else
	{
		PIN_LOW(D6_PORT, D6_PIN);
 8000896:	2390      	movs	r3, #144	; 0x90
 8000898:	05db      	lsls	r3, r3, #23
 800089a:	2200      	movs	r2, #0
 800089c:	2104      	movs	r1, #4
 800089e:	0018      	movs	r0, r3
 80008a0:	f001 ff8b 	bl	80027ba <HAL_GPIO_WritePin>
	}

	if (data & 0x20)
 80008a4:	1dbb      	adds	r3, r7, #6
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	2220      	movs	r2, #32
 80008aa:	4013      	ands	r3, r2
 80008ac:	d007      	beq.n	80008be <lcd_write+0xa8>
	{
		PIN_HIGH(D5_PORT, D5_PIN);
 80008ae:	2390      	movs	r3, #144	; 0x90
 80008b0:	05db      	lsls	r3, r3, #23
 80008b2:	2201      	movs	r2, #1
 80008b4:	2102      	movs	r1, #2
 80008b6:	0018      	movs	r0, r3
 80008b8:	f001 ff7f 	bl	80027ba <HAL_GPIO_WritePin>
 80008bc:	e006      	b.n	80008cc <lcd_write+0xb6>
	}
	else
	{
		PIN_LOW(D5_PORT, D5_PIN);
 80008be:	2390      	movs	r3, #144	; 0x90
 80008c0:	05db      	lsls	r3, r3, #23
 80008c2:	2200      	movs	r2, #0
 80008c4:	2102      	movs	r1, #2
 80008c6:	0018      	movs	r0, r3
 80008c8:	f001 ff77 	bl	80027ba <HAL_GPIO_WritePin>
	}

	if (data & 0x10)
 80008cc:	1dbb      	adds	r3, r7, #6
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2210      	movs	r2, #16
 80008d2:	4013      	ands	r3, r2
 80008d4:	d007      	beq.n	80008e6 <lcd_write+0xd0>
	{
		PIN_HIGH(D4_PORT, D4_PIN);
 80008d6:	2390      	movs	r3, #144	; 0x90
 80008d8:	05db      	lsls	r3, r3, #23
 80008da:	2201      	movs	r2, #1
 80008dc:	2101      	movs	r1, #1
 80008de:	0018      	movs	r0, r3
 80008e0:	f001 ff6b 	bl	80027ba <HAL_GPIO_WritePin>
 80008e4:	e006      	b.n	80008f4 <lcd_write+0xde>
	}
	else
	{
		PIN_LOW(D4_PORT, D4_PIN);
 80008e6:	2390      	movs	r3, #144	; 0x90
 80008e8:	05db      	lsls	r3, r3, #23
 80008ea:	2200      	movs	r2, #0
 80008ec:	2101      	movs	r1, #1
 80008ee:	0018      	movs	r0, r3
 80008f0:	f001 ff63 	bl	80027ba <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT, EN_PIN);
 80008f4:	2390      	movs	r3, #144	; 0x90
 80008f6:	05db      	lsls	r3, r3, #23
 80008f8:	2201      	movs	r2, #1
 80008fa:	2110      	movs	r1, #16
 80008fc:	0018      	movs	r0, r3
 80008fe:	f001 ff5c 	bl	80027ba <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT, EN_PIN);
 8000902:	2390      	movs	r3, #144	; 0x90
 8000904:	05db      	lsls	r3, r3, #23
 8000906:	2200      	movs	r2, #0
 8000908:	2110      	movs	r1, #16
 800090a:	0018      	movs	r0, r3
 800090c:	f001 ff55 	bl	80027ba <HAL_GPIO_WritePin>

	// Send Low Nibble
	if (data & 0x08)
 8000910:	1dbb      	adds	r3, r7, #6
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2208      	movs	r2, #8
 8000916:	4013      	ands	r3, r2
 8000918:	d007      	beq.n	800092a <lcd_write+0x114>
	{
		PIN_HIGH(D7_PORT, D7_PIN);
 800091a:	2390      	movs	r3, #144	; 0x90
 800091c:	05db      	lsls	r3, r3, #23
 800091e:	2201      	movs	r2, #1
 8000920:	2108      	movs	r1, #8
 8000922:	0018      	movs	r0, r3
 8000924:	f001 ff49 	bl	80027ba <HAL_GPIO_WritePin>
 8000928:	e006      	b.n	8000938 <lcd_write+0x122>
	}
	else
	{
		PIN_LOW(D7_PORT, D7_PIN);
 800092a:	2390      	movs	r3, #144	; 0x90
 800092c:	05db      	lsls	r3, r3, #23
 800092e:	2200      	movs	r2, #0
 8000930:	2108      	movs	r1, #8
 8000932:	0018      	movs	r0, r3
 8000934:	f001 ff41 	bl	80027ba <HAL_GPIO_WritePin>
	}

	if (data & 0x04)
 8000938:	1dbb      	adds	r3, r7, #6
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	2204      	movs	r2, #4
 800093e:	4013      	ands	r3, r2
 8000940:	d007      	beq.n	8000952 <lcd_write+0x13c>
	{
		PIN_HIGH(D6_PORT, D6_PIN);
 8000942:	2390      	movs	r3, #144	; 0x90
 8000944:	05db      	lsls	r3, r3, #23
 8000946:	2201      	movs	r2, #1
 8000948:	2104      	movs	r1, #4
 800094a:	0018      	movs	r0, r3
 800094c:	f001 ff35 	bl	80027ba <HAL_GPIO_WritePin>
 8000950:	e006      	b.n	8000960 <lcd_write+0x14a>
	}
	else
	{
		PIN_LOW(D6_PORT, D6_PIN);
 8000952:	2390      	movs	r3, #144	; 0x90
 8000954:	05db      	lsls	r3, r3, #23
 8000956:	2200      	movs	r2, #0
 8000958:	2104      	movs	r1, #4
 800095a:	0018      	movs	r0, r3
 800095c:	f001 ff2d 	bl	80027ba <HAL_GPIO_WritePin>
	}

	if (data & 0x02)
 8000960:	1dbb      	adds	r3, r7, #6
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	2202      	movs	r2, #2
 8000966:	4013      	ands	r3, r2
 8000968:	d007      	beq.n	800097a <lcd_write+0x164>
	{
		PIN_HIGH(D5_PORT, D5_PIN);
 800096a:	2390      	movs	r3, #144	; 0x90
 800096c:	05db      	lsls	r3, r3, #23
 800096e:	2201      	movs	r2, #1
 8000970:	2102      	movs	r1, #2
 8000972:	0018      	movs	r0, r3
 8000974:	f001 ff21 	bl	80027ba <HAL_GPIO_WritePin>
 8000978:	e006      	b.n	8000988 <lcd_write+0x172>
	}
	else
	{
		PIN_LOW(D5_PORT, D5_PIN);
 800097a:	2390      	movs	r3, #144	; 0x90
 800097c:	05db      	lsls	r3, r3, #23
 800097e:	2200      	movs	r2, #0
 8000980:	2102      	movs	r1, #2
 8000982:	0018      	movs	r0, r3
 8000984:	f001 ff19 	bl	80027ba <HAL_GPIO_WritePin>
	}

	if (data & 0x01)
 8000988:	1dbb      	adds	r3, r7, #6
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2201      	movs	r2, #1
 800098e:	4013      	ands	r3, r2
 8000990:	d007      	beq.n	80009a2 <lcd_write+0x18c>
	{
		PIN_HIGH(D4_PORT, D4_PIN);
 8000992:	2390      	movs	r3, #144	; 0x90
 8000994:	05db      	lsls	r3, r3, #23
 8000996:	2201      	movs	r2, #1
 8000998:	2101      	movs	r1, #1
 800099a:	0018      	movs	r0, r3
 800099c:	f001 ff0d 	bl	80027ba <HAL_GPIO_WritePin>
 80009a0:	e006      	b.n	80009b0 <lcd_write+0x19a>
	}
	else
	{
		PIN_LOW(D4_PORT, D4_PIN);
 80009a2:	2390      	movs	r3, #144	; 0x90
 80009a4:	05db      	lsls	r3, r3, #23
 80009a6:	2200      	movs	r2, #0
 80009a8:	2101      	movs	r1, #1
 80009aa:	0018      	movs	r0, r3
 80009ac:	f001 ff05 	bl	80027ba <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT, EN_PIN);
 80009b0:	2390      	movs	r3, #144	; 0x90
 80009b2:	05db      	lsls	r3, r3, #23
 80009b4:	2201      	movs	r2, #1
 80009b6:	2110      	movs	r1, #16
 80009b8:	0018      	movs	r0, r3
 80009ba:	f001 fefe 	bl	80027ba <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT, EN_PIN);
 80009be:	2390      	movs	r3, #144	; 0x90
 80009c0:	05db      	lsls	r3, r3, #23
 80009c2:	2200      	movs	r2, #0
 80009c4:	2110      	movs	r1, #16
 80009c6:	0018      	movs	r0, r3
 80009c8:	f001 fef7 	bl	80027ba <HAL_GPIO_WritePin>
}
 80009cc:	46c0      	nop			; (mov r8, r8)
 80009ce:	46bd      	mov	sp, r7
 80009d0:	b002      	add	sp, #8
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <lcd_puts>:

void lcd_puts(uint8_t x, uint8_t y, int8_t *string)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	603a      	str	r2, [r7, #0]
 80009dc:	1dfb      	adds	r3, r7, #7
 80009de:	1c02      	adds	r2, r0, #0
 80009e0:	701a      	strb	r2, [r3, #0]
 80009e2:	1dbb      	adds	r3, r7, #6
 80009e4:	1c0a      	adds	r2, r1, #0
 80009e6:	701a      	strb	r2, [r3, #0]
		break;
	}
#endif

#ifdef LCD20xN // For LCD20x4
	switch (x)
 80009e8:	1dfb      	adds	r3, r7, #7
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2b03      	cmp	r3, #3
 80009ee:	d023      	beq.n	8000a38 <lcd_puts+0x64>
 80009f0:	dc37      	bgt.n	8000a62 <lcd_puts+0x8e>
 80009f2:	2b02      	cmp	r3, #2
 80009f4:	d017      	beq.n	8000a26 <lcd_puts+0x52>
 80009f6:	dc34      	bgt.n	8000a62 <lcd_puts+0x8e>
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d002      	beq.n	8000a02 <lcd_puts+0x2e>
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d009      	beq.n	8000a14 <lcd_puts+0x40>
 8000a00:	e023      	b.n	8000a4a <lcd_puts+0x76>
	{

	case 0: // Row 0
		lcd_write(0, 0x80 + 0x00 + y);
 8000a02:	1dbb      	adds	r3, r7, #6
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	3b80      	subs	r3, #128	; 0x80
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	0019      	movs	r1, r3
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	f7ff ff02 	bl	8000816 <lcd_write>
		break;
 8000a12:	e01a      	b.n	8000a4a <lcd_puts+0x76>
	case 1: // Row 1
		lcd_write(0, 0x80 + 0x40 + y);
 8000a14:	1dbb      	adds	r3, r7, #6
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	3b40      	subs	r3, #64	; 0x40
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	0019      	movs	r1, r3
 8000a1e:	2000      	movs	r0, #0
 8000a20:	f7ff fef9 	bl	8000816 <lcd_write>
		break;
 8000a24:	e011      	b.n	8000a4a <lcd_puts+0x76>
	case 2: // Row 2
		lcd_write(0, 0x80 + 0x14 + y);
 8000a26:	1dbb      	adds	r3, r7, #6
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	3b6c      	subs	r3, #108	; 0x6c
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	0019      	movs	r1, r3
 8000a30:	2000      	movs	r0, #0
 8000a32:	f7ff fef0 	bl	8000816 <lcd_write>
		break;
 8000a36:	e008      	b.n	8000a4a <lcd_puts+0x76>
	case 3: // Row 3
		lcd_write(0, 0x80 + 0x54 + y);
 8000a38:	1dbb      	adds	r3, r7, #6
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	3b2c      	subs	r3, #44	; 0x2c
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	0019      	movs	r1, r3
 8000a42:	2000      	movs	r0, #0
 8000a44:	f7ff fee7 	bl	8000816 <lcd_write>
		break;
 8000a48:	46c0      	nop			; (mov r8, r8)
	}
#endif

	while (*string)
 8000a4a:	e00a      	b.n	8000a62 <lcd_puts+0x8e>
	{
		lcd_write(1, *string);
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	b25b      	sxtb	r3, r3
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	0019      	movs	r1, r3
 8000a56:	2001      	movs	r0, #1
 8000a58:	f7ff fedd 	bl	8000816 <lcd_write>
		string++;
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	603b      	str	r3, [r7, #0]
	while (*string)
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	b25b      	sxtb	r3, r3
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d1ef      	bne.n	8000a4c <lcd_puts+0x78>
	}
}
 8000a6c:	46c0      	nop			; (mov r8, r8)
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	46bd      	mov	sp, r7
 8000a72:	b002      	add	sp, #8
 8000a74:	bd80      	pop	{r7, pc}
	...

08000a78 <clr_data>:

void clr_data(uint8_t pos)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	0002      	movs	r2, r0
 8000a80:	1dfb      	adds	r3, r7, #7
 8000a82:	701a      	strb	r2, [r3, #0]

	switch (pos)
 8000a84:	1dfb      	adds	r3, r7, #7
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b06      	cmp	r3, #6
 8000a8a:	d86a      	bhi.n	8000b62 <clr_data+0xea>
 8000a8c:	009a      	lsls	r2, r3, #2
 8000a8e:	4b37      	ldr	r3, [pc, #220]	; (8000b6c <clr_data+0xf4>)
 8000a90:	18d3      	adds	r3, r2, r3
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	469f      	mov	pc, r3
	{
	case _intensity:
		lcd_puts(1, 7, (int8_t *)"  ");
 8000a96:	4b36      	ldr	r3, [pc, #216]	; (8000b70 <clr_data+0xf8>)
 8000a98:	001a      	movs	r2, r3
 8000a9a:	2107      	movs	r1, #7
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	f7ff ff99 	bl	80009d4 <lcd_puts>
		lcd_puts(1, 8, (int8_t *)"  ");
 8000aa2:	4b33      	ldr	r3, [pc, #204]	; (8000b70 <clr_data+0xf8>)
 8000aa4:	001a      	movs	r2, r3
 8000aa6:	2108      	movs	r1, #8
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	f7ff ff93 	bl	80009d4 <lcd_puts>
		lcd_puts(1, 9, (int8_t *)"  ");
 8000aae:	4b30      	ldr	r3, [pc, #192]	; (8000b70 <clr_data+0xf8>)
 8000ab0:	001a      	movs	r2, r3
 8000ab2:	2109      	movs	r1, #9
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	f7ff ff8d 	bl	80009d4 <lcd_puts>
		break;
 8000aba:	e052      	b.n	8000b62 <clr_data+0xea>
	case _color:
		lcd_puts(2, 7, (int8_t *)"  ");
 8000abc:	4b2c      	ldr	r3, [pc, #176]	; (8000b70 <clr_data+0xf8>)
 8000abe:	001a      	movs	r2, r3
 8000ac0:	2107      	movs	r1, #7
 8000ac2:	2002      	movs	r0, #2
 8000ac4:	f7ff ff86 	bl	80009d4 <lcd_puts>
		break;
 8000ac8:	e04b      	b.n	8000b62 <clr_data+0xea>
	case _sensor:
		lcd_puts(3, 7, (int8_t *)"  ");
 8000aca:	4b29      	ldr	r3, [pc, #164]	; (8000b70 <clr_data+0xf8>)
 8000acc:	001a      	movs	r2, r3
 8000ace:	2107      	movs	r1, #7
 8000ad0:	2003      	movs	r0, #3
 8000ad2:	f7ff ff7f 	bl	80009d4 <lcd_puts>
		lcd_puts(3, 8, (int8_t *)"  ");
 8000ad6:	4b26      	ldr	r3, [pc, #152]	; (8000b70 <clr_data+0xf8>)
 8000ad8:	001a      	movs	r2, r3
 8000ada:	2108      	movs	r1, #8
 8000adc:	2003      	movs	r0, #3
 8000ade:	f7ff ff79 	bl	80009d4 <lcd_puts>
		lcd_puts(3, 9, (int8_t *)"  ");
 8000ae2:	4b23      	ldr	r3, [pc, #140]	; (8000b70 <clr_data+0xf8>)
 8000ae4:	001a      	movs	r2, r3
 8000ae6:	2109      	movs	r1, #9
 8000ae8:	2003      	movs	r0, #3
 8000aea:	f7ff ff73 	bl	80009d4 <lcd_puts>
		break;
 8000aee:	e038      	b.n	8000b62 <clr_data+0xea>

	case _lamp:
		lcd_puts(1, 17, (int8_t *)"  ");
 8000af0:	4b1f      	ldr	r3, [pc, #124]	; (8000b70 <clr_data+0xf8>)
 8000af2:	001a      	movs	r2, r3
 8000af4:	2111      	movs	r1, #17
 8000af6:	2001      	movs	r0, #1
 8000af8:	f7ff ff6c 	bl	80009d4 <lcd_puts>
		lcd_puts(1, 18, (int8_t *)"  ");
 8000afc:	4b1c      	ldr	r3, [pc, #112]	; (8000b70 <clr_data+0xf8>)
 8000afe:	001a      	movs	r2, r3
 8000b00:	2112      	movs	r1, #18
 8000b02:	2001      	movs	r0, #1
 8000b04:	f7ff ff66 	bl	80009d4 <lcd_puts>
		lcd_puts(1, 19, (int8_t *)"  ");
 8000b08:	4b19      	ldr	r3, [pc, #100]	; (8000b70 <clr_data+0xf8>)
 8000b0a:	001a      	movs	r2, r3
 8000b0c:	2113      	movs	r1, #19
 8000b0e:	2001      	movs	r0, #1
 8000b10:	f7ff ff60 	bl	80009d4 <lcd_puts>
		break;
 8000b14:	e025      	b.n	8000b62 <clr_data+0xea>
	case _endo:
		lcd_puts(2, 17, (int8_t *)"  ");
 8000b16:	4b16      	ldr	r3, [pc, #88]	; (8000b70 <clr_data+0xf8>)
 8000b18:	001a      	movs	r2, r3
 8000b1a:	2111      	movs	r1, #17
 8000b1c:	2002      	movs	r0, #2
 8000b1e:	f7ff ff59 	bl	80009d4 <lcd_puts>
		lcd_puts(2, 18, (int8_t *)"  ");
 8000b22:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <clr_data+0xf8>)
 8000b24:	001a      	movs	r2, r3
 8000b26:	2112      	movs	r1, #18
 8000b28:	2002      	movs	r0, #2
 8000b2a:	f7ff ff53 	bl	80009d4 <lcd_puts>
		lcd_puts(2, 19, (int8_t *)"  ");
 8000b2e:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <clr_data+0xf8>)
 8000b30:	001a      	movs	r2, r3
 8000b32:	2113      	movs	r1, #19
 8000b34:	2002      	movs	r0, #2
 8000b36:	f7ff ff4d 	bl	80009d4 <lcd_puts>
		break;
 8000b3a:	e012      	b.n	8000b62 <clr_data+0xea>
	case _depth:
		lcd_puts(3, 17, (int8_t *)" ");
 8000b3c:	4b0d      	ldr	r3, [pc, #52]	; (8000b74 <clr_data+0xfc>)
 8000b3e:	001a      	movs	r2, r3
 8000b40:	2111      	movs	r1, #17
 8000b42:	2003      	movs	r0, #3
 8000b44:	f7ff ff46 	bl	80009d4 <lcd_puts>
		lcd_puts(3, 18, (int8_t *)" ");
 8000b48:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <clr_data+0xfc>)
 8000b4a:	001a      	movs	r2, r3
 8000b4c:	2112      	movs	r1, #18
 8000b4e:	2003      	movs	r0, #3
 8000b50:	f7ff ff40 	bl	80009d4 <lcd_puts>
		lcd_puts(3, 19, (int8_t *)" ");
 8000b54:	4b07      	ldr	r3, [pc, #28]	; (8000b74 <clr_data+0xfc>)
 8000b56:	001a      	movs	r2, r3
 8000b58:	2113      	movs	r1, #19
 8000b5a:	2003      	movs	r0, #3
 8000b5c:	f7ff ff3a 	bl	80009d4 <lcd_puts>
		break;
 8000b60:	46c0      	nop			; (mov r8, r8)
	}
}
 8000b62:	46c0      	nop			; (mov r8, r8)
 8000b64:	46bd      	mov	sp, r7
 8000b66:	b002      	add	sp, #8
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	08005608 	.word	0x08005608
 8000b70:	080054a8 	.word	0x080054a8
 8000b74:	080054ac 	.word	0x080054ac

08000b78 <clr_select>:
void clr_select()
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
	lcd_puts(1, 0, (int8_t *)" ");
 8000b7c:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <clr_select+0x54>)
 8000b7e:	001a      	movs	r2, r3
 8000b80:	2100      	movs	r1, #0
 8000b82:	2001      	movs	r0, #1
 8000b84:	f7ff ff26 	bl	80009d4 <lcd_puts>
	lcd_puts(2, 0, (int8_t *)" ");
 8000b88:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <clr_select+0x54>)
 8000b8a:	001a      	movs	r2, r3
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	2002      	movs	r0, #2
 8000b90:	f7ff ff20 	bl	80009d4 <lcd_puts>
	lcd_puts(3, 0, (int8_t *)" ");
 8000b94:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <clr_select+0x54>)
 8000b96:	001a      	movs	r2, r3
 8000b98:	2100      	movs	r1, #0
 8000b9a:	2003      	movs	r0, #3
 8000b9c:	f7ff ff1a 	bl	80009d4 <lcd_puts>
	lcd_puts(1, 10, (int8_t *)" ");
 8000ba0:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <clr_select+0x54>)
 8000ba2:	001a      	movs	r2, r3
 8000ba4:	210a      	movs	r1, #10
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	f7ff ff14 	bl	80009d4 <lcd_puts>
	lcd_puts(2, 10, (int8_t *)" ");
 8000bac:	4b07      	ldr	r3, [pc, #28]	; (8000bcc <clr_select+0x54>)
 8000bae:	001a      	movs	r2, r3
 8000bb0:	210a      	movs	r1, #10
 8000bb2:	2002      	movs	r0, #2
 8000bb4:	f7ff ff0e 	bl	80009d4 <lcd_puts>
	lcd_puts(3, 10, (int8_t *)" ");
 8000bb8:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <clr_select+0x54>)
 8000bba:	001a      	movs	r2, r3
 8000bbc:	210a      	movs	r1, #10
 8000bbe:	2003      	movs	r0, #3
 8000bc0:	f7ff ff08 	bl	80009d4 <lcd_puts>
}
 8000bc4:	46c0      	nop			; (mov r8, r8)
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	080054ac 	.word	0x080054ac

08000bd0 <lcd_clear>:
void lcd_clear(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
	lcd_write(0, 0x01);
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	f7ff fe1d 	bl	8000816 <lcd_write>
}
 8000bdc:	46c0      	nop			; (mov r8, r8)
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <clock_page>:
	current = current % 60;
	run_time->seconds = current;
}

void clock_page(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
	lcd_clear();
 8000be8:	f7ff fff2 	bl	8000bd0 <lcd_clear>
	lcd_puts(0, 1, (int8_t *)"OTL Total Run Time");
 8000bec:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <clock_page+0x40>)
 8000bee:	001a      	movs	r2, r3
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	f7ff feee 	bl	80009d4 <lcd_puts>
	lcd_puts(1, 3, (int8_t *)"Hours");
 8000bf8:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <clock_page+0x44>)
 8000bfa:	001a      	movs	r2, r3
 8000bfc:	2103      	movs	r1, #3
 8000bfe:	2001      	movs	r0, #1
 8000c00:	f7ff fee8 	bl	80009d4 <lcd_puts>
	lcd_puts(2, 3, (int8_t *)"Minutes");
 8000c04:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <clock_page+0x48>)
 8000c06:	001a      	movs	r2, r3
 8000c08:	2103      	movs	r1, #3
 8000c0a:	2002      	movs	r0, #2
 8000c0c:	f7ff fee2 	bl	80009d4 <lcd_puts>
	lcd_puts(3, 3, (int8_t *)"Seconds");
 8000c10:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <clock_page+0x4c>)
 8000c12:	001a      	movs	r2, r3
 8000c14:	2103      	movs	r1, #3
 8000c16:	2003      	movs	r0, #3
 8000c18:	f7ff fedc 	bl	80009d4 <lcd_puts>
}
 8000c1c:	46c0      	nop			; (mov r8, r8)
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	0800550c 	.word	0x0800550c
 8000c28:	08005520 	.word	0x08005520
 8000c2c:	08005528 	.word	0x08005528
 8000c30:	08005530 	.word	0x08005530

08000c34 <Total_Time_Print>:

void Total_Time_Print(uint32_t total)
{
 8000c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c36:	b087      	sub	sp, #28
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
	char buffer[3];
	uint32_t current = total;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	617b      	str	r3, [r7, #20]
	uint8_t h = current / (60 * 60);
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	22e1      	movs	r2, #225	; 0xe1
 8000c44:	0111      	lsls	r1, r2, #4
 8000c46:	0018      	movs	r0, r3
 8000c48:	f7ff fa68 	bl	800011c <__udivsi3>
 8000c4c:	0003      	movs	r3, r0
 8000c4e:	001a      	movs	r2, r3
 8000c50:	2413      	movs	r4, #19
 8000c52:	193b      	adds	r3, r7, r4
 8000c54:	701a      	strb	r2, [r3, #0]
	current = current % 3600;
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	22e1      	movs	r2, #225	; 0xe1
 8000c5a:	0111      	lsls	r1, r2, #4
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	f7ff fae3 	bl	8000228 <__aeabi_uidivmod>
 8000c62:	000b      	movs	r3, r1
 8000c64:	617b      	str	r3, [r7, #20]
	uint8_t m = current / 60;
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	213c      	movs	r1, #60	; 0x3c
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f7ff fa56 	bl	800011c <__udivsi3>
 8000c70:	0003      	movs	r3, r0
 8000c72:	001a      	movs	r2, r3
 8000c74:	2512      	movs	r5, #18
 8000c76:	197b      	adds	r3, r7, r5
 8000c78:	701a      	strb	r2, [r3, #0]
	current = current % 60;
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	213c      	movs	r1, #60	; 0x3c
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f7ff fad2 	bl	8000228 <__aeabi_uidivmod>
 8000c84:	000b      	movs	r3, r1
 8000c86:	617b      	str	r3, [r7, #20]
	uint8_t s = current;
 8000c88:	2611      	movs	r6, #17
 8000c8a:	19bb      	adds	r3, r7, r6
 8000c8c:	697a      	ldr	r2, [r7, #20]
 8000c8e:	701a      	strb	r2, [r3, #0]
	//		current = current %60;
	//		run_time->seconds = current;

	// clock_page();

	sprintf(buffer, "%02d", h); // run_time->hour
 8000c90:	193b      	adds	r3, r7, r4
 8000c92:	781a      	ldrb	r2, [r3, #0]
 8000c94:	4914      	ldr	r1, [pc, #80]	; (8000ce8 <Total_Time_Print+0xb4>)
 8000c96:	240c      	movs	r4, #12
 8000c98:	193b      	adds	r3, r7, r4
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f003 ff8e 	bl	8004bbc <siprintf>
	lcd_puts(1, 0, (int8_t *)buffer);
 8000ca0:	193b      	adds	r3, r7, r4
 8000ca2:	001a      	movs	r2, r3
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	f7ff fe94 	bl	80009d4 <lcd_puts>
	sprintf(buffer, "%02d", m);
 8000cac:	197b      	adds	r3, r7, r5
 8000cae:	781a      	ldrb	r2, [r3, #0]
 8000cb0:	490d      	ldr	r1, [pc, #52]	; (8000ce8 <Total_Time_Print+0xb4>)
 8000cb2:	193b      	adds	r3, r7, r4
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f003 ff81 	bl	8004bbc <siprintf>
	lcd_puts(2, 0, (int8_t *)buffer);
 8000cba:	193b      	adds	r3, r7, r4
 8000cbc:	001a      	movs	r2, r3
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	2002      	movs	r0, #2
 8000cc2:	f7ff fe87 	bl	80009d4 <lcd_puts>
	sprintf(buffer, "%02d", s);
 8000cc6:	19bb      	adds	r3, r7, r6
 8000cc8:	781a      	ldrb	r2, [r3, #0]
 8000cca:	4907      	ldr	r1, [pc, #28]	; (8000ce8 <Total_Time_Print+0xb4>)
 8000ccc:	193b      	adds	r3, r7, r4
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f003 ff74 	bl	8004bbc <siprintf>
	lcd_puts(3, 0, (int8_t *)buffer);
 8000cd4:	193b      	adds	r3, r7, r4
 8000cd6:	001a      	movs	r2, r3
 8000cd8:	2100      	movs	r1, #0
 8000cda:	2003      	movs	r0, #3
 8000cdc:	f7ff fe7a 	bl	80009d4 <lcd_puts>
}
 8000ce0:	46c0      	nop			; (mov r8, r8)
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	b007      	add	sp, #28
 8000ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ce8:	080054d0 	.word	0x080054d0

08000cec <home_page>:

void home_page()
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
	lcd_clear();
 8000cf0:	f7ff ff6e 	bl	8000bd0 <lcd_clear>
	lcd_puts(0, 3, (int8_t *)"COGNATE INDIA");
 8000cf4:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <home_page+0x34>)
 8000cf6:	001a      	movs	r2, r3
 8000cf8:	2103      	movs	r1, #3
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f7ff fe6a 	bl	80009d4 <lcd_puts>
	// lcd_puts(1, 3,(int8_t*) "Hours");
	lcd_puts(2, 3, (int8_t *)"VISION SERIES");
 8000d00:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <home_page+0x38>)
 8000d02:	001a      	movs	r2, r3
 8000d04:	2103      	movs	r1, #3
 8000d06:	2002      	movs	r0, #2
 8000d08:	f7ff fe64 	bl	80009d4 <lcd_puts>
	lcd_puts(3, 5, (int8_t *)"LED LIGHT");
 8000d0c:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <home_page+0x3c>)
 8000d0e:	001a      	movs	r2, r3
 8000d10:	2105      	movs	r1, #5
 8000d12:	2003      	movs	r0, #3
 8000d14:	f7ff fe5e 	bl	80009d4 <lcd_puts>
}
 8000d18:	46c0      	nop			; (mov r8, r8)
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	08005538 	.word	0x08005538
 8000d24:	08005548 	.word	0x08005548
 8000d28:	08005558 	.word	0x08005558

08000d2c <update_key_press>:
	sprintf(buffer, "%02d", _data);
	lcd_puts(3, 2, buffer); // x = 2, y = 3
}

uint8_t update_key_press()
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
	if (key_pressed.prv)
 8000d30:	4b4b      	ldr	r3, [pc, #300]	; (8000e60 <update_key_press+0x134>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	07db      	lsls	r3, r3, #31
 8000d36:	0fdb      	lsrs	r3, r3, #31
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d00b      	beq.n	8000d56 <update_key_press+0x2a>
	{
		current_pos.key_number = _prv;
 8000d3e:	4b49      	ldr	r3, [pc, #292]	; (8000e64 <update_key_press+0x138>)
 8000d40:	781a      	ldrb	r2, [r3, #0]
 8000d42:	2138      	movs	r1, #56	; 0x38
 8000d44:	438a      	bics	r2, r1
 8000d46:	701a      	strb	r2, [r3, #0]
		key_pressed.prv = 0;
 8000d48:	4a45      	ldr	r2, [pc, #276]	; (8000e60 <update_key_press+0x134>)
 8000d4a:	7813      	ldrb	r3, [r2, #0]
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	438b      	bics	r3, r1
 8000d50:	7013      	strb	r3, [r2, #0]
		return _prv;
 8000d52:	2300      	movs	r3, #0
 8000d54:	e081      	b.n	8000e5a <update_key_press+0x12e>
	}
	else if (key_pressed.nxt)
 8000d56:	4b42      	ldr	r3, [pc, #264]	; (8000e60 <update_key_press+0x134>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	079b      	lsls	r3, r3, #30
 8000d5c:	0fdb      	lsrs	r3, r3, #31
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d00e      	beq.n	8000d82 <update_key_press+0x56>
	{
		key_pressed.nxt = 0;
 8000d64:	4a3e      	ldr	r2, [pc, #248]	; (8000e60 <update_key_press+0x134>)
 8000d66:	7813      	ldrb	r3, [r2, #0]
 8000d68:	2102      	movs	r1, #2
 8000d6a:	438b      	bics	r3, r1
 8000d6c:	7013      	strb	r3, [r2, #0]
		current_pos.key_number = _nxt;
 8000d6e:	4b3d      	ldr	r3, [pc, #244]	; (8000e64 <update_key_press+0x138>)
 8000d70:	781a      	ldrb	r2, [r3, #0]
 8000d72:	2138      	movs	r1, #56	; 0x38
 8000d74:	438a      	bics	r2, r1
 8000d76:	1c11      	adds	r1, r2, #0
 8000d78:	2208      	movs	r2, #8
 8000d7a:	430a      	orrs	r2, r1
 8000d7c:	701a      	strb	r2, [r3, #0]

		return _nxt;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e06b      	b.n	8000e5a <update_key_press+0x12e>
	}
	else if (key_pressed.depth)
 8000d82:	4b37      	ldr	r3, [pc, #220]	; (8000e60 <update_key_press+0x134>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	075b      	lsls	r3, r3, #29
 8000d88:	0fdb      	lsrs	r3, r3, #31
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d037      	beq.n	8000e00 <update_key_press+0xd4>
	{
		key_pressed.depth = 0;
 8000d90:	4a33      	ldr	r2, [pc, #204]	; (8000e60 <update_key_press+0x134>)
 8000d92:	7813      	ldrb	r3, [r2, #0]
 8000d94:	2104      	movs	r1, #4
 8000d96:	438b      	bics	r3, r1
 8000d98:	7013      	strb	r3, [r2, #0]
		current_pos.key_number = _depth;
 8000d9a:	4b32      	ldr	r3, [pc, #200]	; (8000e64 <update_key_press+0x138>)
 8000d9c:	781a      	ldrb	r2, [r3, #0]
 8000d9e:	2138      	movs	r1, #56	; 0x38
 8000da0:	438a      	bics	r2, r1
 8000da2:	1c11      	adds	r1, r2, #0
 8000da4:	2210      	movs	r2, #16
 8000da6:	430a      	orrs	r2, r1
 8000da8:	701a      	strb	r2, [r3, #0]
		data_reg.depth = !data_reg.depth;
 8000daa:	4b2f      	ldr	r3, [pc, #188]	; (8000e68 <update_key_press+0x13c>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	b25b      	sxtb	r3, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	09db      	lsrs	r3, r3, #7
 8000db6:	b2da      	uxtb	r2, r3
 8000db8:	4b2b      	ldr	r3, [pc, #172]	; (8000e68 <update_key_press+0x13c>)
 8000dba:	01d0      	lsls	r0, r2, #7
 8000dbc:	781a      	ldrb	r2, [r3, #0]
 8000dbe:	217f      	movs	r1, #127	; 0x7f
 8000dc0:	400a      	ands	r2, r1
 8000dc2:	1c11      	adds	r1, r2, #0
 8000dc4:	1c02      	adds	r2, r0, #0
 8000dc6:	430a      	orrs	r2, r1
 8000dc8:	701a      	strb	r2, [r3, #0]
		clr_data(depth);
 8000dca:	2006      	movs	r0, #6
 8000dcc:	f7ff fe54 	bl	8000a78 <clr_data>
		clr_select();
 8000dd0:	f7ff fed2 	bl	8000b78 <clr_select>
//		lcd_puts(3, 10, (int8_t *)">");
		if (data_reg.depth)
 8000dd4:	4b24      	ldr	r3, [pc, #144]	; (8000e68 <update_key_press+0x13c>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	227f      	movs	r2, #127	; 0x7f
 8000dda:	4393      	bics	r3, r2
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d006      	beq.n	8000df0 <update_key_press+0xc4>
			lcd_puts(3, 17, (int8_t *)"ON");
 8000de2:	4b22      	ldr	r3, [pc, #136]	; (8000e6c <update_key_press+0x140>)
 8000de4:	001a      	movs	r2, r3
 8000de6:	2111      	movs	r1, #17
 8000de8:	2003      	movs	r0, #3
 8000dea:	f7ff fdf3 	bl	80009d4 <lcd_puts>
 8000dee:	e005      	b.n	8000dfc <update_key_press+0xd0>
		else
			lcd_puts(3, 17, (int8_t *)"OFF");
 8000df0:	4b1f      	ldr	r3, [pc, #124]	; (8000e70 <update_key_press+0x144>)
 8000df2:	001a      	movs	r2, r3
 8000df4:	2111      	movs	r1, #17
 8000df6:	2003      	movs	r0, #3
 8000df8:	f7ff fdec 	bl	80009d4 <lcd_puts>

		return _depth;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	e02c      	b.n	8000e5a <update_key_press+0x12e>
	}
	else if (key_pressed.pos)
 8000e00:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <update_key_press+0x134>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	071b      	lsls	r3, r3, #28
 8000e06:	0fdb      	lsrs	r3, r3, #31
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d00e      	beq.n	8000e2c <update_key_press+0x100>
	{
		key_pressed.pos = 0;
 8000e0e:	4a14      	ldr	r2, [pc, #80]	; (8000e60 <update_key_press+0x134>)
 8000e10:	7813      	ldrb	r3, [r2, #0]
 8000e12:	2108      	movs	r1, #8
 8000e14:	438b      	bics	r3, r1
 8000e16:	7013      	strb	r3, [r2, #0]
		current_pos.key_number = _pos;
 8000e18:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <update_key_press+0x138>)
 8000e1a:	781a      	ldrb	r2, [r3, #0]
 8000e1c:	2138      	movs	r1, #56	; 0x38
 8000e1e:	438a      	bics	r2, r1
 8000e20:	1c11      	adds	r1, r2, #0
 8000e22:	2220      	movs	r2, #32
 8000e24:	430a      	orrs	r2, r1
 8000e26:	701a      	strb	r2, [r3, #0]
		return _pos;
 8000e28:	2304      	movs	r3, #4
 8000e2a:	e016      	b.n	8000e5a <update_key_press+0x12e>
	}
	else if (key_pressed.neg)
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <update_key_press+0x134>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	06db      	lsls	r3, r3, #27
 8000e32:	0fdb      	lsrs	r3, r3, #31
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d00e      	beq.n	8000e58 <update_key_press+0x12c>
	{
		key_pressed.neg = 0;
 8000e3a:	4a09      	ldr	r2, [pc, #36]	; (8000e60 <update_key_press+0x134>)
 8000e3c:	7813      	ldrb	r3, [r2, #0]
 8000e3e:	2110      	movs	r1, #16
 8000e40:	438b      	bics	r3, r1
 8000e42:	7013      	strb	r3, [r2, #0]
		current_pos.key_number = _neg;
 8000e44:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <update_key_press+0x138>)
 8000e46:	781a      	ldrb	r2, [r3, #0]
 8000e48:	2138      	movs	r1, #56	; 0x38
 8000e4a:	438a      	bics	r2, r1
 8000e4c:	1c11      	adds	r1, r2, #0
 8000e4e:	2218      	movs	r2, #24
 8000e50:	430a      	orrs	r2, r1
 8000e52:	701a      	strb	r2, [r3, #0]
		return _neg;
 8000e54:	2303      	movs	r3, #3
 8000e56:	e000      	b.n	8000e5a <update_key_press+0x12e>
	}

	return 0;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	200000b8 	.word	0x200000b8
 8000e64:	20000004 	.word	0x20000004
 8000e68:	20000008 	.word	0x20000008
 8000e6c:	0800556c 	.word	0x0800556c
 8000e70:	08005570 	.word	0x08005570

08000e74 <set_data_positive>:
//	current_pos.position_cursor =  sensor;
//	data_reg.sensor = !data_reg.sensor;
//
// }
void set_data_positive()
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
	switch (current_pos.position_cursor)
 8000e78:	4b30      	ldr	r3, [pc, #192]	; (8000f3c <set_data_positive+0xc8>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	075b      	lsls	r3, r3, #29
 8000e7e:	0f5b      	lsrs	r3, r3, #29
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	2b06      	cmp	r3, #6
 8000e84:	d857      	bhi.n	8000f36 <set_data_positive+0xc2>
 8000e86:	009a      	lsls	r2, r3, #2
 8000e88:	4b2d      	ldr	r3, [pc, #180]	; (8000f40 <set_data_positive+0xcc>)
 8000e8a:	18d3      	adds	r3, r2, r3
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	469f      	mov	pc, r3
	{
	case intensity:
		data_reg.intensity++;
 8000e90:	4b2c      	ldr	r3, [pc, #176]	; (8000f44 <set_data_positive+0xd0>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	071b      	lsls	r3, r3, #28
 8000e96:	0f1b      	lsrs	r3, r3, #28
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	1c1a      	adds	r2, r3, #0
 8000e9e:	230f      	movs	r3, #15
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	b2da      	uxtb	r2, r3
 8000ea4:	4b27      	ldr	r3, [pc, #156]	; (8000f44 <set_data_positive+0xd0>)
 8000ea6:	210f      	movs	r1, #15
 8000ea8:	400a      	ands	r2, r1
 8000eaa:	0010      	movs	r0, r2
 8000eac:	781a      	ldrb	r2, [r3, #0]
 8000eae:	210f      	movs	r1, #15
 8000eb0:	438a      	bics	r2, r1
 8000eb2:	1c11      	adds	r1, r2, #0
 8000eb4:	1c02      	adds	r2, r0, #0
 8000eb6:	430a      	orrs	r2, r1
 8000eb8:	701a      	strb	r2, [r3, #0]
		if (data_reg.intensity >= 10)
 8000eba:	4b22      	ldr	r3, [pc, #136]	; (8000f44 <set_data_positive+0xd0>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	071b      	lsls	r3, r3, #28
 8000ec0:	0f1b      	lsrs	r3, r3, #28
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	2b09      	cmp	r3, #9
 8000ec6:	d933      	bls.n	8000f30 <set_data_positive+0xbc>
			data_reg.intensity = 10;
 8000ec8:	4b1e      	ldr	r3, [pc, #120]	; (8000f44 <set_data_positive+0xd0>)
 8000eca:	781a      	ldrb	r2, [r3, #0]
 8000ecc:	210f      	movs	r1, #15
 8000ece:	438a      	bics	r2, r1
 8000ed0:	1c11      	adds	r1, r2, #0
 8000ed2:	220a      	movs	r2, #10
 8000ed4:	430a      	orrs	r2, r1
 8000ed6:	701a      	strb	r2, [r3, #0]
		break;
 8000ed8:	e02a      	b.n	8000f30 <set_data_positive+0xbc>
	case color:
		data_reg.color++;
 8000eda:	4b1a      	ldr	r3, [pc, #104]	; (8000f44 <set_data_positive+0xd0>)
 8000edc:	785b      	ldrb	r3, [r3, #1]
 8000ede:	b25b      	sxtb	r3, r3
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	b25a      	sxtb	r2, r3
 8000ee8:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <set_data_positive+0xd0>)
 8000eea:	705a      	strb	r2, [r3, #1]
		if (data_reg.color > 5)
 8000eec:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <set_data_positive+0xd0>)
 8000eee:	785b      	ldrb	r3, [r3, #1]
 8000ef0:	b25b      	sxtb	r3, r3
 8000ef2:	2b05      	cmp	r3, #5
 8000ef4:	dd1e      	ble.n	8000f34 <set_data_positive+0xc0>
			data_reg.color = 5;
 8000ef6:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <set_data_positive+0xd0>)
 8000ef8:	2205      	movs	r2, #5
 8000efa:	705a      	strb	r2, [r3, #1]
		break;
 8000efc:	e01a      	b.n	8000f34 <set_data_positive+0xc0>
	case sensor:
		data_reg.sensor = on;
 8000efe:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <set_data_positive+0xd0>)
 8000f00:	781a      	ldrb	r2, [r3, #0]
 8000f02:	2110      	movs	r1, #16
 8000f04:	430a      	orrs	r2, r1
 8000f06:	701a      	strb	r2, [r3, #0]
		break;
 8000f08:	e015      	b.n	8000f36 <set_data_positive+0xc2>
	case lamp:
		data_reg.lamp = on;
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <set_data_positive+0xd0>)
 8000f0c:	781a      	ldrb	r2, [r3, #0]
 8000f0e:	2120      	movs	r1, #32
 8000f10:	430a      	orrs	r2, r1
 8000f12:	701a      	strb	r2, [r3, #0]
		break;
 8000f14:	e00f      	b.n	8000f36 <set_data_positive+0xc2>
	case endo:
		data_reg.endo = on;
 8000f16:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <set_data_positive+0xd0>)
 8000f18:	781a      	ldrb	r2, [r3, #0]
 8000f1a:	2140      	movs	r1, #64	; 0x40
 8000f1c:	430a      	orrs	r2, r1
 8000f1e:	701a      	strb	r2, [r3, #0]
		break;
 8000f20:	e009      	b.n	8000f36 <set_data_positive+0xc2>
	case depth:
		data_reg.depth = on;
 8000f22:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <set_data_positive+0xd0>)
 8000f24:	781a      	ldrb	r2, [r3, #0]
 8000f26:	2180      	movs	r1, #128	; 0x80
 8000f28:	4249      	negs	r1, r1
 8000f2a:	430a      	orrs	r2, r1
 8000f2c:	701a      	strb	r2, [r3, #0]
		break;
 8000f2e:	e002      	b.n	8000f36 <set_data_positive+0xc2>
		break;
 8000f30:	46c0      	nop			; (mov r8, r8)
 8000f32:	e000      	b.n	8000f36 <set_data_positive+0xc2>
		break;
 8000f34:	46c0      	nop			; (mov r8, r8)
	}
}
 8000f36:	46c0      	nop			; (mov r8, r8)
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000004 	.word	0x20000004
 8000f40:	08005624 	.word	0x08005624
 8000f44:	20000008 	.word	0x20000008

08000f48 <set_data_negative>:

void set_data_negative()
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
	switch (current_pos.position_cursor)
 8000f4c:	4b30      	ldr	r3, [pc, #192]	; (8001010 <set_data_negative+0xc8>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	075b      	lsls	r3, r3, #29
 8000f52:	0f5b      	lsrs	r3, r3, #29
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	2b06      	cmp	r3, #6
 8000f58:	d856      	bhi.n	8001008 <set_data_negative+0xc0>
 8000f5a:	009a      	lsls	r2, r3, #2
 8000f5c:	4b2d      	ldr	r3, [pc, #180]	; (8001014 <set_data_negative+0xcc>)
 8000f5e:	18d3      	adds	r3, r2, r3
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	469f      	mov	pc, r3
	{
	case intensity:
		data_reg.intensity--;
 8000f64:	4b2c      	ldr	r3, [pc, #176]	; (8001018 <set_data_negative+0xd0>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	071b      	lsls	r3, r3, #28
 8000f6a:	0f1b      	lsrs	r3, r3, #28
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	330f      	adds	r3, #15
 8000f70:	1c1a      	adds	r2, r3, #0
 8000f72:	230f      	movs	r3, #15
 8000f74:	4013      	ands	r3, r2
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	4b27      	ldr	r3, [pc, #156]	; (8001018 <set_data_negative+0xd0>)
 8000f7a:	210f      	movs	r1, #15
 8000f7c:	400a      	ands	r2, r1
 8000f7e:	0010      	movs	r0, r2
 8000f80:	781a      	ldrb	r2, [r3, #0]
 8000f82:	210f      	movs	r1, #15
 8000f84:	438a      	bics	r2, r1
 8000f86:	1c11      	adds	r1, r2, #0
 8000f88:	1c02      	adds	r2, r0, #0
 8000f8a:	430a      	orrs	r2, r1
 8000f8c:	701a      	strb	r2, [r3, #0]
		if (data_reg.intensity <= 1)
 8000f8e:	4b22      	ldr	r3, [pc, #136]	; (8001018 <set_data_negative+0xd0>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	071b      	lsls	r3, r3, #28
 8000f94:	0f1b      	lsrs	r3, r3, #28
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d832      	bhi.n	8001002 <set_data_negative+0xba>
			data_reg.intensity = 1;
 8000f9c:	4b1e      	ldr	r3, [pc, #120]	; (8001018 <set_data_negative+0xd0>)
 8000f9e:	781a      	ldrb	r2, [r3, #0]
 8000fa0:	210f      	movs	r1, #15
 8000fa2:	438a      	bics	r2, r1
 8000fa4:	1c11      	adds	r1, r2, #0
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	701a      	strb	r2, [r3, #0]
		break;
 8000fac:	e029      	b.n	8001002 <set_data_negative+0xba>
	case color:
		data_reg.color--;
 8000fae:	4b1a      	ldr	r3, [pc, #104]	; (8001018 <set_data_negative+0xd0>)
 8000fb0:	785b      	ldrb	r3, [r3, #1]
 8000fb2:	b25b      	sxtb	r3, r3
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	b25a      	sxtb	r2, r3
 8000fbc:	4b16      	ldr	r3, [pc, #88]	; (8001018 <set_data_negative+0xd0>)
 8000fbe:	705a      	strb	r2, [r3, #1]
		if (data_reg.color < -5)
 8000fc0:	4b15      	ldr	r3, [pc, #84]	; (8001018 <set_data_negative+0xd0>)
 8000fc2:	785b      	ldrb	r3, [r3, #1]
 8000fc4:	b25b      	sxtb	r3, r3
 8000fc6:	3305      	adds	r3, #5
 8000fc8:	da1d      	bge.n	8001006 <set_data_negative+0xbe>
			data_reg.color = -5;
 8000fca:	4b13      	ldr	r3, [pc, #76]	; (8001018 <set_data_negative+0xd0>)
 8000fcc:	22fb      	movs	r2, #251	; 0xfb
 8000fce:	705a      	strb	r2, [r3, #1]
		break;
 8000fd0:	e019      	b.n	8001006 <set_data_negative+0xbe>
	case sensor:
		data_reg.sensor = off;
 8000fd2:	4b11      	ldr	r3, [pc, #68]	; (8001018 <set_data_negative+0xd0>)
 8000fd4:	781a      	ldrb	r2, [r3, #0]
 8000fd6:	2110      	movs	r1, #16
 8000fd8:	438a      	bics	r2, r1
 8000fda:	701a      	strb	r2, [r3, #0]
		break;
 8000fdc:	e014      	b.n	8001008 <set_data_negative+0xc0>
	case lamp:
		data_reg.lamp = off;
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <set_data_negative+0xd0>)
 8000fe0:	781a      	ldrb	r2, [r3, #0]
 8000fe2:	2120      	movs	r1, #32
 8000fe4:	438a      	bics	r2, r1
 8000fe6:	701a      	strb	r2, [r3, #0]
		break;
 8000fe8:	e00e      	b.n	8001008 <set_data_negative+0xc0>
	case endo:
		data_reg.endo = off;
 8000fea:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <set_data_negative+0xd0>)
 8000fec:	781a      	ldrb	r2, [r3, #0]
 8000fee:	2140      	movs	r1, #64	; 0x40
 8000ff0:	438a      	bics	r2, r1
 8000ff2:	701a      	strb	r2, [r3, #0]
		break;
 8000ff4:	e008      	b.n	8001008 <set_data_negative+0xc0>
	case depth:
		data_reg.depth = off;
 8000ff6:	4b08      	ldr	r3, [pc, #32]	; (8001018 <set_data_negative+0xd0>)
 8000ff8:	781a      	ldrb	r2, [r3, #0]
 8000ffa:	217f      	movs	r1, #127	; 0x7f
 8000ffc:	400a      	ands	r2, r1
 8000ffe:	701a      	strb	r2, [r3, #0]
		break;
 8001000:	e002      	b.n	8001008 <set_data_negative+0xc0>
		break;
 8001002:	46c0      	nop			; (mov r8, r8)
 8001004:	e000      	b.n	8001008 <set_data_negative+0xc0>
		break;
 8001006:	46c0      	nop			; (mov r8, r8)
	}
}
 8001008:	46c0      	nop			; (mov r8, r8)
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	46c0      	nop			; (mov r8, r8)
 8001010:	20000004 	.word	0x20000004
 8001014:	08005640 	.word	0x08005640
 8001018:	20000008 	.word	0x20000008

0800101c <update_new_data>:

void update_new_data()
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
	switch (current_pos.key_number)
 8001020:	4b47      	ldr	r3, [pc, #284]	; (8001140 <update_new_data+0x124>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	069b      	lsls	r3, r3, #26
 8001026:	0f5b      	lsrs	r3, r3, #29
 8001028:	b2db      	uxtb	r3, r3
 800102a:	2b04      	cmp	r3, #4
 800102c:	d900      	bls.n	8001030 <update_new_data+0x14>
 800102e:	e083      	b.n	8001138 <update_new_data+0x11c>
 8001030:	009a      	lsls	r2, r3, #2
 8001032:	4b44      	ldr	r3, [pc, #272]	; (8001144 <update_new_data+0x128>)
 8001034:	18d3      	adds	r3, r2, r3
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	469f      	mov	pc, r3
	{
	case _prv:
		current_pos.position_cursor--;
 800103a:	4b41      	ldr	r3, [pc, #260]	; (8001140 <update_new_data+0x124>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	075b      	lsls	r3, r3, #29
 8001040:	0f5b      	lsrs	r3, r3, #29
 8001042:	b2db      	uxtb	r3, r3
 8001044:	3307      	adds	r3, #7
 8001046:	1c1a      	adds	r2, r3, #0
 8001048:	2307      	movs	r3, #7
 800104a:	4013      	ands	r3, r2
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4b3c      	ldr	r3, [pc, #240]	; (8001140 <update_new_data+0x124>)
 8001050:	2107      	movs	r1, #7
 8001052:	400a      	ands	r2, r1
 8001054:	0010      	movs	r0, r2
 8001056:	781a      	ldrb	r2, [r3, #0]
 8001058:	2107      	movs	r1, #7
 800105a:	438a      	bics	r2, r1
 800105c:	1c11      	adds	r1, r2, #0
 800105e:	1c02      	adds	r2, r0, #0
 8001060:	430a      	orrs	r2, r1
 8001062:	701a      	strb	r2, [r3, #0]
		if (current_pos.position_cursor < 1)
 8001064:	4b36      	ldr	r3, [pc, #216]	; (8001140 <update_new_data+0x124>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2207      	movs	r2, #7
 800106a:	4013      	ands	r3, r2
 800106c:	b2db      	uxtb	r3, r3
 800106e:	2b00      	cmp	r3, #0
 8001070:	d15f      	bne.n	8001132 <update_new_data+0x116>
			current_pos.position_cursor = 6;
 8001072:	4b33      	ldr	r3, [pc, #204]	; (8001140 <update_new_data+0x124>)
 8001074:	781a      	ldrb	r2, [r3, #0]
 8001076:	2107      	movs	r1, #7
 8001078:	438a      	bics	r2, r1
 800107a:	1c11      	adds	r1, r2, #0
 800107c:	2206      	movs	r2, #6
 800107e:	430a      	orrs	r2, r1
 8001080:	701a      	strb	r2, [r3, #0]
		break;
 8001082:	e056      	b.n	8001132 <update_new_data+0x116>
	case _nxt:
		current_pos.position_cursor++;
 8001084:	4b2e      	ldr	r3, [pc, #184]	; (8001140 <update_new_data+0x124>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	075b      	lsls	r3, r3, #29
 800108a:	0f5b      	lsrs	r3, r3, #29
 800108c:	b2db      	uxtb	r3, r3
 800108e:	3301      	adds	r3, #1
 8001090:	1c1a      	adds	r2, r3, #0
 8001092:	2307      	movs	r3, #7
 8001094:	4013      	ands	r3, r2
 8001096:	b2da      	uxtb	r2, r3
 8001098:	4b29      	ldr	r3, [pc, #164]	; (8001140 <update_new_data+0x124>)
 800109a:	2107      	movs	r1, #7
 800109c:	400a      	ands	r2, r1
 800109e:	0010      	movs	r0, r2
 80010a0:	781a      	ldrb	r2, [r3, #0]
 80010a2:	2107      	movs	r1, #7
 80010a4:	438a      	bics	r2, r1
 80010a6:	1c11      	adds	r1, r2, #0
 80010a8:	1c02      	adds	r2, r0, #0
 80010aa:	430a      	orrs	r2, r1
 80010ac:	701a      	strb	r2, [r3, #0]
		if (current_pos.position_cursor > 6)
 80010ae:	4b24      	ldr	r3, [pc, #144]	; (8001140 <update_new_data+0x124>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	2207      	movs	r2, #7
 80010b4:	4013      	ands	r3, r2
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	2b07      	cmp	r3, #7
 80010ba:	d13c      	bne.n	8001136 <update_new_data+0x11a>
			current_pos.position_cursor = 1;
 80010bc:	4b20      	ldr	r3, [pc, #128]	; (8001140 <update_new_data+0x124>)
 80010be:	781a      	ldrb	r2, [r3, #0]
 80010c0:	2107      	movs	r1, #7
 80010c2:	438a      	bics	r2, r1
 80010c4:	1c11      	adds	r1, r2, #0
 80010c6:	2201      	movs	r2, #1
 80010c8:	430a      	orrs	r2, r1
 80010ca:	701a      	strb	r2, [r3, #0]
		break;
 80010cc:	e033      	b.n	8001136 <update_new_data+0x11a>
	case _depth:
//		data_reg.depth = !data_reg.depth;
		if (data_reg.depth)
 80010ce:	4b1e      	ldr	r3, [pc, #120]	; (8001148 <update_new_data+0x12c>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	227f      	movs	r2, #127	; 0x7f
 80010d4:	4393      	bics	r3, r2
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d013      	beq.n	8001104 <update_new_data+0xe8>
		{
			current_pos.position_cursor = intensity;
 80010dc:	4b18      	ldr	r3, [pc, #96]	; (8001140 <update_new_data+0x124>)
 80010de:	781a      	ldrb	r2, [r3, #0]
 80010e0:	2107      	movs	r1, #7
 80010e2:	438a      	bics	r2, r1
 80010e4:	1c11      	adds	r1, r2, #0
 80010e6:	2201      	movs	r2, #1
 80010e8:	430a      	orrs	r2, r1
 80010ea:	701a      	strb	r2, [r3, #0]
			data_reg.intensity = 10;
 80010ec:	4b16      	ldr	r3, [pc, #88]	; (8001148 <update_new_data+0x12c>)
 80010ee:	781a      	ldrb	r2, [r3, #0]
 80010f0:	210f      	movs	r1, #15
 80010f2:	438a      	bics	r2, r1
 80010f4:	1c11      	adds	r1, r2, #0
 80010f6:	220a      	movs	r2, #10
 80010f8:	430a      	orrs	r2, r1
 80010fa:	701a      	strb	r2, [r3, #0]
			depth_press = 1;
 80010fc:	4b13      	ldr	r3, [pc, #76]	; (800114c <update_new_data+0x130>)
 80010fe:	2201      	movs	r2, #1
 8001100:	701a      	strb	r2, [r3, #0]
		{
			current_pos.position_cursor = intensity;
			data_reg.intensity = 1;
//			data_reg.depth = off;
		}
		break;
 8001102:	e019      	b.n	8001138 <update_new_data+0x11c>
			current_pos.position_cursor = intensity;
 8001104:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <update_new_data+0x124>)
 8001106:	781a      	ldrb	r2, [r3, #0]
 8001108:	2107      	movs	r1, #7
 800110a:	438a      	bics	r2, r1
 800110c:	1c11      	adds	r1, r2, #0
 800110e:	2201      	movs	r2, #1
 8001110:	430a      	orrs	r2, r1
 8001112:	701a      	strb	r2, [r3, #0]
			data_reg.intensity = 1;
 8001114:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <update_new_data+0x12c>)
 8001116:	781a      	ldrb	r2, [r3, #0]
 8001118:	210f      	movs	r1, #15
 800111a:	438a      	bics	r2, r1
 800111c:	1c11      	adds	r1, r2, #0
 800111e:	2201      	movs	r2, #1
 8001120:	430a      	orrs	r2, r1
 8001122:	701a      	strb	r2, [r3, #0]
		break;
 8001124:	e008      	b.n	8001138 <update_new_data+0x11c>
	case _pos:
		set_data_positive();
 8001126:	f7ff fea5 	bl	8000e74 <set_data_positive>
		break;
 800112a:	e005      	b.n	8001138 <update_new_data+0x11c>
	case _neg:
		set_data_negative();
 800112c:	f7ff ff0c 	bl	8000f48 <set_data_negative>
		break;
 8001130:	e002      	b.n	8001138 <update_new_data+0x11c>
		break;
 8001132:	46c0      	nop			; (mov r8, r8)
 8001134:	e000      	b.n	8001138 <update_new_data+0x11c>
		break;
 8001136:	46c0      	nop			; (mov r8, r8)

	}
}
 8001138:	46c0      	nop			; (mov r8, r8)
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	46c0      	nop			; (mov r8, r8)
 8001140:	20000004 	.word	0x20000004
 8001144:	0800565c 	.word	0x0800565c
 8001148:	20000008 	.word	0x20000008
 800114c:	200000b4 	.word	0x200000b4

08001150 <update_screen_data>:


}

void update_screen_data()
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
	char buffer[3];

	switch (current_pos.position_cursor)
 8001156:	4b84      	ldr	r3, [pc, #528]	; (8001368 <update_screen_data+0x218>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	075b      	lsls	r3, r3, #29
 800115c:	0f5b      	lsrs	r3, r3, #29
 800115e:	b2db      	uxtb	r3, r3
 8001160:	2b06      	cmp	r3, #6
 8001162:	d900      	bls.n	8001166 <update_screen_data+0x16>
 8001164:	e0fb      	b.n	800135e <update_screen_data+0x20e>
 8001166:	009a      	lsls	r2, r3, #2
 8001168:	4b80      	ldr	r3, [pc, #512]	; (800136c <update_screen_data+0x21c>)
 800116a:	18d3      	adds	r3, r2, r3
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	469f      	mov	pc, r3
	{
	case intensity:
		if(depth_press)
 8001170:	4b7f      	ldr	r3, [pc, #508]	; (8001370 <update_screen_data+0x220>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d009      	beq.n	800118c <update_screen_data+0x3c>
		{
//			sprintf(buffer, "%02d", data_reg.intensity);
			lcd_puts(1, 7, (int8_t *)"MAX");
 8001178:	4b7e      	ldr	r3, [pc, #504]	; (8001374 <update_screen_data+0x224>)
 800117a:	001a      	movs	r2, r3
 800117c:	2107      	movs	r1, #7
 800117e:	2001      	movs	r0, #1
 8001180:	f7ff fc28 	bl	80009d4 <lcd_puts>
			depth_press = 0;
 8001184:	4b7a      	ldr	r3, [pc, #488]	; (8001370 <update_screen_data+0x220>)
 8001186:	2200      	movs	r2, #0
 8001188:	701a      	strb	r2, [r3, #0]
 800118a:	e013      	b.n	80011b4 <update_screen_data+0x64>
		}
		else
		{
			clr_data(intensity);
 800118c:	2001      	movs	r0, #1
 800118e:	f7ff fc73 	bl	8000a78 <clr_data>
			sprintf(buffer, "%02d", data_reg.intensity);
 8001192:	4b79      	ldr	r3, [pc, #484]	; (8001378 <update_screen_data+0x228>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	071b      	lsls	r3, r3, #28
 8001198:	0f1b      	lsrs	r3, r3, #28
 800119a:	b2db      	uxtb	r3, r3
 800119c:	001a      	movs	r2, r3
 800119e:	4977      	ldr	r1, [pc, #476]	; (800137c <update_screen_data+0x22c>)
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	0018      	movs	r0, r3
 80011a4:	f003 fd0a 	bl	8004bbc <siprintf>
			lcd_puts(1, 7, (int8_t *)buffer);
 80011a8:	1d3b      	adds	r3, r7, #4
 80011aa:	001a      	movs	r2, r3
 80011ac:	2107      	movs	r1, #7
 80011ae:	2001      	movs	r0, #1
 80011b0:	f7ff fc10 	bl	80009d4 <lcd_puts>
		}

		clr_select();
 80011b4:	f7ff fce0 	bl	8000b78 <clr_select>
		lcd_puts(1, 0, (int8_t *)">");
 80011b8:	4b71      	ldr	r3, [pc, #452]	; (8001380 <update_screen_data+0x230>)
 80011ba:	001a      	movs	r2, r3
 80011bc:	2100      	movs	r1, #0
 80011be:	2001      	movs	r0, #1
 80011c0:	f7ff fc08 	bl	80009d4 <lcd_puts>
		send_cmd(data_reg.intensity,intensity);
 80011c4:	4b6c      	ldr	r3, [pc, #432]	; (8001378 <update_screen_data+0x228>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	071b      	lsls	r3, r3, #28
 80011ca:	0f1b      	lsrs	r3, r3, #28
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2101      	movs	r1, #1
 80011d0:	0018      	movs	r0, r3
 80011d2:	f000 f8db 	bl	800138c <send_cmd>
		break;
 80011d6:	e0c2      	b.n	800135e <update_screen_data+0x20e>

	case color:
		sprintf(buffer, "%02d", data_reg.color);
 80011d8:	4b67      	ldr	r3, [pc, #412]	; (8001378 <update_screen_data+0x228>)
 80011da:	785b      	ldrb	r3, [r3, #1]
 80011dc:	b25b      	sxtb	r3, r3
 80011de:	001a      	movs	r2, r3
 80011e0:	4966      	ldr	r1, [pc, #408]	; (800137c <update_screen_data+0x22c>)
 80011e2:	1d3b      	adds	r3, r7, #4
 80011e4:	0018      	movs	r0, r3
 80011e6:	f003 fce9 	bl	8004bbc <siprintf>
		lcd_puts(2, 7, (int8_t *)buffer);
 80011ea:	1d3b      	adds	r3, r7, #4
 80011ec:	001a      	movs	r2, r3
 80011ee:	2107      	movs	r1, #7
 80011f0:	2002      	movs	r0, #2
 80011f2:	f7ff fbef 	bl	80009d4 <lcd_puts>
		clr_select();
 80011f6:	f7ff fcbf 	bl	8000b78 <clr_select>
		lcd_puts(2, 0, (int8_t *)">");
 80011fa:	4b61      	ldr	r3, [pc, #388]	; (8001380 <update_screen_data+0x230>)
 80011fc:	001a      	movs	r2, r3
 80011fe:	2100      	movs	r1, #0
 8001200:	2002      	movs	r0, #2
 8001202:	f7ff fbe7 	bl	80009d4 <lcd_puts>
		send_cmd(data_reg.color,color);
 8001206:	4b5c      	ldr	r3, [pc, #368]	; (8001378 <update_screen_data+0x228>)
 8001208:	785b      	ldrb	r3, [r3, #1]
 800120a:	b25b      	sxtb	r3, r3
 800120c:	2102      	movs	r1, #2
 800120e:	0018      	movs	r0, r3
 8001210:	f000 f8bc 	bl	800138c <send_cmd>
		break;
 8001214:	e0a3      	b.n	800135e <update_screen_data+0x20e>

	case sensor:
		clr_data(sensor);
 8001216:	2003      	movs	r0, #3
 8001218:	f7ff fc2e 	bl	8000a78 <clr_data>
		clr_select();
 800121c:	f7ff fcac 	bl	8000b78 <clr_select>
		lcd_puts(3, 0, (int8_t *)">");
 8001220:	4b57      	ldr	r3, [pc, #348]	; (8001380 <update_screen_data+0x230>)
 8001222:	001a      	movs	r2, r3
 8001224:	2100      	movs	r1, #0
 8001226:	2003      	movs	r0, #3
 8001228:	f7ff fbd4 	bl	80009d4 <lcd_puts>
		send_cmd(data_reg.sensor,sensor);
 800122c:	4b52      	ldr	r3, [pc, #328]	; (8001378 <update_screen_data+0x228>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	06db      	lsls	r3, r3, #27
 8001232:	0fdb      	lsrs	r3, r3, #31
 8001234:	b2db      	uxtb	r3, r3
 8001236:	2103      	movs	r1, #3
 8001238:	0018      	movs	r0, r3
 800123a:	f000 f8a7 	bl	800138c <send_cmd>
		if (data_reg.sensor)
 800123e:	4b4e      	ldr	r3, [pc, #312]	; (8001378 <update_screen_data+0x228>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2210      	movs	r2, #16
 8001244:	4013      	ands	r3, r2
 8001246:	b2db      	uxtb	r3, r3
 8001248:	2b00      	cmp	r3, #0
 800124a:	d006      	beq.n	800125a <update_screen_data+0x10a>
			lcd_puts(3, 7, (int8_t *)"ON");
 800124c:	4b4d      	ldr	r3, [pc, #308]	; (8001384 <update_screen_data+0x234>)
 800124e:	001a      	movs	r2, r3
 8001250:	2107      	movs	r1, #7
 8001252:	2003      	movs	r0, #3
 8001254:	f7ff fbbe 	bl	80009d4 <lcd_puts>
		else
			lcd_puts(3, 7, (int8_t *)"OFF");
		break;
 8001258:	e081      	b.n	800135e <update_screen_data+0x20e>
			lcd_puts(3, 7, (int8_t *)"OFF");
 800125a:	4b4b      	ldr	r3, [pc, #300]	; (8001388 <update_screen_data+0x238>)
 800125c:	001a      	movs	r2, r3
 800125e:	2107      	movs	r1, #7
 8001260:	2003      	movs	r0, #3
 8001262:	f7ff fbb7 	bl	80009d4 <lcd_puts>
		break;
 8001266:	e07a      	b.n	800135e <update_screen_data+0x20e>

	case lamp:
		clr_data(lamp);
 8001268:	2004      	movs	r0, #4
 800126a:	f7ff fc05 	bl	8000a78 <clr_data>
		clr_select();
 800126e:	f7ff fc83 	bl	8000b78 <clr_select>
		lcd_puts(1, 10, (int8_t *)">");
 8001272:	4b43      	ldr	r3, [pc, #268]	; (8001380 <update_screen_data+0x230>)
 8001274:	001a      	movs	r2, r3
 8001276:	210a      	movs	r1, #10
 8001278:	2001      	movs	r0, #1
 800127a:	f7ff fbab 	bl	80009d4 <lcd_puts>
		send_cmd(data_reg.lamp,lamp);
 800127e:	4b3e      	ldr	r3, [pc, #248]	; (8001378 <update_screen_data+0x228>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	069b      	lsls	r3, r3, #26
 8001284:	0fdb      	lsrs	r3, r3, #31
 8001286:	b2db      	uxtb	r3, r3
 8001288:	2104      	movs	r1, #4
 800128a:	0018      	movs	r0, r3
 800128c:	f000 f87e 	bl	800138c <send_cmd>
		if (data_reg.lamp)
 8001290:	4b39      	ldr	r3, [pc, #228]	; (8001378 <update_screen_data+0x228>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2220      	movs	r2, #32
 8001296:	4013      	ands	r3, r2
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b00      	cmp	r3, #0
 800129c:	d006      	beq.n	80012ac <update_screen_data+0x15c>
			lcd_puts(1, 17, (int8_t *)"ON");
 800129e:	4b39      	ldr	r3, [pc, #228]	; (8001384 <update_screen_data+0x234>)
 80012a0:	001a      	movs	r2, r3
 80012a2:	2111      	movs	r1, #17
 80012a4:	2001      	movs	r0, #1
 80012a6:	f7ff fb95 	bl	80009d4 <lcd_puts>
		else
			lcd_puts(1, 17, (int8_t *)"OFF");
		break;
 80012aa:	e058      	b.n	800135e <update_screen_data+0x20e>
			lcd_puts(1, 17, (int8_t *)"OFF");
 80012ac:	4b36      	ldr	r3, [pc, #216]	; (8001388 <update_screen_data+0x238>)
 80012ae:	001a      	movs	r2, r3
 80012b0:	2111      	movs	r1, #17
 80012b2:	2001      	movs	r0, #1
 80012b4:	f7ff fb8e 	bl	80009d4 <lcd_puts>
		break;
 80012b8:	e051      	b.n	800135e <update_screen_data+0x20e>

	case endo:
		clr_data(endo);
 80012ba:	2005      	movs	r0, #5
 80012bc:	f7ff fbdc 	bl	8000a78 <clr_data>
		clr_select();
 80012c0:	f7ff fc5a 	bl	8000b78 <clr_select>
		lcd_puts(2, 10, (int8_t *)">");
 80012c4:	4b2e      	ldr	r3, [pc, #184]	; (8001380 <update_screen_data+0x230>)
 80012c6:	001a      	movs	r2, r3
 80012c8:	210a      	movs	r1, #10
 80012ca:	2002      	movs	r0, #2
 80012cc:	f7ff fb82 	bl	80009d4 <lcd_puts>
		send_cmd(data_reg.lamp,lamp);
 80012d0:	4b29      	ldr	r3, [pc, #164]	; (8001378 <update_screen_data+0x228>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	069b      	lsls	r3, r3, #26
 80012d6:	0fdb      	lsrs	r3, r3, #31
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	2104      	movs	r1, #4
 80012dc:	0018      	movs	r0, r3
 80012de:	f000 f855 	bl	800138c <send_cmd>
		if (data_reg.endo)
 80012e2:	4b25      	ldr	r3, [pc, #148]	; (8001378 <update_screen_data+0x228>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2240      	movs	r2, #64	; 0x40
 80012e8:	4013      	ands	r3, r2
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d006      	beq.n	80012fe <update_screen_data+0x1ae>
			lcd_puts(2, 17, (int8_t *)"ON");
 80012f0:	4b24      	ldr	r3, [pc, #144]	; (8001384 <update_screen_data+0x234>)
 80012f2:	001a      	movs	r2, r3
 80012f4:	2111      	movs	r1, #17
 80012f6:	2002      	movs	r0, #2
 80012f8:	f7ff fb6c 	bl	80009d4 <lcd_puts>
		else
			lcd_puts(2, 17, (int8_t *)"OFF");
		break;
 80012fc:	e02f      	b.n	800135e <update_screen_data+0x20e>
			lcd_puts(2, 17, (int8_t *)"OFF");
 80012fe:	4b22      	ldr	r3, [pc, #136]	; (8001388 <update_screen_data+0x238>)
 8001300:	001a      	movs	r2, r3
 8001302:	2111      	movs	r1, #17
 8001304:	2002      	movs	r0, #2
 8001306:	f7ff fb65 	bl	80009d4 <lcd_puts>
		break;
 800130a:	e028      	b.n	800135e <update_screen_data+0x20e>

	case depth:
		clr_data(depth);
 800130c:	2006      	movs	r0, #6
 800130e:	f7ff fbb3 	bl	8000a78 <clr_data>
		clr_select();
 8001312:	f7ff fc31 	bl	8000b78 <clr_select>
		lcd_puts(3, 10, (int8_t *)">");
 8001316:	4b1a      	ldr	r3, [pc, #104]	; (8001380 <update_screen_data+0x230>)
 8001318:	001a      	movs	r2, r3
 800131a:	210a      	movs	r1, #10
 800131c:	2003      	movs	r0, #3
 800131e:	f7ff fb59 	bl	80009d4 <lcd_puts>
		send_cmd(data_reg.depth,depth);
 8001322:	4b15      	ldr	r3, [pc, #84]	; (8001378 <update_screen_data+0x228>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	061b      	lsls	r3, r3, #24
 8001328:	0fdb      	lsrs	r3, r3, #31
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2106      	movs	r1, #6
 800132e:	0018      	movs	r0, r3
 8001330:	f000 f82c 	bl	800138c <send_cmd>
		if (data_reg.depth)
 8001334:	4b10      	ldr	r3, [pc, #64]	; (8001378 <update_screen_data+0x228>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	227f      	movs	r2, #127	; 0x7f
 800133a:	4393      	bics	r3, r2
 800133c:	b2db      	uxtb	r3, r3
 800133e:	2b00      	cmp	r3, #0
 8001340:	d006      	beq.n	8001350 <update_screen_data+0x200>
			lcd_puts(3, 17, (int8_t *)"ON");
 8001342:	4b10      	ldr	r3, [pc, #64]	; (8001384 <update_screen_data+0x234>)
 8001344:	001a      	movs	r2, r3
 8001346:	2111      	movs	r1, #17
 8001348:	2003      	movs	r0, #3
 800134a:	f7ff fb43 	bl	80009d4 <lcd_puts>
		else
			lcd_puts(3, 17, (int8_t *)"OFF");
		break;
 800134e:	e005      	b.n	800135c <update_screen_data+0x20c>
			lcd_puts(3, 17, (int8_t *)"OFF");
 8001350:	4b0d      	ldr	r3, [pc, #52]	; (8001388 <update_screen_data+0x238>)
 8001352:	001a      	movs	r2, r3
 8001354:	2111      	movs	r1, #17
 8001356:	2003      	movs	r0, #3
 8001358:	f7ff fb3c 	bl	80009d4 <lcd_puts>
		break;
 800135c:	46c0      	nop			; (mov r8, r8)
	}
}
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	46bd      	mov	sp, r7
 8001362:	b002      	add	sp, #8
 8001364:	bd80      	pop	{r7, pc}
 8001366:	46c0      	nop			; (mov r8, r8)
 8001368:	20000004 	.word	0x20000004
 800136c:	08005670 	.word	0x08005670
 8001370:	200000b4 	.word	0x200000b4
 8001374:	0800559c 	.word	0x0800559c
 8001378:	20000008 	.word	0x20000008
 800137c:	08005564 	.word	0x08005564
 8001380:	08005598 	.word	0x08005598
 8001384:	0800556c 	.word	0x0800556c
 8001388:	08005570 	.word	0x08005570

0800138c <send_cmd>:

void send_cmd(int8_t x, int8_t mode)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	0002      	movs	r2, r0
 8001394:	1dfb      	adds	r3, r7, #7
 8001396:	701a      	strb	r2, [r3, #0]
 8001398:	1dbb      	adds	r3, r7, #6
 800139a:	1c0a      	adds	r2, r1, #0
 800139c:	701a      	strb	r2, [r3, #0]
	uint8_t data[5];
	data[0] = '@';
 800139e:	2108      	movs	r1, #8
 80013a0:	187b      	adds	r3, r7, r1
 80013a2:	2240      	movs	r2, #64	; 0x40
 80013a4:	701a      	strb	r2, [r3, #0]
	data[4] = '#';
 80013a6:	187b      	adds	r3, r7, r1
 80013a8:	2223      	movs	r2, #35	; 0x23
 80013aa:	711a      	strb	r2, [r3, #4]
	switch (mode)
 80013ac:	1dbb      	adds	r3, r7, #6
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	b25b      	sxtb	r3, r3
 80013b2:	2b06      	cmp	r3, #6
 80013b4:	d900      	bls.n	80013b8 <send_cmd+0x2c>
 80013b6:	e07e      	b.n	80014b6 <send_cmd+0x12a>
 80013b8:	009a      	lsls	r2, r3, #2
 80013ba:	4b41      	ldr	r3, [pc, #260]	; (80014c0 <send_cmd+0x134>)
 80013bc:	18d3      	adds	r3, r2, r3
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	469f      	mov	pc, r3
	{
	case intensity:
		data[1] = 'I';
 80013c2:	2108      	movs	r1, #8
 80013c4:	187b      	adds	r3, r7, r1
 80013c6:	2249      	movs	r2, #73	; 0x49
 80013c8:	705a      	strb	r2, [r3, #1]
		data[2] = '0';
 80013ca:	187b      	adds	r3, r7, r1
 80013cc:	2230      	movs	r2, #48	; 0x30
 80013ce:	709a      	strb	r2, [r3, #2]
		data[3] = 48 + x;
 80013d0:	1dfb      	adds	r3, r7, #7
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	3330      	adds	r3, #48	; 0x30
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	187b      	adds	r3, r7, r1
 80013da:	70da      	strb	r2, [r3, #3]
		HAL_UART_Transmit(&huart1, &data[0], 5, 100);
 80013dc:	1879      	adds	r1, r7, r1
 80013de:	4839      	ldr	r0, [pc, #228]	; (80014c4 <send_cmd+0x138>)
 80013e0:	2364      	movs	r3, #100	; 0x64
 80013e2:	2205      	movs	r2, #5
 80013e4:	f002 ff9e 	bl	8004324 <HAL_UART_Transmit>
		break;
 80013e8:	e065      	b.n	80014b6 <send_cmd+0x12a>
	case color:
		if (x > 0)
 80013ea:	1dfb      	adds	r3, r7, #7
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	b25b      	sxtb	r3, r3
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	dd0d      	ble.n	8001410 <send_cmd+0x84>
		{
			data[1] = 'C';
 80013f4:	2108      	movs	r1, #8
 80013f6:	187b      	adds	r3, r7, r1
 80013f8:	2243      	movs	r2, #67	; 0x43
 80013fa:	705a      	strb	r2, [r3, #1]
			data[2] = '+';
 80013fc:	187b      	adds	r3, r7, r1
 80013fe:	222b      	movs	r2, #43	; 0x2b
 8001400:	709a      	strb	r2, [r3, #2]
			data[3] = 48 + x;
 8001402:	1dfb      	adds	r3, r7, #7
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	3330      	adds	r3, #48	; 0x30
 8001408:	b2da      	uxtb	r2, r3
 800140a:	187b      	adds	r3, r7, r1
 800140c:	70da      	strb	r2, [r3, #3]
 800140e:	e00d      	b.n	800142c <send_cmd+0xa0>
		}
		else
		{
			data[1] = 'C';
 8001410:	2108      	movs	r1, #8
 8001412:	187b      	adds	r3, r7, r1
 8001414:	2243      	movs	r2, #67	; 0x43
 8001416:	705a      	strb	r2, [r3, #1]
			data[2] = '-';
 8001418:	187b      	adds	r3, r7, r1
 800141a:	222d      	movs	r2, #45	; 0x2d
 800141c:	709a      	strb	r2, [r3, #2]
			data[3] = (48 + (x) * (-1));
 800141e:	1dfb      	adds	r3, r7, #7
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2230      	movs	r2, #48	; 0x30
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	b2da      	uxtb	r2, r3
 8001428:	187b      	adds	r3, r7, r1
 800142a:	70da      	strb	r2, [r3, #3]
		}
		HAL_UART_Transmit(&huart1, &data[0], 5, 100);
 800142c:	2308      	movs	r3, #8
 800142e:	18f9      	adds	r1, r7, r3
 8001430:	4824      	ldr	r0, [pc, #144]	; (80014c4 <send_cmd+0x138>)
 8001432:	2364      	movs	r3, #100	; 0x64
 8001434:	2205      	movs	r2, #5
 8001436:	f002 ff75 	bl	8004324 <HAL_UART_Transmit>
		break;
 800143a:	e03c      	b.n	80014b6 <send_cmd+0x12a>
		// data[1] = 'I';data[2] = '0';data[3] = 48+x;
		// HAL_UART_Transmit(&huart1, &data[0], 5, 100);
		break;

	case lamp:
		data[1] = 'L';
 800143c:	2108      	movs	r1, #8
 800143e:	187b      	adds	r3, r7, r1
 8001440:	224c      	movs	r2, #76	; 0x4c
 8001442:	705a      	strb	r2, [r3, #1]
		data[2] = '_';
 8001444:	187b      	adds	r3, r7, r1
 8001446:	225f      	movs	r2, #95	; 0x5f
 8001448:	709a      	strb	r2, [r3, #2]
		data[3] = 48 + x;
 800144a:	1dfb      	adds	r3, r7, #7
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	3330      	adds	r3, #48	; 0x30
 8001450:	b2da      	uxtb	r2, r3
 8001452:	187b      	adds	r3, r7, r1
 8001454:	70da      	strb	r2, [r3, #3]
		HAL_UART_Transmit(&huart1, &data[0], 5, 100);
 8001456:	1879      	adds	r1, r7, r1
 8001458:	481a      	ldr	r0, [pc, #104]	; (80014c4 <send_cmd+0x138>)
 800145a:	2364      	movs	r3, #100	; 0x64
 800145c:	2205      	movs	r2, #5
 800145e:	f002 ff61 	bl	8004324 <HAL_UART_Transmit>
		break;
 8001462:	e028      	b.n	80014b6 <send_cmd+0x12a>
	case endo:
		data[1] = 'E';
 8001464:	2108      	movs	r1, #8
 8001466:	187b      	adds	r3, r7, r1
 8001468:	2245      	movs	r2, #69	; 0x45
 800146a:	705a      	strb	r2, [r3, #1]
		data[2] = '_';
 800146c:	187b      	adds	r3, r7, r1
 800146e:	225f      	movs	r2, #95	; 0x5f
 8001470:	709a      	strb	r2, [r3, #2]
		data[3] = 48 + x;
 8001472:	1dfb      	adds	r3, r7, #7
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	3330      	adds	r3, #48	; 0x30
 8001478:	b2da      	uxtb	r2, r3
 800147a:	187b      	adds	r3, r7, r1
 800147c:	70da      	strb	r2, [r3, #3]
		HAL_UART_Transmit(&huart1, &data[0], 5, 100);
 800147e:	1879      	adds	r1, r7, r1
 8001480:	4810      	ldr	r0, [pc, #64]	; (80014c4 <send_cmd+0x138>)
 8001482:	2364      	movs	r3, #100	; 0x64
 8001484:	2205      	movs	r2, #5
 8001486:	f002 ff4d 	bl	8004324 <HAL_UART_Transmit>
		break;
 800148a:	e014      	b.n	80014b6 <send_cmd+0x12a>
	case depth:
		data[1] = 'D';
 800148c:	2108      	movs	r1, #8
 800148e:	187b      	adds	r3, r7, r1
 8001490:	2244      	movs	r2, #68	; 0x44
 8001492:	705a      	strb	r2, [r3, #1]
		data[2] = '_';
 8001494:	187b      	adds	r3, r7, r1
 8001496:	225f      	movs	r2, #95	; 0x5f
 8001498:	709a      	strb	r2, [r3, #2]
		data[3] = 48 + x;
 800149a:	1dfb      	adds	r3, r7, #7
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	3330      	adds	r3, #48	; 0x30
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	187b      	adds	r3, r7, r1
 80014a4:	70da      	strb	r2, [r3, #3]
		HAL_UART_Transmit(&huart1, &data[0], 5, 100);
 80014a6:	1879      	adds	r1, r7, r1
 80014a8:	4806      	ldr	r0, [pc, #24]	; (80014c4 <send_cmd+0x138>)
 80014aa:	2364      	movs	r3, #100	; 0x64
 80014ac:	2205      	movs	r2, #5
 80014ae:	f002 ff39 	bl	8004324 <HAL_UART_Transmit>
		break;
 80014b2:	e000      	b.n	80014b6 <send_cmd+0x12a>
		break;
 80014b4:	46c0      	nop			; (mov r8, r8)
	}
}
 80014b6:	46c0      	nop			; (mov r8, r8)
 80014b8:	46bd      	mov	sp, r7
 80014ba:	b004      	add	sp, #16
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	46c0      	nop			; (mov r8, r8)
 80014c0:	0800568c 	.word	0x0800568c
 80014c4:	20000154 	.word	0x20000154

080014c8 <page1_print>:



void page1_print(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
	char buffer[3];
	lcd_puts(0, 0, (int8_t *)"______ COGNATE _____");
 80014ce:	4b58      	ldr	r3, [pc, #352]	; (8001630 <page1_print+0x168>)
 80014d0:	001a      	movs	r2, r3
 80014d2:	2100      	movs	r1, #0
 80014d4:	2000      	movs	r0, #0
 80014d6:	f7ff fa7d 	bl	80009d4 <lcd_puts>
	lcd_puts(1, 1, (int8_t *)"INTEN");
 80014da:	4b56      	ldr	r3, [pc, #344]	; (8001634 <page1_print+0x16c>)
 80014dc:	001a      	movs	r2, r3
 80014de:	2101      	movs	r1, #1
 80014e0:	2001      	movs	r0, #1
 80014e2:	f7ff fa77 	bl	80009d4 <lcd_puts>
	lcd_puts(2, 1, (int8_t *)"COLOR");
 80014e6:	4b54      	ldr	r3, [pc, #336]	; (8001638 <page1_print+0x170>)
 80014e8:	001a      	movs	r2, r3
 80014ea:	2101      	movs	r1, #1
 80014ec:	2002      	movs	r0, #2
 80014ee:	f7ff fa71 	bl	80009d4 <lcd_puts>
	lcd_puts(3, 1, (int8_t *)"SENSR");
 80014f2:	4b52      	ldr	r3, [pc, #328]	; (800163c <page1_print+0x174>)
 80014f4:	001a      	movs	r2, r3
 80014f6:	2101      	movs	r1, #1
 80014f8:	2003      	movs	r0, #3
 80014fa:	f7ff fa6b 	bl	80009d4 <lcd_puts>
	lcd_puts(1, 11, (int8_t *)"LAMP");
 80014fe:	4b50      	ldr	r3, [pc, #320]	; (8001640 <page1_print+0x178>)
 8001500:	001a      	movs	r2, r3
 8001502:	210b      	movs	r1, #11
 8001504:	2001      	movs	r0, #1
 8001506:	f7ff fa65 	bl	80009d4 <lcd_puts>
	lcd_puts(2, 11, (int8_t *)"ENDO");
 800150a:	4b4e      	ldr	r3, [pc, #312]	; (8001644 <page1_print+0x17c>)
 800150c:	001a      	movs	r2, r3
 800150e:	210b      	movs	r1, #11
 8001510:	2002      	movs	r0, #2
 8001512:	f7ff fa5f 	bl	80009d4 <lcd_puts>
	lcd_puts(3, 11, (int8_t *)"DEPTH");
 8001516:	4b4c      	ldr	r3, [pc, #304]	; (8001648 <page1_print+0x180>)
 8001518:	001a      	movs	r2, r3
 800151a:	210b      	movs	r1, #11
 800151c:	2003      	movs	r0, #3
 800151e:	f7ff fa59 	bl	80009d4 <lcd_puts>

//	lcd_puts(1, 0, (int8_t *)">");

	sprintf(buffer, "%02d", data_reg.intensity);
 8001522:	4b4a      	ldr	r3, [pc, #296]	; (800164c <page1_print+0x184>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	071b      	lsls	r3, r3, #28
 8001528:	0f1b      	lsrs	r3, r3, #28
 800152a:	b2db      	uxtb	r3, r3
 800152c:	001a      	movs	r2, r3
 800152e:	4948      	ldr	r1, [pc, #288]	; (8001650 <page1_print+0x188>)
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	0018      	movs	r0, r3
 8001534:	f003 fb42 	bl	8004bbc <siprintf>
	lcd_puts(1, 7, (int8_t *)buffer);
 8001538:	1d3b      	adds	r3, r7, #4
 800153a:	001a      	movs	r2, r3
 800153c:	2107      	movs	r1, #7
 800153e:	2001      	movs	r0, #1
 8001540:	f7ff fa48 	bl	80009d4 <lcd_puts>

	sprintf(buffer, "%02d", data_reg.color);
 8001544:	4b41      	ldr	r3, [pc, #260]	; (800164c <page1_print+0x184>)
 8001546:	785b      	ldrb	r3, [r3, #1]
 8001548:	b25b      	sxtb	r3, r3
 800154a:	001a      	movs	r2, r3
 800154c:	4940      	ldr	r1, [pc, #256]	; (8001650 <page1_print+0x188>)
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	0018      	movs	r0, r3
 8001552:	f003 fb33 	bl	8004bbc <siprintf>
	lcd_puts(2, 7, (int8_t *)buffer);
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	001a      	movs	r2, r3
 800155a:	2107      	movs	r1, #7
 800155c:	2002      	movs	r0, #2
 800155e:	f7ff fa39 	bl	80009d4 <lcd_puts>

	clr_data(sensor);
 8001562:	2003      	movs	r0, #3
 8001564:	f7ff fa88 	bl	8000a78 <clr_data>
	if (data_reg.sensor)
 8001568:	4b38      	ldr	r3, [pc, #224]	; (800164c <page1_print+0x184>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2210      	movs	r2, #16
 800156e:	4013      	ands	r3, r2
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b00      	cmp	r3, #0
 8001574:	d006      	beq.n	8001584 <page1_print+0xbc>
		lcd_puts(3, 7, (int8_t *)"ON");
 8001576:	4b37      	ldr	r3, [pc, #220]	; (8001654 <page1_print+0x18c>)
 8001578:	001a      	movs	r2, r3
 800157a:	2107      	movs	r1, #7
 800157c:	2003      	movs	r0, #3
 800157e:	f7ff fa29 	bl	80009d4 <lcd_puts>
 8001582:	e005      	b.n	8001590 <page1_print+0xc8>
	else
		lcd_puts(3, 7, (int8_t *)"OFF");
 8001584:	4b34      	ldr	r3, [pc, #208]	; (8001658 <page1_print+0x190>)
 8001586:	001a      	movs	r2, r3
 8001588:	2107      	movs	r1, #7
 800158a:	2003      	movs	r0, #3
 800158c:	f7ff fa22 	bl	80009d4 <lcd_puts>

	clr_data(lamp);
 8001590:	2004      	movs	r0, #4
 8001592:	f7ff fa71 	bl	8000a78 <clr_data>
	if (data_reg.lamp)
 8001596:	4b2d      	ldr	r3, [pc, #180]	; (800164c <page1_print+0x184>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2220      	movs	r2, #32
 800159c:	4013      	ands	r3, r2
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d006      	beq.n	80015b2 <page1_print+0xea>
		lcd_puts(1, 17, (int8_t *)"ON");
 80015a4:	4b2b      	ldr	r3, [pc, #172]	; (8001654 <page1_print+0x18c>)
 80015a6:	001a      	movs	r2, r3
 80015a8:	2111      	movs	r1, #17
 80015aa:	2001      	movs	r0, #1
 80015ac:	f7ff fa12 	bl	80009d4 <lcd_puts>
 80015b0:	e005      	b.n	80015be <page1_print+0xf6>
	else
		lcd_puts(1, 17, (int8_t *)"OFF");
 80015b2:	4b29      	ldr	r3, [pc, #164]	; (8001658 <page1_print+0x190>)
 80015b4:	001a      	movs	r2, r3
 80015b6:	2111      	movs	r1, #17
 80015b8:	2001      	movs	r0, #1
 80015ba:	f7ff fa0b 	bl	80009d4 <lcd_puts>

	clr_data(endo);
 80015be:	2005      	movs	r0, #5
 80015c0:	f7ff fa5a 	bl	8000a78 <clr_data>
	if (data_reg.endo)
 80015c4:	4b21      	ldr	r3, [pc, #132]	; (800164c <page1_print+0x184>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2240      	movs	r2, #64	; 0x40
 80015ca:	4013      	ands	r3, r2
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d006      	beq.n	80015e0 <page1_print+0x118>
		lcd_puts(2, 17, (int8_t *)"ON");
 80015d2:	4b20      	ldr	r3, [pc, #128]	; (8001654 <page1_print+0x18c>)
 80015d4:	001a      	movs	r2, r3
 80015d6:	2111      	movs	r1, #17
 80015d8:	2002      	movs	r0, #2
 80015da:	f7ff f9fb 	bl	80009d4 <lcd_puts>
 80015de:	e005      	b.n	80015ec <page1_print+0x124>
	else
		lcd_puts(2, 17, (int8_t *)"OFF");
 80015e0:	4b1d      	ldr	r3, [pc, #116]	; (8001658 <page1_print+0x190>)
 80015e2:	001a      	movs	r2, r3
 80015e4:	2111      	movs	r1, #17
 80015e6:	2002      	movs	r0, #2
 80015e8:	f7ff f9f4 	bl	80009d4 <lcd_puts>

	clr_data(depth);
 80015ec:	2006      	movs	r0, #6
 80015ee:	f7ff fa43 	bl	8000a78 <clr_data>
	if (data_reg.depth)
 80015f2:	4b16      	ldr	r3, [pc, #88]	; (800164c <page1_print+0x184>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	227f      	movs	r2, #127	; 0x7f
 80015f8:	4393      	bics	r3, r2
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d006      	beq.n	800160e <page1_print+0x146>
		lcd_puts(3, 17, (int8_t *)"ON");
 8001600:	4b14      	ldr	r3, [pc, #80]	; (8001654 <page1_print+0x18c>)
 8001602:	001a      	movs	r2, r3
 8001604:	2111      	movs	r1, #17
 8001606:	2003      	movs	r0, #3
 8001608:	f7ff f9e4 	bl	80009d4 <lcd_puts>
 800160c:	e005      	b.n	800161a <page1_print+0x152>
	else
		lcd_puts(3, 17, (int8_t *)"OFF");
 800160e:	4b12      	ldr	r3, [pc, #72]	; (8001658 <page1_print+0x190>)
 8001610:	001a      	movs	r2, r3
 8001612:	2111      	movs	r1, #17
 8001614:	2003      	movs	r0, #3
 8001616:	f7ff f9dd 	bl	80009d4 <lcd_puts>

	lcd_puts(1, 0, (int8_t *)">");
 800161a:	4b10      	ldr	r3, [pc, #64]	; (800165c <page1_print+0x194>)
 800161c:	001a      	movs	r2, r3
 800161e:	2100      	movs	r1, #0
 8001620:	2001      	movs	r0, #1
 8001622:	f7ff f9d7 	bl	80009d4 <lcd_puts>
}
 8001626:	46c0      	nop			; (mov r8, r8)
 8001628:	46bd      	mov	sp, r7
 800162a:	b002      	add	sp, #8
 800162c:	bd80      	pop	{r7, pc}
 800162e:	46c0      	nop			; (mov r8, r8)
 8001630:	080055a0 	.word	0x080055a0
 8001634:	080055b8 	.word	0x080055b8
 8001638:	080055c0 	.word	0x080055c0
 800163c:	080055c8 	.word	0x080055c8
 8001640:	080055d0 	.word	0x080055d0
 8001644:	080055d8 	.word	0x080055d8
 8001648:	080055e0 	.word	0x080055e0
 800164c:	20000008 	.word	0x20000008
 8001650:	08005564 	.word	0x08005564
 8001654:	0800556c 	.word	0x0800556c
 8001658:	08005570 	.word	0x08005570
 800165c:	08005598 	.word	0x08005598

08001660 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	0002      	movs	r2, r0
 8001668:	1dbb      	adds	r3, r7, #6
 800166a:	801a      	strh	r2, [r3, #0]

	static uint32_t _time;

	if ((HAL_GetTick() - _time) >= 500)
 800166c:	f000 fe0c 	bl	8002288 <HAL_GetTick>
 8001670:	0002      	movs	r2, r0
 8001672:	4b32      	ldr	r3, [pc, #200]	; (800173c <HAL_GPIO_EXTI_Callback+0xdc>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	1ad2      	subs	r2, r2, r3
 8001678:	23fa      	movs	r3, #250	; 0xfa
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	429a      	cmp	r2, r3
 800167e:	d358      	bcc.n	8001732 <HAL_GPIO_EXTI_Callback+0xd2>
	{

		if (GPIO_Pin == S_PRV_Pin)
 8001680:	1dbb      	adds	r3, r7, #6
 8001682:	881a      	ldrh	r2, [r3, #0]
 8001684:	2380      	movs	r3, #128	; 0x80
 8001686:	011b      	lsls	r3, r3, #4
 8001688:	429a      	cmp	r2, r3
 800168a:	d10a      	bne.n	80016a2 <HAL_GPIO_EXTI_Callback+0x42>
		{

			key_pressed.prv = 1;
 800168c:	4a2c      	ldr	r2, [pc, #176]	; (8001740 <HAL_GPIO_EXTI_Callback+0xe0>)
 800168e:	7813      	ldrb	r3, [r2, #0]
 8001690:	2101      	movs	r1, #1
 8001692:	430b      	orrs	r3, r1
 8001694:	7013      	strb	r3, [r2, #0]
			interrupt_reg.key_flag = 1;
 8001696:	4a2b      	ldr	r2, [pc, #172]	; (8001744 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001698:	7813      	ldrb	r3, [r2, #0]
 800169a:	2101      	movs	r1, #1
 800169c:	430b      	orrs	r3, r1
 800169e:	7013      	strb	r3, [r2, #0]
 80016a0:	e042      	b.n	8001728 <HAL_GPIO_EXTI_Callback+0xc8>
		}

		else if (GPIO_Pin == S_NEXT_Pin)
 80016a2:	1dbb      	adds	r3, r7, #6
 80016a4:	881a      	ldrh	r2, [r3, #0]
 80016a6:	2380      	movs	r3, #128	; 0x80
 80016a8:	015b      	lsls	r3, r3, #5
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d10a      	bne.n	80016c4 <HAL_GPIO_EXTI_Callback+0x64>
		{

			key_pressed.nxt = 1;
 80016ae:	4a24      	ldr	r2, [pc, #144]	; (8001740 <HAL_GPIO_EXTI_Callback+0xe0>)
 80016b0:	7813      	ldrb	r3, [r2, #0]
 80016b2:	2102      	movs	r1, #2
 80016b4:	430b      	orrs	r3, r1
 80016b6:	7013      	strb	r3, [r2, #0]
			interrupt_reg.key_flag = 1;
 80016b8:	4a22      	ldr	r2, [pc, #136]	; (8001744 <HAL_GPIO_EXTI_Callback+0xe4>)
 80016ba:	7813      	ldrb	r3, [r2, #0]
 80016bc:	2101      	movs	r1, #1
 80016be:	430b      	orrs	r3, r1
 80016c0:	7013      	strb	r3, [r2, #0]
 80016c2:	e031      	b.n	8001728 <HAL_GPIO_EXTI_Callback+0xc8>
		}

		else if (GPIO_Pin == DEPTH_Pin)
 80016c4:	1dbb      	adds	r3, r7, #6
 80016c6:	881a      	ldrh	r2, [r3, #0]
 80016c8:	2380      	movs	r3, #128	; 0x80
 80016ca:	019b      	lsls	r3, r3, #6
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d10a      	bne.n	80016e6 <HAL_GPIO_EXTI_Callback+0x86>
		{

			key_pressed.depth = 1;
 80016d0:	4a1b      	ldr	r2, [pc, #108]	; (8001740 <HAL_GPIO_EXTI_Callback+0xe0>)
 80016d2:	7813      	ldrb	r3, [r2, #0]
 80016d4:	2104      	movs	r1, #4
 80016d6:	430b      	orrs	r3, r1
 80016d8:	7013      	strb	r3, [r2, #0]
			interrupt_reg.key_flag = 1;
 80016da:	4a1a      	ldr	r2, [pc, #104]	; (8001744 <HAL_GPIO_EXTI_Callback+0xe4>)
 80016dc:	7813      	ldrb	r3, [r2, #0]
 80016de:	2101      	movs	r1, #1
 80016e0:	430b      	orrs	r3, r1
 80016e2:	7013      	strb	r3, [r2, #0]
 80016e4:	e020      	b.n	8001728 <HAL_GPIO_EXTI_Callback+0xc8>
		}

		else if (GPIO_Pin == CHANGE_N_Pin)
 80016e6:	1dbb      	adds	r3, r7, #6
 80016e8:	881a      	ldrh	r2, [r3, #0]
 80016ea:	2380      	movs	r3, #128	; 0x80
 80016ec:	021b      	lsls	r3, r3, #8
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d10a      	bne.n	8001708 <HAL_GPIO_EXTI_Callback+0xa8>
		{

			key_pressed.neg = 1;
 80016f2:	4a13      	ldr	r2, [pc, #76]	; (8001740 <HAL_GPIO_EXTI_Callback+0xe0>)
 80016f4:	7813      	ldrb	r3, [r2, #0]
 80016f6:	2110      	movs	r1, #16
 80016f8:	430b      	orrs	r3, r1
 80016fa:	7013      	strb	r3, [r2, #0]
			interrupt_reg.key_flag = 1;
 80016fc:	4a11      	ldr	r2, [pc, #68]	; (8001744 <HAL_GPIO_EXTI_Callback+0xe4>)
 80016fe:	7813      	ldrb	r3, [r2, #0]
 8001700:	2101      	movs	r1, #1
 8001702:	430b      	orrs	r3, r1
 8001704:	7013      	strb	r3, [r2, #0]
 8001706:	e00f      	b.n	8001728 <HAL_GPIO_EXTI_Callback+0xc8>
		}

		else if (GPIO_Pin == CHANGE_P_Pin)
 8001708:	1dbb      	adds	r3, r7, #6
 800170a:	881a      	ldrh	r2, [r3, #0]
 800170c:	2380      	movs	r3, #128	; 0x80
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	429a      	cmp	r2, r3
 8001712:	d109      	bne.n	8001728 <HAL_GPIO_EXTI_Callback+0xc8>
		{

			key_pressed.pos = 1;
 8001714:	4a0a      	ldr	r2, [pc, #40]	; (8001740 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001716:	7813      	ldrb	r3, [r2, #0]
 8001718:	2108      	movs	r1, #8
 800171a:	430b      	orrs	r3, r1
 800171c:	7013      	strb	r3, [r2, #0]
			interrupt_reg.key_flag = 1;
 800171e:	4a09      	ldr	r2, [pc, #36]	; (8001744 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001720:	7813      	ldrb	r3, [r2, #0]
 8001722:	2101      	movs	r1, #1
 8001724:	430b      	orrs	r3, r1
 8001726:	7013      	strb	r3, [r2, #0]
		{
			//			interrupt_reg.key_flag = 1;
			//			key_pressed.prv =1;
		}

		_time = HAL_GetTick();
 8001728:	f000 fdae 	bl	8002288 <HAL_GetTick>
 800172c:	0002      	movs	r2, r0
 800172e:	4b03      	ldr	r3, [pc, #12]	; (800173c <HAL_GPIO_EXTI_Callback+0xdc>)
 8001730:	601a      	str	r2, [r3, #0]
	}


}
 8001732:	46c0      	nop			; (mov r8, r8)
 8001734:	46bd      	mov	sp, r7
 8001736:	b002      	add	sp, #8
 8001738:	bd80      	pop	{r7, pc}
 800173a:	46c0      	nop			; (mov r8, r8)
 800173c:	200001d8 	.word	0x200001d8
 8001740:	200000b8 	.word	0x200000b8
 8001744:	200000bc 	.word	0x200000bc

08001748 <beep_sound>:

void beep_sound()
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 800174c:	2390      	movs	r3, #144	; 0x90
 800174e:	05db      	lsls	r3, r3, #23
 8001750:	2201      	movs	r2, #1
 8001752:	2140      	movs	r1, #64	; 0x40
 8001754:	0018      	movs	r0, r3
 8001756:	f001 f830 	bl	80027ba <HAL_GPIO_WritePin>
	HAL_Delay(35);
 800175a:	2023      	movs	r0, #35	; 0x23
 800175c:	f000 fd9e 	bl	800229c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8001760:	2390      	movs	r3, #144	; 0x90
 8001762:	05db      	lsls	r3, r3, #23
 8001764:	2200      	movs	r2, #0
 8001766:	2140      	movs	r1, #64	; 0x40
 8001768:	0018      	movs	r0, r3
 800176a:	f001 f826 	bl	80027ba <HAL_GPIO_WritePin>
	HAL_Delay(35);
 800176e:	2023      	movs	r0, #35	; 0x23
 8001770:	f000 fd94 	bl	800229c <HAL_Delay>
	//	beep_sound_flag = 0;
}
 8001774:	46c0      	nop			; (mov r8, r8)
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800177c:	b590      	push	{r4, r7, lr}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001782:	f000 fd27 	bl	80021d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001786:	f000 f9cd 	bl	8001b24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800178a:	f000 fac5 	bl	8001d18 <MX_GPIO_Init>
  MX_TIM6_Init();
 800178e:	f000 fa6d 	bl	8001c6c <MX_TIM6_Init>
  MX_I2C1_Init();
 8001792:	f000 fa2b 	bl	8001bec <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001796:	f000 fa8d 	bl	8001cb4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim6);
 800179a:	4bd9      	ldr	r3, [pc, #868]	; (8001b00 <main+0x384>)
 800179c:	0018      	movs	r0, r3
 800179e:	f002 fbb1 	bl	8003f04 <HAL_TIM_Base_Start_IT>
	//	HAL_Delay(1000);
	//	home_page();
	//	HAL_Delay(1000);
	//	lcd_clear();

	HAL_Delay(1000);
 80017a2:	23fa      	movs	r3, #250	; 0xfa
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	0018      	movs	r0, r3
 80017a8:	f000 fd78 	bl	800229c <HAL_Delay>
	lcd_init();
 80017ac:	f7fe ffd4 	bl	8000758 <lcd_init>
	HAL_Delay(1000);
 80017b0:	23fa      	movs	r3, #250	; 0xfa
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	0018      	movs	r0, r3
 80017b6:	f000 fd71 	bl	800229c <HAL_Delay>
	home_page();
 80017ba:	f7ff fa97 	bl	8000cec <home_page>
	HAL_Delay(1000);
 80017be:	23fa      	movs	r3, #250	; 0xfa
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	0018      	movs	r0, r3
 80017c4:	f000 fd6a 	bl	800229c <HAL_Delay>
	lcd_clear();
 80017c8:	f7ff fa02 	bl	8000bd0 <lcd_clear>
	page1_print();
 80017cc:	f7ff fe7c 	bl	80014c8 <page1_print>
	HAL_Delay(1000);
 80017d0:	23fa      	movs	r3, #250	; 0xfa
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	0018      	movs	r0, r3
 80017d6:	f000 fd61 	bl	800229c <HAL_Delay>
	//  	data_reg.sensor = 1;
	init_gesture();
 80017da:	f7fe fd2b 	bl	8000234 <init_gesture>
	HAL_Delay(1000);
 80017de:	23fa      	movs	r3, #250	; 0xfa
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	0018      	movs	r0, r3
 80017e4:	f000 fd5a 	bl	800229c <HAL_Delay>
	uint8_t sns_status = 0;
 80017e8:	230e      	movs	r3, #14
 80017ea:	18fb      	adds	r3, r7, r3
 80017ec:	2200      	movs	r2, #0
 80017ee:	701a      	strb	r2, [r3, #0]
	uint8_t page_change_flag = 0;
 80017f0:	230f      	movs	r3, #15
 80017f2:	18fb      	adds	r3, r7, r3
 80017f4:	2200      	movs	r2, #0
 80017f6:	701a      	strb	r2, [r3, #0]

	uint32_t temp_time = HAL_GetTick();
 80017f8:	f000 fd46 	bl	8002288 <HAL_GetTick>
 80017fc:	0003      	movs	r3, r0
 80017fe:	60bb      	str	r3, [r7, #8]

    /* USER CODE BEGIN 3 */



		if (interrupt_reg.key_flag)
 8001800:	4bc0      	ldr	r3, [pc, #768]	; (8001b04 <main+0x388>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	07db      	lsls	r3, r3, #31
 8001806:	0fdb      	lsrs	r3, r3, #31
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b00      	cmp	r3, #0
 800180c:	d100      	bne.n	8001810 <main+0x94>
 800180e:	e0e3      	b.n	80019d8 <main+0x25c>
		{

			if (HAL_GPIO_ReadPin(S_PRV_GPIO_Port, S_PRV_Pin) == 0)
 8001810:	2380      	movs	r3, #128	; 0x80
 8001812:	011b      	lsls	r3, r3, #4
 8001814:	4abc      	ldr	r2, [pc, #752]	; (8001b08 <main+0x38c>)
 8001816:	0019      	movs	r1, r3
 8001818:	0010      	movs	r0, r2
 800181a:	f000 ffb1 	bl	8002780 <HAL_GPIO_ReadPin>
 800181e:	1e03      	subs	r3, r0, #0
 8001820:	d12b      	bne.n	800187a <main+0xfe>
			{
				temp_time = HAL_GetTick();
 8001822:	f000 fd31 	bl	8002288 <HAL_GetTick>
 8001826:	0003      	movs	r3, r0
 8001828:	60bb      	str	r3, [r7, #8]
				//				HAL_Delay(1000);
				while ((HAL_GetTick() - temp_time) >= 2000)  // error
 800182a:	e01d      	b.n	8001868 <main+0xec>
				{
					if (HAL_GPIO_ReadPin(S_PRV_GPIO_Port, S_PRV_Pin))
 800182c:	2380      	movs	r3, #128	; 0x80
 800182e:	011b      	lsls	r3, r3, #4
 8001830:	4ab5      	ldr	r2, [pc, #724]	; (8001b08 <main+0x38c>)
 8001832:	0019      	movs	r1, r3
 8001834:	0010      	movs	r0, r2
 8001836:	f000 ffa3 	bl	8002780 <HAL_GPIO_ReadPin>
 800183a:	1e03      	subs	r3, r0, #0
 800183c:	d00a      	beq.n	8001854 <main+0xd8>
					{
						interrupt_reg.key_flag = 1;
 800183e:	4ab1      	ldr	r2, [pc, #708]	; (8001b04 <main+0x388>)
 8001840:	7813      	ldrb	r3, [r2, #0]
 8001842:	2101      	movs	r1, #1
 8001844:	430b      	orrs	r3, r1
 8001846:	7013      	strb	r3, [r2, #0]
						interrupt_reg.prv_long_press = 0;
 8001848:	4aae      	ldr	r2, [pc, #696]	; (8001b04 <main+0x388>)
 800184a:	7813      	ldrb	r3, [r2, #0]
 800184c:	2108      	movs	r1, #8
 800184e:	438b      	bics	r3, r1
 8001850:	7013      	strb	r3, [r2, #0]
						break;
 8001852:	e012      	b.n	800187a <main+0xfe>
					}
					interrupt_reg.key_flag = 0;
 8001854:	4aab      	ldr	r2, [pc, #684]	; (8001b04 <main+0x388>)
 8001856:	7813      	ldrb	r3, [r2, #0]
 8001858:	2101      	movs	r1, #1
 800185a:	438b      	bics	r3, r1
 800185c:	7013      	strb	r3, [r2, #0]
					interrupt_reg.prv_long_press = 1;
 800185e:	4aa9      	ldr	r2, [pc, #676]	; (8001b04 <main+0x388>)
 8001860:	7813      	ldrb	r3, [r2, #0]
 8001862:	2108      	movs	r1, #8
 8001864:	430b      	orrs	r3, r1
 8001866:	7013      	strb	r3, [r2, #0]
				while ((HAL_GetTick() - temp_time) >= 2000)  // error
 8001868:	f000 fd0e 	bl	8002288 <HAL_GetTick>
 800186c:	0002      	movs	r2, r0
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	1ad2      	subs	r2, r2, r3
 8001872:	23fa      	movs	r3, #250	; 0xfa
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	429a      	cmp	r2, r3
 8001878:	d2d8      	bcs.n	800182c <main+0xb0>
				}
			}

			if (HAL_GPIO_ReadPin(DEPTH_GPIO_Port, DEPTH_Pin) == 0)
 800187a:	2380      	movs	r3, #128	; 0x80
 800187c:	019b      	lsls	r3, r3, #6
 800187e:	4aa2      	ldr	r2, [pc, #648]	; (8001b08 <main+0x38c>)
 8001880:	0019      	movs	r1, r3
 8001882:	0010      	movs	r0, r2
 8001884:	f000 ff7c 	bl	8002780 <HAL_GPIO_ReadPin>
 8001888:	1e03      	subs	r3, r0, #0
 800188a:	d12b      	bne.n	80018e4 <main+0x168>
			{
				temp_time = HAL_GetTick();
 800188c:	f000 fcfc 	bl	8002288 <HAL_GetTick>
 8001890:	0003      	movs	r3, r0
 8001892:	60bb      	str	r3, [r7, #8]
				//				HAL_Delay(1000);
				while ((HAL_GetTick() - temp_time) <= 2000)
 8001894:	e01d      	b.n	80018d2 <main+0x156>
				{
					if (HAL_GPIO_ReadPin(DEPTH_GPIO_Port, DEPTH_Pin))
 8001896:	2380      	movs	r3, #128	; 0x80
 8001898:	019b      	lsls	r3, r3, #6
 800189a:	4a9b      	ldr	r2, [pc, #620]	; (8001b08 <main+0x38c>)
 800189c:	0019      	movs	r1, r3
 800189e:	0010      	movs	r0, r2
 80018a0:	f000 ff6e 	bl	8002780 <HAL_GPIO_ReadPin>
 80018a4:	1e03      	subs	r3, r0, #0
 80018a6:	d00a      	beq.n	80018be <main+0x142>
					{
						interrupt_reg.key_flag = 1;
 80018a8:	4a96      	ldr	r2, [pc, #600]	; (8001b04 <main+0x388>)
 80018aa:	7813      	ldrb	r3, [r2, #0]
 80018ac:	2101      	movs	r1, #1
 80018ae:	430b      	orrs	r3, r1
 80018b0:	7013      	strb	r3, [r2, #0]
						interrupt_reg.depth_long_press = 0;
 80018b2:	4a94      	ldr	r2, [pc, #592]	; (8001b04 <main+0x388>)
 80018b4:	7813      	ldrb	r3, [r2, #0]
 80018b6:	2110      	movs	r1, #16
 80018b8:	438b      	bics	r3, r1
 80018ba:	7013      	strb	r3, [r2, #0]
						break;
 80018bc:	e012      	b.n	80018e4 <main+0x168>
					}
					interrupt_reg.key_flag = 0;
 80018be:	4a91      	ldr	r2, [pc, #580]	; (8001b04 <main+0x388>)
 80018c0:	7813      	ldrb	r3, [r2, #0]
 80018c2:	2101      	movs	r1, #1
 80018c4:	438b      	bics	r3, r1
 80018c6:	7013      	strb	r3, [r2, #0]
					interrupt_reg.depth_long_press = 1;
 80018c8:	4a8e      	ldr	r2, [pc, #568]	; (8001b04 <main+0x388>)
 80018ca:	7813      	ldrb	r3, [r2, #0]
 80018cc:	2110      	movs	r1, #16
 80018ce:	430b      	orrs	r3, r1
 80018d0:	7013      	strb	r3, [r2, #0]
				while ((HAL_GetTick() - temp_time) <= 2000)
 80018d2:	f000 fcd9 	bl	8002288 <HAL_GetTick>
 80018d6:	0002      	movs	r2, r0
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	1ad2      	subs	r2, r2, r3
 80018dc:	23fa      	movs	r3, #250	; 0xfa
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d9d8      	bls.n	8001896 <main+0x11a>
				}
			}

			if (interrupt_reg.key_flag)
 80018e4:	4b87      	ldr	r3, [pc, #540]	; (8001b04 <main+0x388>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	07db      	lsls	r3, r3, #31
 80018ea:	0fdb      	lsrs	r3, r3, #31
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d00d      	beq.n	800190e <main+0x192>
			{
				beep_sound();
 80018f2:	f7ff ff29 	bl	8001748 <beep_sound>
				update_key_press();
 80018f6:	f7ff fa19 	bl	8000d2c <update_key_press>
				interrupt_reg.key_flag = 0;
 80018fa:	4a82      	ldr	r2, [pc, #520]	; (8001b04 <main+0x388>)
 80018fc:	7813      	ldrb	r3, [r2, #0]
 80018fe:	2101      	movs	r1, #1
 8001900:	438b      	bics	r3, r1
 8001902:	7013      	strb	r3, [r2, #0]
				interrupt_reg.update_data = 1;
 8001904:	4a7f      	ldr	r2, [pc, #508]	; (8001b04 <main+0x388>)
 8001906:	7813      	ldrb	r3, [r2, #0]
 8001908:	2120      	movs	r1, #32
 800190a:	430b      	orrs	r3, r1
 800190c:	7013      	strb	r3, [r2, #0]
			}

			if (interrupt_reg.prv_long_press)
 800190e:	4b7d      	ldr	r3, [pc, #500]	; (8001b04 <main+0x388>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	071b      	lsls	r3, r3, #28
 8001914:	0fdb      	lsrs	r3, r3, #31
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b00      	cmp	r3, #0
 800191a:	d039      	beq.n	8001990 <main+0x214>
			{
				beep_sound();
 800191c:	f7ff ff14 	bl	8001748 <beep_sound>
				interrupt_reg.prv_long_press = 0;
 8001920:	4a78      	ldr	r2, [pc, #480]	; (8001b04 <main+0x388>)
 8001922:	7813      	ldrb	r3, [r2, #0]
 8001924:	2108      	movs	r1, #8
 8001926:	438b      	bics	r3, r1
 8001928:	7013      	strb	r3, [r2, #0]
				key_pressed.prv = 0;
 800192a:	4a78      	ldr	r2, [pc, #480]	; (8001b0c <main+0x390>)
 800192c:	7813      	ldrb	r3, [r2, #0]
 800192e:	2101      	movs	r1, #1
 8001930:	438b      	bics	r3, r1
 8001932:	7013      	strb	r3, [r2, #0]
				//				interrupt_reg.update_data = 0;
				data_reg.sensor = !data_reg.sensor;
 8001934:	4b76      	ldr	r3, [pc, #472]	; (8001b10 <main+0x394>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2210      	movs	r2, #16
 800193a:	4013      	ands	r3, r2
 800193c:	b2db      	uxtb	r3, r3
 800193e:	425a      	negs	r2, r3
 8001940:	4153      	adcs	r3, r2
 8001942:	b2da      	uxtb	r2, r3
 8001944:	4b72      	ldr	r3, [pc, #456]	; (8001b10 <main+0x394>)
 8001946:	2101      	movs	r1, #1
 8001948:	400a      	ands	r2, r1
 800194a:	0110      	lsls	r0, r2, #4
 800194c:	781a      	ldrb	r2, [r3, #0]
 800194e:	2110      	movs	r1, #16
 8001950:	438a      	bics	r2, r1
 8001952:	1c11      	adds	r1, r2, #0
 8001954:	1c02      	adds	r2, r0, #0
 8001956:	430a      	orrs	r2, r1
 8001958:	701a      	strb	r2, [r3, #0]
				clr_data(sensor);
 800195a:	2003      	movs	r0, #3
 800195c:	f7ff f88c 	bl	8000a78 <clr_data>
				if (data_reg.sensor)
 8001960:	4b6b      	ldr	r3, [pc, #428]	; (8001b10 <main+0x394>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2210      	movs	r2, #16
 8001966:	4013      	ands	r3, r2
 8001968:	b2db      	uxtb	r3, r3
 800196a:	2b00      	cmp	r3, #0
 800196c:	d006      	beq.n	800197c <main+0x200>
					lcd_puts(3, 7, (int8_t *)"ON");
 800196e:	4b69      	ldr	r3, [pc, #420]	; (8001b14 <main+0x398>)
 8001970:	001a      	movs	r2, r3
 8001972:	2107      	movs	r1, #7
 8001974:	2003      	movs	r0, #3
 8001976:	f7ff f82d 	bl	80009d4 <lcd_puts>
 800197a:	e005      	b.n	8001988 <main+0x20c>
				else
					lcd_puts(3, 7, (int8_t *)"OFF");
 800197c:	4b66      	ldr	r3, [pc, #408]	; (8001b18 <main+0x39c>)
 800197e:	001a      	movs	r2, r3
 8001980:	2107      	movs	r1, #7
 8001982:	2003      	movs	r0, #3
 8001984:	f7ff f826 	bl	80009d4 <lcd_puts>
				sns_status = 1;
 8001988:	230e      	movs	r3, #14
 800198a:	18fb      	adds	r3, r7, r3
 800198c:	2201      	movs	r2, #1
 800198e:	701a      	strb	r2, [r3, #0]
			}

			if (interrupt_reg.depth_long_press)
 8001990:	4b5c      	ldr	r3, [pc, #368]	; (8001b04 <main+0x388>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	06db      	lsls	r3, r3, #27
 8001996:	0fdb      	lsrs	r3, r3, #31
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b00      	cmp	r3, #0
 800199c:	d01c      	beq.n	80019d8 <main+0x25c>
			{
//				lcd_puts(0, 0, (int8_t *)"...");
				page_change_flag = 1;
 800199e:	230f      	movs	r3, #15
 80019a0:	18fb      	adds	r3, r7, r3
 80019a2:	2201      	movs	r2, #1
 80019a4:	701a      	strb	r2, [r3, #0]
				beep_sound();
 80019a6:	f7ff fecf 	bl	8001748 <beep_sound>
				current_pos.key_number = _depth;
 80019aa:	4b5c      	ldr	r3, [pc, #368]	; (8001b1c <main+0x3a0>)
 80019ac:	781a      	ldrb	r2, [r3, #0]
 80019ae:	2138      	movs	r1, #56	; 0x38
 80019b0:	438a      	bics	r2, r1
 80019b2:	1c11      	adds	r1, r2, #0
 80019b4:	2210      	movs	r2, #16
 80019b6:	430a      	orrs	r2, r1
 80019b8:	701a      	strb	r2, [r3, #0]
				interrupt_reg.depth_long_press = 0;
 80019ba:	4a52      	ldr	r2, [pc, #328]	; (8001b04 <main+0x388>)
 80019bc:	7813      	ldrb	r3, [r2, #0]
 80019be:	2110      	movs	r1, #16
 80019c0:	438b      	bics	r3, r1
 80019c2:	7013      	strb	r3, [r2, #0]
				key_pressed.depth = 0;
 80019c4:	4a51      	ldr	r2, [pc, #324]	; (8001b0c <main+0x390>)
 80019c6:	7813      	ldrb	r3, [r2, #0]
 80019c8:	2104      	movs	r1, #4
 80019ca:	438b      	bics	r3, r1
 80019cc:	7013      	strb	r3, [r2, #0]
				interrupt_reg.key_flag =0;
 80019ce:	4a4d      	ldr	r2, [pc, #308]	; (8001b04 <main+0x388>)
 80019d0:	7813      	ldrb	r3, [r2, #0]
 80019d2:	2101      	movs	r1, #1
 80019d4:	438b      	bics	r3, r1
 80019d6:	7013      	strb	r3, [r2, #0]
			//				interrupt_reg.gesture_flag = 0;
			//				interrupt_reg.update_data = 1;
			//			}
		}

		if (data_reg.sensor)
 80019d8:	4b4d      	ldr	r3, [pc, #308]	; (8001b10 <main+0x394>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2210      	movs	r2, #16
 80019de:	4013      	ands	r3, r2
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d054      	beq.n	8001a90 <main+0x314>
		{
			HAL_Delay(100);
 80019e6:	2064      	movs	r0, #100	; 0x64
 80019e8:	f000 fc58 	bl	800229c <HAL_Delay>
			if (gestureAvailable())
 80019ec:	f7fe fe1e 	bl	800062c <gestureAvailable>
 80019f0:	1e03      	subs	r3, r0, #0
 80019f2:	d04d      	beq.n	8001a90 <main+0x314>
			{
				uint8_t gesture = readGesture();
 80019f4:	1dfc      	adds	r4, r7, #7
 80019f6:	f7fe fd03 	bl	8000400 <readGesture>
 80019fa:	0003      	movs	r3, r0
 80019fc:	7023      	strb	r3, [r4, #0]
				switch (gesture)
 80019fe:	1dfb      	adds	r3, r7, #7
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b03      	cmp	r3, #3
 8001a04:	d035      	beq.n	8001a72 <main+0x2f6>
 8001a06:	dc45      	bgt.n	8001a94 <main+0x318>
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d023      	beq.n	8001a54 <main+0x2d8>
 8001a0c:	dc42      	bgt.n	8001a94 <main+0x318>
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d002      	beq.n	8001a18 <main+0x29c>
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d00f      	beq.n	8001a36 <main+0x2ba>
					update_key_press();
					interrupt_reg.update_data = 1;
					break;

				default:
					break;
 8001a16:	e03d      	b.n	8001a94 <main+0x318>
					beep_sound();
 8001a18:	f7ff fe96 	bl	8001748 <beep_sound>
					key_pressed.prv = 1;
 8001a1c:	4a3b      	ldr	r2, [pc, #236]	; (8001b0c <main+0x390>)
 8001a1e:	7813      	ldrb	r3, [r2, #0]
 8001a20:	2101      	movs	r1, #1
 8001a22:	430b      	orrs	r3, r1
 8001a24:	7013      	strb	r3, [r2, #0]
					update_key_press();
 8001a26:	f7ff f981 	bl	8000d2c <update_key_press>
					interrupt_reg.update_data = 1;
 8001a2a:	4a36      	ldr	r2, [pc, #216]	; (8001b04 <main+0x388>)
 8001a2c:	7813      	ldrb	r3, [r2, #0]
 8001a2e:	2120      	movs	r1, #32
 8001a30:	430b      	orrs	r3, r1
 8001a32:	7013      	strb	r3, [r2, #0]
					break;
 8001a34:	e02f      	b.n	8001a96 <main+0x31a>
					beep_sound();
 8001a36:	f7ff fe87 	bl	8001748 <beep_sound>
					key_pressed.nxt = 1;
 8001a3a:	4a34      	ldr	r2, [pc, #208]	; (8001b0c <main+0x390>)
 8001a3c:	7813      	ldrb	r3, [r2, #0]
 8001a3e:	2102      	movs	r1, #2
 8001a40:	430b      	orrs	r3, r1
 8001a42:	7013      	strb	r3, [r2, #0]
					update_key_press();
 8001a44:	f7ff f972 	bl	8000d2c <update_key_press>
					interrupt_reg.update_data = 1;
 8001a48:	4a2e      	ldr	r2, [pc, #184]	; (8001b04 <main+0x388>)
 8001a4a:	7813      	ldrb	r3, [r2, #0]
 8001a4c:	2120      	movs	r1, #32
 8001a4e:	430b      	orrs	r3, r1
 8001a50:	7013      	strb	r3, [r2, #0]
					break;
 8001a52:	e020      	b.n	8001a96 <main+0x31a>
					beep_sound();
 8001a54:	f7ff fe78 	bl	8001748 <beep_sound>
					key_pressed.neg = 1;
 8001a58:	4a2c      	ldr	r2, [pc, #176]	; (8001b0c <main+0x390>)
 8001a5a:	7813      	ldrb	r3, [r2, #0]
 8001a5c:	2110      	movs	r1, #16
 8001a5e:	430b      	orrs	r3, r1
 8001a60:	7013      	strb	r3, [r2, #0]
					update_key_press();
 8001a62:	f7ff f963 	bl	8000d2c <update_key_press>
					interrupt_reg.update_data = 1;
 8001a66:	4a27      	ldr	r2, [pc, #156]	; (8001b04 <main+0x388>)
 8001a68:	7813      	ldrb	r3, [r2, #0]
 8001a6a:	2120      	movs	r1, #32
 8001a6c:	430b      	orrs	r3, r1
 8001a6e:	7013      	strb	r3, [r2, #0]
					break;
 8001a70:	e011      	b.n	8001a96 <main+0x31a>
					beep_sound();
 8001a72:	f7ff fe69 	bl	8001748 <beep_sound>
					key_pressed.pos = 1;
 8001a76:	4a25      	ldr	r2, [pc, #148]	; (8001b0c <main+0x390>)
 8001a78:	7813      	ldrb	r3, [r2, #0]
 8001a7a:	2108      	movs	r1, #8
 8001a7c:	430b      	orrs	r3, r1
 8001a7e:	7013      	strb	r3, [r2, #0]
					update_key_press();
 8001a80:	f7ff f954 	bl	8000d2c <update_key_press>
					interrupt_reg.update_data = 1;
 8001a84:	4a1f      	ldr	r2, [pc, #124]	; (8001b04 <main+0x388>)
 8001a86:	7813      	ldrb	r3, [r2, #0]
 8001a88:	2120      	movs	r1, #32
 8001a8a:	430b      	orrs	r3, r1
 8001a8c:	7013      	strb	r3, [r2, #0]
					break;
 8001a8e:	e002      	b.n	8001a96 <main+0x31a>
				}
			}
 8001a90:	46c0      	nop			; (mov r8, r8)
 8001a92:	e000      	b.n	8001a96 <main+0x31a>
					break;
 8001a94:	46c0      	nop			; (mov r8, r8)
		}

		if (interrupt_reg.update_data)
 8001a96:	4b1b      	ldr	r3, [pc, #108]	; (8001b04 <main+0x388>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	069b      	lsls	r3, r3, #26
 8001a9c:	0fdb      	lsrs	r3, r3, #31
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d008      	beq.n	8001ab6 <main+0x33a>
		{
			update_new_data();
 8001aa4:	f7ff faba 	bl	800101c <update_new_data>
			update_screen_data();
 8001aa8:	f7ff fb52 	bl	8001150 <update_screen_data>
			interrupt_reg.update_data = 0;
 8001aac:	4a15      	ldr	r2, [pc, #84]	; (8001b04 <main+0x388>)
 8001aae:	7813      	ldrb	r3, [r2, #0]
 8001ab0:	2120      	movs	r1, #32
 8001ab2:	438b      	bics	r3, r1
 8001ab4:	7013      	strb	r3, [r2, #0]
		}

		if (page_change_flag)
 8001ab6:	240f      	movs	r4, #15
 8001ab8:	193b      	adds	r3, r7, r4
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d100      	bne.n	8001ac2 <main+0x346>
 8001ac0:	e69e      	b.n	8001800 <main+0x84>
		{
			clock_page();
 8001ac2:	f7ff f88f 	bl	8000be4 <clock_page>
			Total_Time_Print(timer_intrupt);
 8001ac6:	4b16      	ldr	r3, [pc, #88]	; (8001b20 <main+0x3a4>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	0018      	movs	r0, r3
 8001acc:	f7ff f8b2 	bl	8000c34 <Total_Time_Print>
			HAL_Delay(2000);
 8001ad0:	23fa      	movs	r3, #250	; 0xfa
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	f000 fbe1 	bl	800229c <HAL_Delay>
			lcd_clear();
 8001ada:	f7ff f879 	bl	8000bd0 <lcd_clear>
			page1_print();
 8001ade:	f7ff fcf3 	bl	80014c8 <page1_print>
			page_change_flag = 0;
 8001ae2:	193b      	adds	r3, r7, r4
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	701a      	strb	r2, [r3, #0]
			interrupt_reg.update_data = 0;
 8001ae8:	4a06      	ldr	r2, [pc, #24]	; (8001b04 <main+0x388>)
 8001aea:	7813      	ldrb	r3, [r2, #0]
 8001aec:	2120      	movs	r1, #32
 8001aee:	438b      	bics	r3, r1
 8001af0:	7013      	strb	r3, [r2, #0]
			interrupt_reg.key_flag =0;
 8001af2:	4a04      	ldr	r2, [pc, #16]	; (8001b04 <main+0x388>)
 8001af4:	7813      	ldrb	r3, [r2, #0]
 8001af6:	2101      	movs	r1, #1
 8001af8:	438b      	bics	r3, r1
 8001afa:	7013      	strb	r3, [r2, #0]
		if (interrupt_reg.key_flag)
 8001afc:	e680      	b.n	8001800 <main+0x84>
 8001afe:	46c0      	nop			; (mov r8, r8)
 8001b00:	2000010c 	.word	0x2000010c
 8001b04:	200000bc 	.word	0x200000bc
 8001b08:	48000400 	.word	0x48000400
 8001b0c:	200000b8 	.word	0x200000b8
 8001b10:	20000008 	.word	0x20000008
 8001b14:	0800556c 	.word	0x0800556c
 8001b18:	08005570 	.word	0x08005570
 8001b1c:	20000004 	.word	0x20000004
 8001b20:	200000b0 	.word	0x200000b0

08001b24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b24:	b590      	push	{r4, r7, lr}
 8001b26:	b095      	sub	sp, #84	; 0x54
 8001b28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b2a:	2420      	movs	r4, #32
 8001b2c:	193b      	adds	r3, r7, r4
 8001b2e:	0018      	movs	r0, r3
 8001b30:	2330      	movs	r3, #48	; 0x30
 8001b32:	001a      	movs	r2, r3
 8001b34:	2100      	movs	r1, #0
 8001b36:	f003 f839 	bl	8004bac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b3a:	2310      	movs	r3, #16
 8001b3c:	18fb      	adds	r3, r7, r3
 8001b3e:	0018      	movs	r0, r3
 8001b40:	2310      	movs	r3, #16
 8001b42:	001a      	movs	r2, r3
 8001b44:	2100      	movs	r1, #0
 8001b46:	f003 f831 	bl	8004bac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b4a:	003b      	movs	r3, r7
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	2310      	movs	r3, #16
 8001b50:	001a      	movs	r2, r3
 8001b52:	2100      	movs	r1, #0
 8001b54:	f003 f82a 	bl	8004bac <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b58:	0021      	movs	r1, r4
 8001b5a:	187b      	adds	r3, r7, r1
 8001b5c:	2202      	movs	r2, #2
 8001b5e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b60:	187b      	adds	r3, r7, r1
 8001b62:	2201      	movs	r2, #1
 8001b64:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b66:	187b      	adds	r3, r7, r1
 8001b68:	2210      	movs	r2, #16
 8001b6a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b6c:	187b      	adds	r3, r7, r1
 8001b6e:	2202      	movs	r2, #2
 8001b70:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b72:	187b      	adds	r3, r7, r1
 8001b74:	2200      	movs	r2, #0
 8001b76:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8001b78:	187b      	adds	r3, r7, r1
 8001b7a:	22c0      	movs	r2, #192	; 0xc0
 8001b7c:	0352      	lsls	r2, r2, #13
 8001b7e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001b80:	187b      	adds	r3, r7, r1
 8001b82:	2200      	movs	r2, #0
 8001b84:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b86:	187b      	adds	r3, r7, r1
 8001b88:	0018      	movs	r0, r3
 8001b8a:	f001 fc31 	bl	80033f0 <HAL_RCC_OscConfig>
 8001b8e:	1e03      	subs	r3, r0, #0
 8001b90:	d001      	beq.n	8001b96 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001b92:	f000 f963 	bl	8001e5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b96:	2110      	movs	r1, #16
 8001b98:	187b      	adds	r3, r7, r1
 8001b9a:	2207      	movs	r2, #7
 8001b9c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b9e:	187b      	adds	r3, r7, r1
 8001ba0:	2202      	movs	r2, #2
 8001ba2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ba4:	187b      	adds	r3, r7, r1
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001baa:	187b      	adds	r3, r7, r1
 8001bac:	2200      	movs	r2, #0
 8001bae:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001bb0:	187b      	adds	r3, r7, r1
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	f001 ff35 	bl	8003a24 <HAL_RCC_ClockConfig>
 8001bba:	1e03      	subs	r3, r0, #0
 8001bbc:	d001      	beq.n	8001bc2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001bbe:	f000 f94d 	bl	8001e5c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8001bc2:	003b      	movs	r3, r7
 8001bc4:	2221      	movs	r2, #33	; 0x21
 8001bc6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001bc8:	003b      	movs	r3, r7
 8001bca:	2200      	movs	r2, #0
 8001bcc:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001bce:	003b      	movs	r3, r7
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bd4:	003b      	movs	r3, r7
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	f002 f876 	bl	8003cc8 <HAL_RCCEx_PeriphCLKConfig>
 8001bdc:	1e03      	subs	r3, r0, #0
 8001bde:	d001      	beq.n	8001be4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001be0:	f000 f93c 	bl	8001e5c <Error_Handler>
  }
}
 8001be4:	46c0      	nop			; (mov r8, r8)
 8001be6:	46bd      	mov	sp, r7
 8001be8:	b015      	add	sp, #84	; 0x54
 8001bea:	bd90      	pop	{r4, r7, pc}

08001bec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001bf0:	4b1b      	ldr	r3, [pc, #108]	; (8001c60 <MX_I2C1_Init+0x74>)
 8001bf2:	4a1c      	ldr	r2, [pc, #112]	; (8001c64 <MX_I2C1_Init+0x78>)
 8001bf4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8001bf6:	4b1a      	ldr	r3, [pc, #104]	; (8001c60 <MX_I2C1_Init+0x74>)
 8001bf8:	4a1b      	ldr	r2, [pc, #108]	; (8001c68 <MX_I2C1_Init+0x7c>)
 8001bfa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001bfc:	4b18      	ldr	r3, [pc, #96]	; (8001c60 <MX_I2C1_Init+0x74>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c02:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <MX_I2C1_Init+0x74>)
 8001c04:	2201      	movs	r2, #1
 8001c06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c08:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <MX_I2C1_Init+0x74>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c0e:	4b14      	ldr	r3, [pc, #80]	; (8001c60 <MX_I2C1_Init+0x74>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c14:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <MX_I2C1_Init+0x74>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c1a:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <MX_I2C1_Init+0x74>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c20:	4b0f      	ldr	r3, [pc, #60]	; (8001c60 <MX_I2C1_Init+0x74>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c26:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <MX_I2C1_Init+0x74>)
 8001c28:	0018      	movs	r0, r3
 8001c2a:	f000 fdff 	bl	800282c <HAL_I2C_Init>
 8001c2e:	1e03      	subs	r3, r0, #0
 8001c30:	d001      	beq.n	8001c36 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001c32:	f000 f913 	bl	8001e5c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c36:	4b0a      	ldr	r3, [pc, #40]	; (8001c60 <MX_I2C1_Init+0x74>)
 8001c38:	2100      	movs	r1, #0
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	f001 fb40 	bl	80032c0 <HAL_I2CEx_ConfigAnalogFilter>
 8001c40:	1e03      	subs	r3, r0, #0
 8001c42:	d001      	beq.n	8001c48 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001c44:	f000 f90a 	bl	8001e5c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c48:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <MX_I2C1_Init+0x74>)
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	f001 fb83 	bl	8003358 <HAL_I2CEx_ConfigDigitalFilter>
 8001c52:	1e03      	subs	r3, r0, #0
 8001c54:	d001      	beq.n	8001c5a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001c56:	f000 f901 	bl	8001e5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c5a:	46c0      	nop			; (mov r8, r8)
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	200000c0 	.word	0x200000c0
 8001c64:	40005400 	.word	0x40005400
 8001c68:	0000020b 	.word	0x0000020b

08001c6c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_Init 0 */

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001c70:	4b0c      	ldr	r3, [pc, #48]	; (8001ca4 <MX_TIM6_Init+0x38>)
 8001c72:	4a0d      	ldr	r2, [pc, #52]	; (8001ca8 <MX_TIM6_Init+0x3c>)
 8001c74:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 32000-1;
 8001c76:	4b0b      	ldr	r3, [pc, #44]	; (8001ca4 <MX_TIM6_Init+0x38>)
 8001c78:	4a0c      	ldr	r2, [pc, #48]	; (8001cac <MX_TIM6_Init+0x40>)
 8001c7a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c7c:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <MX_TIM6_Init+0x38>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8001c82:	4b08      	ldr	r3, [pc, #32]	; (8001ca4 <MX_TIM6_Init+0x38>)
 8001c84:	4a0a      	ldr	r2, [pc, #40]	; (8001cb0 <MX_TIM6_Init+0x44>)
 8001c86:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c88:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <MX_TIM6_Init+0x38>)
 8001c8a:	2280      	movs	r2, #128	; 0x80
 8001c8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c8e:	4b05      	ldr	r3, [pc, #20]	; (8001ca4 <MX_TIM6_Init+0x38>)
 8001c90:	0018      	movs	r0, r3
 8001c92:	f002 f8e7 	bl	8003e64 <HAL_TIM_Base_Init>
 8001c96:	1e03      	subs	r3, r0, #0
 8001c98:	d001      	beq.n	8001c9e <MX_TIM6_Init+0x32>
  {
    Error_Handler();
 8001c9a:	f000 f8df 	bl	8001e5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c9e:	46c0      	nop			; (mov r8, r8)
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	2000010c 	.word	0x2000010c
 8001ca8:	40001000 	.word	0x40001000
 8001cac:	00007cff 	.word	0x00007cff
 8001cb0:	000003e7 	.word	0x000003e7

08001cb4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cb8:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <MX_USART1_UART_Init+0x5c>)
 8001cba:	4a16      	ldr	r2, [pc, #88]	; (8001d14 <MX_USART1_UART_Init+0x60>)
 8001cbc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001cbe:	4b14      	ldr	r3, [pc, #80]	; (8001d10 <MX_USART1_UART_Init+0x5c>)
 8001cc0:	2296      	movs	r2, #150	; 0x96
 8001cc2:	0192      	lsls	r2, r2, #6
 8001cc4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cc6:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <MX_USART1_UART_Init+0x5c>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ccc:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <MX_USART1_UART_Init+0x5c>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cd2:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <MX_USART1_UART_Init+0x5c>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cd8:	4b0d      	ldr	r3, [pc, #52]	; (8001d10 <MX_USART1_UART_Init+0x5c>)
 8001cda:	220c      	movs	r2, #12
 8001cdc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cde:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <MX_USART1_UART_Init+0x5c>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ce4:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <MX_USART1_UART_Init+0x5c>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cea:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <MX_USART1_UART_Init+0x5c>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cf0:	4b07      	ldr	r3, [pc, #28]	; (8001d10 <MX_USART1_UART_Init+0x5c>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8001cf6:	4806      	ldr	r0, [pc, #24]	; (8001d10 <MX_USART1_UART_Init+0x5c>)
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	f002 febb 	bl	8004a78 <HAL_RS485Ex_Init>
 8001d02:	1e03      	subs	r3, r0, #0
 8001d04:	d001      	beq.n	8001d0a <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8001d06:	f000 f8a9 	bl	8001e5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d0a:	46c0      	nop			; (mov r8, r8)
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20000154 	.word	0x20000154
 8001d14:	40013800 	.word	0x40013800

08001d18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d18:	b590      	push	{r4, r7, lr}
 8001d1a:	b089      	sub	sp, #36	; 0x24
 8001d1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1e:	240c      	movs	r4, #12
 8001d20:	193b      	adds	r3, r7, r4
 8001d22:	0018      	movs	r0, r3
 8001d24:	2314      	movs	r3, #20
 8001d26:	001a      	movs	r2, r3
 8001d28:	2100      	movs	r1, #0
 8001d2a:	f002 ff3f 	bl	8004bac <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2e:	4b47      	ldr	r3, [pc, #284]	; (8001e4c <MX_GPIO_Init+0x134>)
 8001d30:	695a      	ldr	r2, [r3, #20]
 8001d32:	4b46      	ldr	r3, [pc, #280]	; (8001e4c <MX_GPIO_Init+0x134>)
 8001d34:	2180      	movs	r1, #128	; 0x80
 8001d36:	0289      	lsls	r1, r1, #10
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	615a      	str	r2, [r3, #20]
 8001d3c:	4b43      	ldr	r3, [pc, #268]	; (8001e4c <MX_GPIO_Init+0x134>)
 8001d3e:	695a      	ldr	r2, [r3, #20]
 8001d40:	2380      	movs	r3, #128	; 0x80
 8001d42:	029b      	lsls	r3, r3, #10
 8001d44:	4013      	ands	r3, r2
 8001d46:	60bb      	str	r3, [r7, #8]
 8001d48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d4a:	4b40      	ldr	r3, [pc, #256]	; (8001e4c <MX_GPIO_Init+0x134>)
 8001d4c:	695a      	ldr	r2, [r3, #20]
 8001d4e:	4b3f      	ldr	r3, [pc, #252]	; (8001e4c <MX_GPIO_Init+0x134>)
 8001d50:	2180      	movs	r1, #128	; 0x80
 8001d52:	02c9      	lsls	r1, r1, #11
 8001d54:	430a      	orrs	r2, r1
 8001d56:	615a      	str	r2, [r3, #20]
 8001d58:	4b3c      	ldr	r3, [pc, #240]	; (8001e4c <MX_GPIO_Init+0x134>)
 8001d5a:	695a      	ldr	r2, [r3, #20]
 8001d5c:	2380      	movs	r3, #128	; 0x80
 8001d5e:	02db      	lsls	r3, r3, #11
 8001d60:	4013      	ands	r3, r2
 8001d62:	607b      	str	r3, [r7, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001d66:	493a      	ldr	r1, [pc, #232]	; (8001e50 <MX_GPIO_Init+0x138>)
 8001d68:	2390      	movs	r3, #144	; 0x90
 8001d6a:	05db      	lsls	r3, r3, #23
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	0018      	movs	r0, r3
 8001d70:	f000 fd23 	bl	80027ba <HAL_GPIO_WritePin>
                          |E_Pin|RS_Pin|BUZZER_Pin|PA7_Pin
                          |LED2_Pin|LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PB0_Pin|GPIO_PIN_1|PB2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8001d74:	4937      	ldr	r1, [pc, #220]	; (8001e54 <MX_GPIO_Init+0x13c>)
 8001d76:	4b38      	ldr	r3, [pc, #224]	; (8001e58 <MX_GPIO_Init+0x140>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	0018      	movs	r0, r3
 8001d7c:	f000 fd1d 	bl	80027ba <HAL_GPIO_WritePin>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           E_Pin RS_Pin BUZZER_Pin PA7_Pin
                           LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001d80:	193b      	adds	r3, r7, r4
 8001d82:	4a33      	ldr	r2, [pc, #204]	; (8001e50 <MX_GPIO_Init+0x138>)
 8001d84:	601a      	str	r2, [r3, #0]
                          |E_Pin|RS_Pin|BUZZER_Pin|PA7_Pin
                          |LED2_Pin|LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d86:	193b      	adds	r3, r7, r4
 8001d88:	2201      	movs	r2, #1
 8001d8a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	193b      	adds	r3, r7, r4
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d92:	193b      	adds	r3, r7, r4
 8001d94:	2200      	movs	r2, #0
 8001d96:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d98:	193a      	adds	r2, r7, r4
 8001d9a:	2390      	movs	r3, #144	; 0x90
 8001d9c:	05db      	lsls	r3, r3, #23
 8001d9e:	0011      	movs	r1, r2
 8001da0:	0018      	movs	r0, r3
 8001da2:	f000 fb7d 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0_Pin PB1 PB2_Pin PB10 */
  GPIO_InitStruct.Pin = PB0_Pin|GPIO_PIN_1|PB2_Pin|GPIO_PIN_10;
 8001da6:	193b      	adds	r3, r7, r4
 8001da8:	4a2a      	ldr	r2, [pc, #168]	; (8001e54 <MX_GPIO_Init+0x13c>)
 8001daa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dac:	193b      	adds	r3, r7, r4
 8001dae:	2201      	movs	r2, #1
 8001db0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	193b      	adds	r3, r7, r4
 8001db4:	2200      	movs	r2, #0
 8001db6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db8:	193b      	adds	r3, r7, r4
 8001dba:	2200      	movs	r2, #0
 8001dbc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dbe:	193b      	adds	r3, r7, r4
 8001dc0:	4a25      	ldr	r2, [pc, #148]	; (8001e58 <MX_GPIO_Init+0x140>)
 8001dc2:	0019      	movs	r1, r3
 8001dc4:	0010      	movs	r0, r2
 8001dc6:	f000 fb6b 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : S_PRV_Pin S_NEXT_Pin DEPTH_Pin IR_N_Pin
                           CHANGE_N_Pin */
  GPIO_InitStruct.Pin = S_PRV_Pin|S_NEXT_Pin|DEPTH_Pin|IR_N_Pin
 8001dca:	193b      	adds	r3, r7, r4
 8001dcc:	22f8      	movs	r2, #248	; 0xf8
 8001dce:	0212      	lsls	r2, r2, #8
 8001dd0:	601a      	str	r2, [r3, #0]
                          |CHANGE_N_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001dd2:	193b      	adds	r3, r7, r4
 8001dd4:	2288      	movs	r2, #136	; 0x88
 8001dd6:	0352      	lsls	r2, r2, #13
 8001dd8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dda:	193b      	adds	r3, r7, r4
 8001ddc:	2200      	movs	r2, #0
 8001dde:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de0:	193b      	adds	r3, r7, r4
 8001de2:	4a1d      	ldr	r2, [pc, #116]	; (8001e58 <MX_GPIO_Init+0x140>)
 8001de4:	0019      	movs	r1, r3
 8001de6:	0010      	movs	r0, r2
 8001de8:	f000 fb5a 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHANGE_P_Pin */
  GPIO_InitStruct.Pin = CHANGE_P_Pin;
 8001dec:	193b      	adds	r3, r7, r4
 8001dee:	2280      	movs	r2, #128	; 0x80
 8001df0:	00d2      	lsls	r2, r2, #3
 8001df2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001df4:	193b      	adds	r3, r7, r4
 8001df6:	2288      	movs	r2, #136	; 0x88
 8001df8:	0352      	lsls	r2, r2, #13
 8001dfa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	193b      	adds	r3, r7, r4
 8001dfe:	2200      	movs	r2, #0
 8001e00:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CHANGE_P_GPIO_Port, &GPIO_InitStruct);
 8001e02:	193a      	adds	r2, r7, r4
 8001e04:	2390      	movs	r3, #144	; 0x90
 8001e06:	05db      	lsls	r3, r3, #23
 8001e08:	0011      	movs	r1, r2
 8001e0a:	0018      	movs	r0, r3
 8001e0c:	f000 fb48 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C_INT_Pin */
  GPIO_InitStruct.Pin = I2C_INT_Pin;
 8001e10:	0021      	movs	r1, r4
 8001e12:	187b      	adds	r3, r7, r1
 8001e14:	2280      	movs	r2, #128	; 0x80
 8001e16:	0212      	lsls	r2, r2, #8
 8001e18:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e1a:	187b      	adds	r3, r7, r1
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	187b      	adds	r3, r7, r1
 8001e22:	2200      	movs	r2, #0
 8001e24:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(I2C_INT_GPIO_Port, &GPIO_InitStruct);
 8001e26:	187a      	adds	r2, r7, r1
 8001e28:	2390      	movs	r3, #144	; 0x90
 8001e2a:	05db      	lsls	r3, r3, #23
 8001e2c:	0011      	movs	r1, r2
 8001e2e:	0018      	movs	r0, r3
 8001e30:	f000 fb36 	bl	80024a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001e34:	2200      	movs	r2, #0
 8001e36:	2100      	movs	r1, #0
 8001e38:	2007      	movs	r0, #7
 8001e3a:	f000 faff 	bl	800243c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001e3e:	2007      	movs	r0, #7
 8001e40:	f000 fb11 	bl	8002466 <HAL_NVIC_EnableIRQ>

}
 8001e44:	46c0      	nop			; (mov r8, r8)
 8001e46:	46bd      	mov	sp, r7
 8001e48:	b009      	add	sp, #36	; 0x24
 8001e4a:	bd90      	pop	{r4, r7, pc}
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	000009ff 	.word	0x000009ff
 8001e54:	00000407 	.word	0x00000407
 8001e58:	48000400 	.word	0x48000400

08001e5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e60:	b672      	cpsid	i
}
 8001e62:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001e64:	e7fe      	b.n	8001e64 <Error_Handler+0x8>
	...

08001e68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e6e:	4b0f      	ldr	r3, [pc, #60]	; (8001eac <HAL_MspInit+0x44>)
 8001e70:	699a      	ldr	r2, [r3, #24]
 8001e72:	4b0e      	ldr	r3, [pc, #56]	; (8001eac <HAL_MspInit+0x44>)
 8001e74:	2101      	movs	r1, #1
 8001e76:	430a      	orrs	r2, r1
 8001e78:	619a      	str	r2, [r3, #24]
 8001e7a:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <HAL_MspInit+0x44>)
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	4013      	ands	r3, r2
 8001e82:	607b      	str	r3, [r7, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e86:	4b09      	ldr	r3, [pc, #36]	; (8001eac <HAL_MspInit+0x44>)
 8001e88:	69da      	ldr	r2, [r3, #28]
 8001e8a:	4b08      	ldr	r3, [pc, #32]	; (8001eac <HAL_MspInit+0x44>)
 8001e8c:	2180      	movs	r1, #128	; 0x80
 8001e8e:	0549      	lsls	r1, r1, #21
 8001e90:	430a      	orrs	r2, r1
 8001e92:	61da      	str	r2, [r3, #28]
 8001e94:	4b05      	ldr	r3, [pc, #20]	; (8001eac <HAL_MspInit+0x44>)
 8001e96:	69da      	ldr	r2, [r3, #28]
 8001e98:	2380      	movs	r3, #128	; 0x80
 8001e9a:	055b      	lsls	r3, r3, #21
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	603b      	str	r3, [r7, #0]
 8001ea0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ea2:	46c0      	nop			; (mov r8, r8)
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	b002      	add	sp, #8
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	46c0      	nop			; (mov r8, r8)
 8001eac:	40021000 	.word	0x40021000

08001eb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001eb0:	b590      	push	{r4, r7, lr}
 8001eb2:	b08b      	sub	sp, #44	; 0x2c
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb8:	2414      	movs	r4, #20
 8001eba:	193b      	adds	r3, r7, r4
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	2314      	movs	r3, #20
 8001ec0:	001a      	movs	r2, r3
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	f002 fe72 	bl	8004bac <memset>
  if(hi2c->Instance==I2C1)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a1c      	ldr	r2, [pc, #112]	; (8001f40 <HAL_I2C_MspInit+0x90>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d132      	bne.n	8001f38 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed2:	4b1c      	ldr	r3, [pc, #112]	; (8001f44 <HAL_I2C_MspInit+0x94>)
 8001ed4:	695a      	ldr	r2, [r3, #20]
 8001ed6:	4b1b      	ldr	r3, [pc, #108]	; (8001f44 <HAL_I2C_MspInit+0x94>)
 8001ed8:	2180      	movs	r1, #128	; 0x80
 8001eda:	02c9      	lsls	r1, r1, #11
 8001edc:	430a      	orrs	r2, r1
 8001ede:	615a      	str	r2, [r3, #20]
 8001ee0:	4b18      	ldr	r3, [pc, #96]	; (8001f44 <HAL_I2C_MspInit+0x94>)
 8001ee2:	695a      	ldr	r2, [r3, #20]
 8001ee4:	2380      	movs	r3, #128	; 0x80
 8001ee6:	02db      	lsls	r3, r3, #11
 8001ee8:	4013      	ands	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
 8001eec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001eee:	193b      	adds	r3, r7, r4
 8001ef0:	22c0      	movs	r2, #192	; 0xc0
 8001ef2:	0092      	lsls	r2, r2, #2
 8001ef4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ef6:	0021      	movs	r1, r4
 8001ef8:	187b      	adds	r3, r7, r1
 8001efa:	2212      	movs	r2, #18
 8001efc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001efe:	187b      	adds	r3, r7, r1
 8001f00:	2201      	movs	r2, #1
 8001f02:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f04:	187b      	adds	r3, r7, r1
 8001f06:	2203      	movs	r2, #3
 8001f08:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001f0a:	187b      	adds	r3, r7, r1
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f10:	187b      	adds	r3, r7, r1
 8001f12:	4a0d      	ldr	r2, [pc, #52]	; (8001f48 <HAL_I2C_MspInit+0x98>)
 8001f14:	0019      	movs	r1, r3
 8001f16:	0010      	movs	r0, r2
 8001f18:	f000 fac2 	bl	80024a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f1c:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <HAL_I2C_MspInit+0x94>)
 8001f1e:	69da      	ldr	r2, [r3, #28]
 8001f20:	4b08      	ldr	r3, [pc, #32]	; (8001f44 <HAL_I2C_MspInit+0x94>)
 8001f22:	2180      	movs	r1, #128	; 0x80
 8001f24:	0389      	lsls	r1, r1, #14
 8001f26:	430a      	orrs	r2, r1
 8001f28:	61da      	str	r2, [r3, #28]
 8001f2a:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <HAL_I2C_MspInit+0x94>)
 8001f2c:	69da      	ldr	r2, [r3, #28]
 8001f2e:	2380      	movs	r3, #128	; 0x80
 8001f30:	039b      	lsls	r3, r3, #14
 8001f32:	4013      	ands	r3, r2
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f38:	46c0      	nop			; (mov r8, r8)
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	b00b      	add	sp, #44	; 0x2c
 8001f3e:	bd90      	pop	{r4, r7, pc}
 8001f40:	40005400 	.word	0x40005400
 8001f44:	40021000 	.word	0x40021000
 8001f48:	48000400 	.word	0x48000400

08001f4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a0d      	ldr	r2, [pc, #52]	; (8001f90 <HAL_TIM_Base_MspInit+0x44>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d113      	bne.n	8001f86 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001f5e:	4b0d      	ldr	r3, [pc, #52]	; (8001f94 <HAL_TIM_Base_MspInit+0x48>)
 8001f60:	69da      	ldr	r2, [r3, #28]
 8001f62:	4b0c      	ldr	r3, [pc, #48]	; (8001f94 <HAL_TIM_Base_MspInit+0x48>)
 8001f64:	2110      	movs	r1, #16
 8001f66:	430a      	orrs	r2, r1
 8001f68:	61da      	str	r2, [r3, #28]
 8001f6a:	4b0a      	ldr	r3, [pc, #40]	; (8001f94 <HAL_TIM_Base_MspInit+0x48>)
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	2210      	movs	r2, #16
 8001f70:	4013      	ands	r3, r2
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8001f76:	2200      	movs	r2, #0
 8001f78:	2100      	movs	r1, #0
 8001f7a:	2011      	movs	r0, #17
 8001f7c:	f000 fa5e 	bl	800243c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001f80:	2011      	movs	r0, #17
 8001f82:	f000 fa70 	bl	8002466 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001f86:	46c0      	nop			; (mov r8, r8)
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	b004      	add	sp, #16
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	46c0      	nop			; (mov r8, r8)
 8001f90:	40001000 	.word	0x40001000
 8001f94:	40021000 	.word	0x40021000

08001f98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f98:	b590      	push	{r4, r7, lr}
 8001f9a:	b08b      	sub	sp, #44	; 0x2c
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa0:	2414      	movs	r4, #20
 8001fa2:	193b      	adds	r3, r7, r4
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	2314      	movs	r3, #20
 8001fa8:	001a      	movs	r2, r3
 8001faa:	2100      	movs	r1, #0
 8001fac:	f002 fdfe 	bl	8004bac <memset>
  if(huart->Instance==USART1)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a2e      	ldr	r2, [pc, #184]	; (8002070 <HAL_UART_MspInit+0xd8>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d156      	bne.n	8002068 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fba:	4b2e      	ldr	r3, [pc, #184]	; (8002074 <HAL_UART_MspInit+0xdc>)
 8001fbc:	699a      	ldr	r2, [r3, #24]
 8001fbe:	4b2d      	ldr	r3, [pc, #180]	; (8002074 <HAL_UART_MspInit+0xdc>)
 8001fc0:	2180      	movs	r1, #128	; 0x80
 8001fc2:	01c9      	lsls	r1, r1, #7
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	619a      	str	r2, [r3, #24]
 8001fc8:	4b2a      	ldr	r3, [pc, #168]	; (8002074 <HAL_UART_MspInit+0xdc>)
 8001fca:	699a      	ldr	r2, [r3, #24]
 8001fcc:	2380      	movs	r3, #128	; 0x80
 8001fce:	01db      	lsls	r3, r3, #7
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]
 8001fd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd6:	4b27      	ldr	r3, [pc, #156]	; (8002074 <HAL_UART_MspInit+0xdc>)
 8001fd8:	695a      	ldr	r2, [r3, #20]
 8001fda:	4b26      	ldr	r3, [pc, #152]	; (8002074 <HAL_UART_MspInit+0xdc>)
 8001fdc:	2180      	movs	r1, #128	; 0x80
 8001fde:	0289      	lsls	r1, r1, #10
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	615a      	str	r2, [r3, #20]
 8001fe4:	4b23      	ldr	r3, [pc, #140]	; (8002074 <HAL_UART_MspInit+0xdc>)
 8001fe6:	695a      	ldr	r2, [r3, #20]
 8001fe8:	2380      	movs	r3, #128	; 0x80
 8001fea:	029b      	lsls	r3, r3, #10
 8001fec:	4013      	ands	r3, r2
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff2:	4b20      	ldr	r3, [pc, #128]	; (8002074 <HAL_UART_MspInit+0xdc>)
 8001ff4:	695a      	ldr	r2, [r3, #20]
 8001ff6:	4b1f      	ldr	r3, [pc, #124]	; (8002074 <HAL_UART_MspInit+0xdc>)
 8001ff8:	2180      	movs	r1, #128	; 0x80
 8001ffa:	02c9      	lsls	r1, r1, #11
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	615a      	str	r2, [r3, #20]
 8002000:	4b1c      	ldr	r3, [pc, #112]	; (8002074 <HAL_UART_MspInit+0xdc>)
 8002002:	695a      	ldr	r2, [r3, #20]
 8002004:	2380      	movs	r3, #128	; 0x80
 8002006:	02db      	lsls	r3, r3, #11
 8002008:	4013      	ands	r3, r2
 800200a:	60bb      	str	r3, [r7, #8]
 800200c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA12     ------> USART1_DE
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800200e:	193b      	adds	r3, r7, r4
 8002010:	2280      	movs	r2, #128	; 0x80
 8002012:	0152      	lsls	r2, r2, #5
 8002014:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002016:	193b      	adds	r3, r7, r4
 8002018:	2202      	movs	r2, #2
 800201a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201c:	193b      	adds	r3, r7, r4
 800201e:	2200      	movs	r2, #0
 8002020:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002022:	193b      	adds	r3, r7, r4
 8002024:	2203      	movs	r2, #3
 8002026:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002028:	193b      	adds	r3, r7, r4
 800202a:	2201      	movs	r2, #1
 800202c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800202e:	193a      	adds	r2, r7, r4
 8002030:	2390      	movs	r3, #144	; 0x90
 8002032:	05db      	lsls	r3, r3, #23
 8002034:	0011      	movs	r1, r2
 8002036:	0018      	movs	r0, r3
 8002038:	f000 fa32 	bl	80024a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800203c:	0021      	movs	r1, r4
 800203e:	187b      	adds	r3, r7, r1
 8002040:	22c0      	movs	r2, #192	; 0xc0
 8002042:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002044:	187b      	adds	r3, r7, r1
 8002046:	2202      	movs	r2, #2
 8002048:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204a:	187b      	adds	r3, r7, r1
 800204c:	2200      	movs	r2, #0
 800204e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002050:	187b      	adds	r3, r7, r1
 8002052:	2203      	movs	r2, #3
 8002054:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8002056:	187b      	adds	r3, r7, r1
 8002058:	2200      	movs	r2, #0
 800205a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800205c:	187b      	adds	r3, r7, r1
 800205e:	4a06      	ldr	r2, [pc, #24]	; (8002078 <HAL_UART_MspInit+0xe0>)
 8002060:	0019      	movs	r1, r3
 8002062:	0010      	movs	r0, r2
 8002064:	f000 fa1c 	bl	80024a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002068:	46c0      	nop			; (mov r8, r8)
 800206a:	46bd      	mov	sp, r7
 800206c:	b00b      	add	sp, #44	; 0x2c
 800206e:	bd90      	pop	{r4, r7, pc}
 8002070:	40013800 	.word	0x40013800
 8002074:	40021000 	.word	0x40021000
 8002078:	48000400 	.word	0x48000400

0800207c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002080:	e7fe      	b.n	8002080 <NMI_Handler+0x4>

08002082 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002086:	e7fe      	b.n	8002086 <HardFault_Handler+0x4>

08002088 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800208c:	46c0      	nop			; (mov r8, r8)
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002096:	46c0      	nop			; (mov r8, r8)
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020a0:	f000 f8e0 	bl	8002264 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020a4:	46c0      	nop			; (mov r8, r8)
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CHANGE_P_Pin);
 80020ae:	2380      	movs	r3, #128	; 0x80
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	0018      	movs	r0, r3
 80020b4:	f000 fb9e 	bl	80027f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S_PRV_Pin);
 80020b8:	2380      	movs	r3, #128	; 0x80
 80020ba:	011b      	lsls	r3, r3, #4
 80020bc:	0018      	movs	r0, r3
 80020be:	f000 fb99 	bl	80027f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S_NEXT_Pin);
 80020c2:	2380      	movs	r3, #128	; 0x80
 80020c4:	015b      	lsls	r3, r3, #5
 80020c6:	0018      	movs	r0, r3
 80020c8:	f000 fb94 	bl	80027f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DEPTH_Pin);
 80020cc:	2380      	movs	r3, #128	; 0x80
 80020ce:	019b      	lsls	r3, r3, #6
 80020d0:	0018      	movs	r0, r3
 80020d2:	f000 fb8f 	bl	80027f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IR_N_Pin);
 80020d6:	2380      	movs	r3, #128	; 0x80
 80020d8:	01db      	lsls	r3, r3, #7
 80020da:	0018      	movs	r0, r3
 80020dc:	f000 fb8a 	bl	80027f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CHANGE_N_Pin);
 80020e0:	2380      	movs	r3, #128	; 0x80
 80020e2:	021b      	lsls	r3, r3, #8
 80020e4:	0018      	movs	r0, r3
 80020e6:	f000 fb85 	bl	80027f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80020ea:	46c0      	nop			; (mov r8, r8)
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80020f4:	4b03      	ldr	r3, [pc, #12]	; (8002104 <TIM6_IRQHandler+0x14>)
 80020f6:	0018      	movs	r0, r3
 80020f8:	f001 ff50 	bl	8003f9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80020fc:	46c0      	nop			; (mov r8, r8)
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	46c0      	nop			; (mov r8, r8)
 8002104:	2000010c 	.word	0x2000010c

08002108 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002110:	4a14      	ldr	r2, [pc, #80]	; (8002164 <_sbrk+0x5c>)
 8002112:	4b15      	ldr	r3, [pc, #84]	; (8002168 <_sbrk+0x60>)
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800211c:	4b13      	ldr	r3, [pc, #76]	; (800216c <_sbrk+0x64>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d102      	bne.n	800212a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002124:	4b11      	ldr	r3, [pc, #68]	; (800216c <_sbrk+0x64>)
 8002126:	4a12      	ldr	r2, [pc, #72]	; (8002170 <_sbrk+0x68>)
 8002128:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800212a:	4b10      	ldr	r3, [pc, #64]	; (800216c <_sbrk+0x64>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	18d3      	adds	r3, r2, r3
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	429a      	cmp	r2, r3
 8002136:	d207      	bcs.n	8002148 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002138:	f002 fd0e 	bl	8004b58 <__errno>
 800213c:	0003      	movs	r3, r0
 800213e:	220c      	movs	r2, #12
 8002140:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002142:	2301      	movs	r3, #1
 8002144:	425b      	negs	r3, r3
 8002146:	e009      	b.n	800215c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002148:	4b08      	ldr	r3, [pc, #32]	; (800216c <_sbrk+0x64>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800214e:	4b07      	ldr	r3, [pc, #28]	; (800216c <_sbrk+0x64>)
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	18d2      	adds	r2, r2, r3
 8002156:	4b05      	ldr	r3, [pc, #20]	; (800216c <_sbrk+0x64>)
 8002158:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800215a:	68fb      	ldr	r3, [r7, #12]
}
 800215c:	0018      	movs	r0, r3
 800215e:	46bd      	mov	sp, r7
 8002160:	b006      	add	sp, #24
 8002162:	bd80      	pop	{r7, pc}
 8002164:	20002000 	.word	0x20002000
 8002168:	00000400 	.word	0x00000400
 800216c:	200001dc 	.word	0x200001dc
 8002170:	200001f8 	.word	0x200001f8

08002174 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002178:	46c0      	nop			; (mov r8, r8)
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
	...

08002180 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002180:	480d      	ldr	r0, [pc, #52]	; (80021b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002182:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002184:	480d      	ldr	r0, [pc, #52]	; (80021bc <LoopForever+0x6>)
  ldr r1, =_edata
 8002186:	490e      	ldr	r1, [pc, #56]	; (80021c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002188:	4a0e      	ldr	r2, [pc, #56]	; (80021c4 <LoopForever+0xe>)
  movs r3, #0
 800218a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800218c:	e002      	b.n	8002194 <LoopCopyDataInit>

0800218e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800218e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002190:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002192:	3304      	adds	r3, #4

08002194 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002194:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002196:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002198:	d3f9      	bcc.n	800218e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800219a:	4a0b      	ldr	r2, [pc, #44]	; (80021c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800219c:	4c0b      	ldr	r4, [pc, #44]	; (80021cc <LoopForever+0x16>)
  movs r3, #0
 800219e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021a0:	e001      	b.n	80021a6 <LoopFillZerobss>

080021a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021a4:	3204      	adds	r2, #4

080021a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021a8:	d3fb      	bcc.n	80021a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80021aa:	f7ff ffe3 	bl	8002174 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80021ae:	f002 fcd9 	bl	8004b64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021b2:	f7ff fae3 	bl	800177c <main>

080021b6 <LoopForever>:

LoopForever:
    b LoopForever
 80021b6:	e7fe      	b.n	80021b6 <LoopForever>
  ldr   r0, =_estack
 80021b8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80021bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021c0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80021c4:	080056fc 	.word	0x080056fc
  ldr r2, =_sbss
 80021c8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80021cc:	200001f4 	.word	0x200001f4

080021d0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021d0:	e7fe      	b.n	80021d0 <ADC1_IRQHandler>
	...

080021d4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021d8:	4b07      	ldr	r3, [pc, #28]	; (80021f8 <HAL_Init+0x24>)
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <HAL_Init+0x24>)
 80021de:	2110      	movs	r1, #16
 80021e0:	430a      	orrs	r2, r1
 80021e2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80021e4:	2003      	movs	r0, #3
 80021e6:	f000 f809 	bl	80021fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021ea:	f7ff fe3d 	bl	8001e68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	0018      	movs	r0, r3
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	40022000 	.word	0x40022000

080021fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021fc:	b590      	push	{r4, r7, lr}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002204:	4b14      	ldr	r3, [pc, #80]	; (8002258 <HAL_InitTick+0x5c>)
 8002206:	681c      	ldr	r4, [r3, #0]
 8002208:	4b14      	ldr	r3, [pc, #80]	; (800225c <HAL_InitTick+0x60>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	0019      	movs	r1, r3
 800220e:	23fa      	movs	r3, #250	; 0xfa
 8002210:	0098      	lsls	r0, r3, #2
 8002212:	f7fd ff83 	bl	800011c <__udivsi3>
 8002216:	0003      	movs	r3, r0
 8002218:	0019      	movs	r1, r3
 800221a:	0020      	movs	r0, r4
 800221c:	f7fd ff7e 	bl	800011c <__udivsi3>
 8002220:	0003      	movs	r3, r0
 8002222:	0018      	movs	r0, r3
 8002224:	f000 f92f 	bl	8002486 <HAL_SYSTICK_Config>
 8002228:	1e03      	subs	r3, r0, #0
 800222a:	d001      	beq.n	8002230 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e00f      	b.n	8002250 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b03      	cmp	r3, #3
 8002234:	d80b      	bhi.n	800224e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002236:	6879      	ldr	r1, [r7, #4]
 8002238:	2301      	movs	r3, #1
 800223a:	425b      	negs	r3, r3
 800223c:	2200      	movs	r2, #0
 800223e:	0018      	movs	r0, r3
 8002240:	f000 f8fc 	bl	800243c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002244:	4b06      	ldr	r3, [pc, #24]	; (8002260 <HAL_InitTick+0x64>)
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800224a:	2300      	movs	r3, #0
 800224c:	e000      	b.n	8002250 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
}
 8002250:	0018      	movs	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	b003      	add	sp, #12
 8002256:	bd90      	pop	{r4, r7, pc}
 8002258:	2000000c 	.word	0x2000000c
 800225c:	20000014 	.word	0x20000014
 8002260:	20000010 	.word	0x20000010

08002264 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002268:	4b05      	ldr	r3, [pc, #20]	; (8002280 <HAL_IncTick+0x1c>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	001a      	movs	r2, r3
 800226e:	4b05      	ldr	r3, [pc, #20]	; (8002284 <HAL_IncTick+0x20>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	18d2      	adds	r2, r2, r3
 8002274:	4b03      	ldr	r3, [pc, #12]	; (8002284 <HAL_IncTick+0x20>)
 8002276:	601a      	str	r2, [r3, #0]
}
 8002278:	46c0      	nop			; (mov r8, r8)
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	46c0      	nop			; (mov r8, r8)
 8002280:	20000014 	.word	0x20000014
 8002284:	200001e0 	.word	0x200001e0

08002288 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  return uwTick;
 800228c:	4b02      	ldr	r3, [pc, #8]	; (8002298 <HAL_GetTick+0x10>)
 800228e:	681b      	ldr	r3, [r3, #0]
}
 8002290:	0018      	movs	r0, r3
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	46c0      	nop			; (mov r8, r8)
 8002298:	200001e0 	.word	0x200001e0

0800229c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022a4:	f7ff fff0 	bl	8002288 <HAL_GetTick>
 80022a8:	0003      	movs	r3, r0
 80022aa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	3301      	adds	r3, #1
 80022b4:	d005      	beq.n	80022c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022b6:	4b0a      	ldr	r3, [pc, #40]	; (80022e0 <HAL_Delay+0x44>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	001a      	movs	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	189b      	adds	r3, r3, r2
 80022c0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80022c2:	46c0      	nop			; (mov r8, r8)
 80022c4:	f7ff ffe0 	bl	8002288 <HAL_GetTick>
 80022c8:	0002      	movs	r2, r0
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d8f7      	bhi.n	80022c4 <HAL_Delay+0x28>
  {
  }
}
 80022d4:	46c0      	nop			; (mov r8, r8)
 80022d6:	46c0      	nop			; (mov r8, r8)
 80022d8:	46bd      	mov	sp, r7
 80022da:	b004      	add	sp, #16
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	46c0      	nop			; (mov r8, r8)
 80022e0:	20000014 	.word	0x20000014

080022e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	0002      	movs	r2, r0
 80022ec:	1dfb      	adds	r3, r7, #7
 80022ee:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80022f0:	1dfb      	adds	r3, r7, #7
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	2b7f      	cmp	r3, #127	; 0x7f
 80022f6:	d809      	bhi.n	800230c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022f8:	1dfb      	adds	r3, r7, #7
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	001a      	movs	r2, r3
 80022fe:	231f      	movs	r3, #31
 8002300:	401a      	ands	r2, r3
 8002302:	4b04      	ldr	r3, [pc, #16]	; (8002314 <__NVIC_EnableIRQ+0x30>)
 8002304:	2101      	movs	r1, #1
 8002306:	4091      	lsls	r1, r2
 8002308:	000a      	movs	r2, r1
 800230a:	601a      	str	r2, [r3, #0]
  }
}
 800230c:	46c0      	nop			; (mov r8, r8)
 800230e:	46bd      	mov	sp, r7
 8002310:	b002      	add	sp, #8
 8002312:	bd80      	pop	{r7, pc}
 8002314:	e000e100 	.word	0xe000e100

08002318 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002318:	b590      	push	{r4, r7, lr}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	0002      	movs	r2, r0
 8002320:	6039      	str	r1, [r7, #0]
 8002322:	1dfb      	adds	r3, r7, #7
 8002324:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002326:	1dfb      	adds	r3, r7, #7
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	2b7f      	cmp	r3, #127	; 0x7f
 800232c:	d828      	bhi.n	8002380 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800232e:	4a2f      	ldr	r2, [pc, #188]	; (80023ec <__NVIC_SetPriority+0xd4>)
 8002330:	1dfb      	adds	r3, r7, #7
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	b25b      	sxtb	r3, r3
 8002336:	089b      	lsrs	r3, r3, #2
 8002338:	33c0      	adds	r3, #192	; 0xc0
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	589b      	ldr	r3, [r3, r2]
 800233e:	1dfa      	adds	r2, r7, #7
 8002340:	7812      	ldrb	r2, [r2, #0]
 8002342:	0011      	movs	r1, r2
 8002344:	2203      	movs	r2, #3
 8002346:	400a      	ands	r2, r1
 8002348:	00d2      	lsls	r2, r2, #3
 800234a:	21ff      	movs	r1, #255	; 0xff
 800234c:	4091      	lsls	r1, r2
 800234e:	000a      	movs	r2, r1
 8002350:	43d2      	mvns	r2, r2
 8002352:	401a      	ands	r2, r3
 8002354:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	019b      	lsls	r3, r3, #6
 800235a:	22ff      	movs	r2, #255	; 0xff
 800235c:	401a      	ands	r2, r3
 800235e:	1dfb      	adds	r3, r7, #7
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	0018      	movs	r0, r3
 8002364:	2303      	movs	r3, #3
 8002366:	4003      	ands	r3, r0
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800236c:	481f      	ldr	r0, [pc, #124]	; (80023ec <__NVIC_SetPriority+0xd4>)
 800236e:	1dfb      	adds	r3, r7, #7
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	b25b      	sxtb	r3, r3
 8002374:	089b      	lsrs	r3, r3, #2
 8002376:	430a      	orrs	r2, r1
 8002378:	33c0      	adds	r3, #192	; 0xc0
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800237e:	e031      	b.n	80023e4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002380:	4a1b      	ldr	r2, [pc, #108]	; (80023f0 <__NVIC_SetPriority+0xd8>)
 8002382:	1dfb      	adds	r3, r7, #7
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	0019      	movs	r1, r3
 8002388:	230f      	movs	r3, #15
 800238a:	400b      	ands	r3, r1
 800238c:	3b08      	subs	r3, #8
 800238e:	089b      	lsrs	r3, r3, #2
 8002390:	3306      	adds	r3, #6
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	18d3      	adds	r3, r2, r3
 8002396:	3304      	adds	r3, #4
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	1dfa      	adds	r2, r7, #7
 800239c:	7812      	ldrb	r2, [r2, #0]
 800239e:	0011      	movs	r1, r2
 80023a0:	2203      	movs	r2, #3
 80023a2:	400a      	ands	r2, r1
 80023a4:	00d2      	lsls	r2, r2, #3
 80023a6:	21ff      	movs	r1, #255	; 0xff
 80023a8:	4091      	lsls	r1, r2
 80023aa:	000a      	movs	r2, r1
 80023ac:	43d2      	mvns	r2, r2
 80023ae:	401a      	ands	r2, r3
 80023b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	019b      	lsls	r3, r3, #6
 80023b6:	22ff      	movs	r2, #255	; 0xff
 80023b8:	401a      	ands	r2, r3
 80023ba:	1dfb      	adds	r3, r7, #7
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	0018      	movs	r0, r3
 80023c0:	2303      	movs	r3, #3
 80023c2:	4003      	ands	r3, r0
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023c8:	4809      	ldr	r0, [pc, #36]	; (80023f0 <__NVIC_SetPriority+0xd8>)
 80023ca:	1dfb      	adds	r3, r7, #7
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	001c      	movs	r4, r3
 80023d0:	230f      	movs	r3, #15
 80023d2:	4023      	ands	r3, r4
 80023d4:	3b08      	subs	r3, #8
 80023d6:	089b      	lsrs	r3, r3, #2
 80023d8:	430a      	orrs	r2, r1
 80023da:	3306      	adds	r3, #6
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	18c3      	adds	r3, r0, r3
 80023e0:	3304      	adds	r3, #4
 80023e2:	601a      	str	r2, [r3, #0]
}
 80023e4:	46c0      	nop			; (mov r8, r8)
 80023e6:	46bd      	mov	sp, r7
 80023e8:	b003      	add	sp, #12
 80023ea:	bd90      	pop	{r4, r7, pc}
 80023ec:	e000e100 	.word	0xe000e100
 80023f0:	e000ed00 	.word	0xe000ed00

080023f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	1e5a      	subs	r2, r3, #1
 8002400:	2380      	movs	r3, #128	; 0x80
 8002402:	045b      	lsls	r3, r3, #17
 8002404:	429a      	cmp	r2, r3
 8002406:	d301      	bcc.n	800240c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002408:	2301      	movs	r3, #1
 800240a:	e010      	b.n	800242e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800240c:	4b0a      	ldr	r3, [pc, #40]	; (8002438 <SysTick_Config+0x44>)
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	3a01      	subs	r2, #1
 8002412:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002414:	2301      	movs	r3, #1
 8002416:	425b      	negs	r3, r3
 8002418:	2103      	movs	r1, #3
 800241a:	0018      	movs	r0, r3
 800241c:	f7ff ff7c 	bl	8002318 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002420:	4b05      	ldr	r3, [pc, #20]	; (8002438 <SysTick_Config+0x44>)
 8002422:	2200      	movs	r2, #0
 8002424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002426:	4b04      	ldr	r3, [pc, #16]	; (8002438 <SysTick_Config+0x44>)
 8002428:	2207      	movs	r2, #7
 800242a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800242c:	2300      	movs	r3, #0
}
 800242e:	0018      	movs	r0, r3
 8002430:	46bd      	mov	sp, r7
 8002432:	b002      	add	sp, #8
 8002434:	bd80      	pop	{r7, pc}
 8002436:	46c0      	nop			; (mov r8, r8)
 8002438:	e000e010 	.word	0xe000e010

0800243c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	60b9      	str	r1, [r7, #8]
 8002444:	607a      	str	r2, [r7, #4]
 8002446:	210f      	movs	r1, #15
 8002448:	187b      	adds	r3, r7, r1
 800244a:	1c02      	adds	r2, r0, #0
 800244c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800244e:	68ba      	ldr	r2, [r7, #8]
 8002450:	187b      	adds	r3, r7, r1
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	b25b      	sxtb	r3, r3
 8002456:	0011      	movs	r1, r2
 8002458:	0018      	movs	r0, r3
 800245a:	f7ff ff5d 	bl	8002318 <__NVIC_SetPriority>
}
 800245e:	46c0      	nop			; (mov r8, r8)
 8002460:	46bd      	mov	sp, r7
 8002462:	b004      	add	sp, #16
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b082      	sub	sp, #8
 800246a:	af00      	add	r7, sp, #0
 800246c:	0002      	movs	r2, r0
 800246e:	1dfb      	adds	r3, r7, #7
 8002470:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002472:	1dfb      	adds	r3, r7, #7
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	b25b      	sxtb	r3, r3
 8002478:	0018      	movs	r0, r3
 800247a:	f7ff ff33 	bl	80022e4 <__NVIC_EnableIRQ>
}
 800247e:	46c0      	nop			; (mov r8, r8)
 8002480:	46bd      	mov	sp, r7
 8002482:	b002      	add	sp, #8
 8002484:	bd80      	pop	{r7, pc}

08002486 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b082      	sub	sp, #8
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	0018      	movs	r0, r3
 8002492:	f7ff ffaf 	bl	80023f4 <SysTick_Config>
 8002496:	0003      	movs	r3, r0
}
 8002498:	0018      	movs	r0, r3
 800249a:	46bd      	mov	sp, r7
 800249c:	b002      	add	sp, #8
 800249e:	bd80      	pop	{r7, pc}

080024a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024aa:	2300      	movs	r3, #0
 80024ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024ae:	e14f      	b.n	8002750 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2101      	movs	r1, #1
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	4091      	lsls	r1, r2
 80024ba:	000a      	movs	r2, r1
 80024bc:	4013      	ands	r3, r2
 80024be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d100      	bne.n	80024c8 <HAL_GPIO_Init+0x28>
 80024c6:	e140      	b.n	800274a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	2203      	movs	r2, #3
 80024ce:	4013      	ands	r3, r2
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d005      	beq.n	80024e0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2203      	movs	r2, #3
 80024da:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d130      	bne.n	8002542 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	2203      	movs	r2, #3
 80024ec:	409a      	lsls	r2, r3
 80024ee:	0013      	movs	r3, r2
 80024f0:	43da      	mvns	r2, r3
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	4013      	ands	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	68da      	ldr	r2, [r3, #12]
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	409a      	lsls	r2, r3
 8002502:	0013      	movs	r3, r2
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	4313      	orrs	r3, r2
 8002508:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002516:	2201      	movs	r2, #1
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	409a      	lsls	r2, r3
 800251c:	0013      	movs	r3, r2
 800251e:	43da      	mvns	r2, r3
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	4013      	ands	r3, r2
 8002524:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	091b      	lsrs	r3, r3, #4
 800252c:	2201      	movs	r2, #1
 800252e:	401a      	ands	r2, r3
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	409a      	lsls	r2, r3
 8002534:	0013      	movs	r3, r2
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	4313      	orrs	r3, r2
 800253a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2203      	movs	r2, #3
 8002548:	4013      	ands	r3, r2
 800254a:	2b03      	cmp	r3, #3
 800254c:	d017      	beq.n	800257e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	2203      	movs	r2, #3
 800255a:	409a      	lsls	r2, r3
 800255c:	0013      	movs	r3, r2
 800255e:	43da      	mvns	r2, r3
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	4013      	ands	r3, r2
 8002564:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	689a      	ldr	r2, [r3, #8]
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	409a      	lsls	r2, r3
 8002570:	0013      	movs	r3, r2
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	4313      	orrs	r3, r2
 8002576:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2203      	movs	r2, #3
 8002584:	4013      	ands	r3, r2
 8002586:	2b02      	cmp	r3, #2
 8002588:	d123      	bne.n	80025d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	08da      	lsrs	r2, r3, #3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	3208      	adds	r2, #8
 8002592:	0092      	lsls	r2, r2, #2
 8002594:	58d3      	ldr	r3, [r2, r3]
 8002596:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	2207      	movs	r2, #7
 800259c:	4013      	ands	r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	220f      	movs	r2, #15
 80025a2:	409a      	lsls	r2, r3
 80025a4:	0013      	movs	r3, r2
 80025a6:	43da      	mvns	r2, r3
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	4013      	ands	r3, r2
 80025ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	691a      	ldr	r2, [r3, #16]
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	2107      	movs	r1, #7
 80025b6:	400b      	ands	r3, r1
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	409a      	lsls	r2, r3
 80025bc:	0013      	movs	r3, r2
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	08da      	lsrs	r2, r3, #3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3208      	adds	r2, #8
 80025cc:	0092      	lsls	r2, r2, #2
 80025ce:	6939      	ldr	r1, [r7, #16]
 80025d0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	2203      	movs	r2, #3
 80025de:	409a      	lsls	r2, r3
 80025e0:	0013      	movs	r3, r2
 80025e2:	43da      	mvns	r2, r3
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	4013      	ands	r3, r2
 80025e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	2203      	movs	r2, #3
 80025f0:	401a      	ands	r2, r3
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	409a      	lsls	r2, r3
 80025f8:	0013      	movs	r3, r2
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685a      	ldr	r2, [r3, #4]
 800260a:	23c0      	movs	r3, #192	; 0xc0
 800260c:	029b      	lsls	r3, r3, #10
 800260e:	4013      	ands	r3, r2
 8002610:	d100      	bne.n	8002614 <HAL_GPIO_Init+0x174>
 8002612:	e09a      	b.n	800274a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002614:	4b54      	ldr	r3, [pc, #336]	; (8002768 <HAL_GPIO_Init+0x2c8>)
 8002616:	699a      	ldr	r2, [r3, #24]
 8002618:	4b53      	ldr	r3, [pc, #332]	; (8002768 <HAL_GPIO_Init+0x2c8>)
 800261a:	2101      	movs	r1, #1
 800261c:	430a      	orrs	r2, r1
 800261e:	619a      	str	r2, [r3, #24]
 8002620:	4b51      	ldr	r3, [pc, #324]	; (8002768 <HAL_GPIO_Init+0x2c8>)
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	2201      	movs	r2, #1
 8002626:	4013      	ands	r3, r2
 8002628:	60bb      	str	r3, [r7, #8]
 800262a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800262c:	4a4f      	ldr	r2, [pc, #316]	; (800276c <HAL_GPIO_Init+0x2cc>)
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	089b      	lsrs	r3, r3, #2
 8002632:	3302      	adds	r3, #2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	589b      	ldr	r3, [r3, r2]
 8002638:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	2203      	movs	r2, #3
 800263e:	4013      	ands	r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	220f      	movs	r2, #15
 8002644:	409a      	lsls	r2, r3
 8002646:	0013      	movs	r3, r2
 8002648:	43da      	mvns	r2, r3
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	4013      	ands	r3, r2
 800264e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	2390      	movs	r3, #144	; 0x90
 8002654:	05db      	lsls	r3, r3, #23
 8002656:	429a      	cmp	r2, r3
 8002658:	d013      	beq.n	8002682 <HAL_GPIO_Init+0x1e2>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a44      	ldr	r2, [pc, #272]	; (8002770 <HAL_GPIO_Init+0x2d0>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d00d      	beq.n	800267e <HAL_GPIO_Init+0x1de>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a43      	ldr	r2, [pc, #268]	; (8002774 <HAL_GPIO_Init+0x2d4>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d007      	beq.n	800267a <HAL_GPIO_Init+0x1da>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a42      	ldr	r2, [pc, #264]	; (8002778 <HAL_GPIO_Init+0x2d8>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d101      	bne.n	8002676 <HAL_GPIO_Init+0x1d6>
 8002672:	2303      	movs	r3, #3
 8002674:	e006      	b.n	8002684 <HAL_GPIO_Init+0x1e4>
 8002676:	2305      	movs	r3, #5
 8002678:	e004      	b.n	8002684 <HAL_GPIO_Init+0x1e4>
 800267a:	2302      	movs	r3, #2
 800267c:	e002      	b.n	8002684 <HAL_GPIO_Init+0x1e4>
 800267e:	2301      	movs	r3, #1
 8002680:	e000      	b.n	8002684 <HAL_GPIO_Init+0x1e4>
 8002682:	2300      	movs	r3, #0
 8002684:	697a      	ldr	r2, [r7, #20]
 8002686:	2103      	movs	r1, #3
 8002688:	400a      	ands	r2, r1
 800268a:	0092      	lsls	r2, r2, #2
 800268c:	4093      	lsls	r3, r2
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	4313      	orrs	r3, r2
 8002692:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002694:	4935      	ldr	r1, [pc, #212]	; (800276c <HAL_GPIO_Init+0x2cc>)
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	089b      	lsrs	r3, r3, #2
 800269a:	3302      	adds	r3, #2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026a2:	4b36      	ldr	r3, [pc, #216]	; (800277c <HAL_GPIO_Init+0x2dc>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	43da      	mvns	r2, r3
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	4013      	ands	r3, r2
 80026b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685a      	ldr	r2, [r3, #4]
 80026b6:	2380      	movs	r3, #128	; 0x80
 80026b8:	025b      	lsls	r3, r3, #9
 80026ba:	4013      	ands	r3, r2
 80026bc:	d003      	beq.n	80026c6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80026c6:	4b2d      	ldr	r3, [pc, #180]	; (800277c <HAL_GPIO_Init+0x2dc>)
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80026cc:	4b2b      	ldr	r3, [pc, #172]	; (800277c <HAL_GPIO_Init+0x2dc>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	43da      	mvns	r2, r3
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	4013      	ands	r3, r2
 80026da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	2380      	movs	r3, #128	; 0x80
 80026e2:	029b      	lsls	r3, r3, #10
 80026e4:	4013      	ands	r3, r2
 80026e6:	d003      	beq.n	80026f0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80026f0:	4b22      	ldr	r3, [pc, #136]	; (800277c <HAL_GPIO_Init+0x2dc>)
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026f6:	4b21      	ldr	r3, [pc, #132]	; (800277c <HAL_GPIO_Init+0x2dc>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	43da      	mvns	r2, r3
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	4013      	ands	r3, r2
 8002704:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	2380      	movs	r3, #128	; 0x80
 800270c:	035b      	lsls	r3, r3, #13
 800270e:	4013      	ands	r3, r2
 8002710:	d003      	beq.n	800271a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	4313      	orrs	r3, r2
 8002718:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800271a:	4b18      	ldr	r3, [pc, #96]	; (800277c <HAL_GPIO_Init+0x2dc>)
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002720:	4b16      	ldr	r3, [pc, #88]	; (800277c <HAL_GPIO_Init+0x2dc>)
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	43da      	mvns	r2, r3
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	4013      	ands	r3, r2
 800272e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	2380      	movs	r3, #128	; 0x80
 8002736:	039b      	lsls	r3, r3, #14
 8002738:	4013      	ands	r3, r2
 800273a:	d003      	beq.n	8002744 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	4313      	orrs	r3, r2
 8002742:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002744:	4b0d      	ldr	r3, [pc, #52]	; (800277c <HAL_GPIO_Init+0x2dc>)
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	3301      	adds	r3, #1
 800274e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	40da      	lsrs	r2, r3
 8002758:	1e13      	subs	r3, r2, #0
 800275a:	d000      	beq.n	800275e <HAL_GPIO_Init+0x2be>
 800275c:	e6a8      	b.n	80024b0 <HAL_GPIO_Init+0x10>
  } 
}
 800275e:	46c0      	nop			; (mov r8, r8)
 8002760:	46c0      	nop			; (mov r8, r8)
 8002762:	46bd      	mov	sp, r7
 8002764:	b006      	add	sp, #24
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40021000 	.word	0x40021000
 800276c:	40010000 	.word	0x40010000
 8002770:	48000400 	.word	0x48000400
 8002774:	48000800 	.word	0x48000800
 8002778:	48000c00 	.word	0x48000c00
 800277c:	40010400 	.word	0x40010400

08002780 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	000a      	movs	r2, r1
 800278a:	1cbb      	adds	r3, r7, #2
 800278c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	1cba      	adds	r2, r7, #2
 8002794:	8812      	ldrh	r2, [r2, #0]
 8002796:	4013      	ands	r3, r2
 8002798:	d004      	beq.n	80027a4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800279a:	230f      	movs	r3, #15
 800279c:	18fb      	adds	r3, r7, r3
 800279e:	2201      	movs	r2, #1
 80027a0:	701a      	strb	r2, [r3, #0]
 80027a2:	e003      	b.n	80027ac <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027a4:	230f      	movs	r3, #15
 80027a6:	18fb      	adds	r3, r7, r3
 80027a8:	2200      	movs	r2, #0
 80027aa:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80027ac:	230f      	movs	r3, #15
 80027ae:	18fb      	adds	r3, r7, r3
 80027b0:	781b      	ldrb	r3, [r3, #0]
  }
 80027b2:	0018      	movs	r0, r3
 80027b4:	46bd      	mov	sp, r7
 80027b6:	b004      	add	sp, #16
 80027b8:	bd80      	pop	{r7, pc}

080027ba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b082      	sub	sp, #8
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
 80027c2:	0008      	movs	r0, r1
 80027c4:	0011      	movs	r1, r2
 80027c6:	1cbb      	adds	r3, r7, #2
 80027c8:	1c02      	adds	r2, r0, #0
 80027ca:	801a      	strh	r2, [r3, #0]
 80027cc:	1c7b      	adds	r3, r7, #1
 80027ce:	1c0a      	adds	r2, r1, #0
 80027d0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027d2:	1c7b      	adds	r3, r7, #1
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d004      	beq.n	80027e4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027da:	1cbb      	adds	r3, r7, #2
 80027dc:	881a      	ldrh	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027e2:	e003      	b.n	80027ec <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027e4:	1cbb      	adds	r3, r7, #2
 80027e6:	881a      	ldrh	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027ec:	46c0      	nop			; (mov r8, r8)
 80027ee:	46bd      	mov	sp, r7
 80027f0:	b002      	add	sp, #8
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	0002      	movs	r2, r0
 80027fc:	1dbb      	adds	r3, r7, #6
 80027fe:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002800:	4b09      	ldr	r3, [pc, #36]	; (8002828 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	1dba      	adds	r2, r7, #6
 8002806:	8812      	ldrh	r2, [r2, #0]
 8002808:	4013      	ands	r3, r2
 800280a:	d008      	beq.n	800281e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800280c:	4b06      	ldr	r3, [pc, #24]	; (8002828 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800280e:	1dba      	adds	r2, r7, #6
 8002810:	8812      	ldrh	r2, [r2, #0]
 8002812:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002814:	1dbb      	adds	r3, r7, #6
 8002816:	881b      	ldrh	r3, [r3, #0]
 8002818:	0018      	movs	r0, r3
 800281a:	f7fe ff21 	bl	8001660 <HAL_GPIO_EXTI_Callback>
  }
}
 800281e:	46c0      	nop			; (mov r8, r8)
 8002820:	46bd      	mov	sp, r7
 8002822:	b002      	add	sp, #8
 8002824:	bd80      	pop	{r7, pc}
 8002826:	46c0      	nop			; (mov r8, r8)
 8002828:	40010400 	.word	0x40010400

0800282c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e082      	b.n	8002944 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2241      	movs	r2, #65	; 0x41
 8002842:	5c9b      	ldrb	r3, [r3, r2]
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d107      	bne.n	800285a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2240      	movs	r2, #64	; 0x40
 800284e:	2100      	movs	r1, #0
 8002850:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	0018      	movs	r0, r3
 8002856:	f7ff fb2b 	bl	8001eb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2241      	movs	r2, #65	; 0x41
 800285e:	2124      	movs	r1, #36	; 0x24
 8002860:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2101      	movs	r1, #1
 800286e:	438a      	bics	r2, r1
 8002870:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4934      	ldr	r1, [pc, #208]	; (800294c <HAL_I2C_Init+0x120>)
 800287c:	400a      	ands	r2, r1
 800287e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689a      	ldr	r2, [r3, #8]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4931      	ldr	r1, [pc, #196]	; (8002950 <HAL_I2C_Init+0x124>)
 800288c:	400a      	ands	r2, r1
 800288e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d108      	bne.n	80028aa <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2180      	movs	r1, #128	; 0x80
 80028a2:	0209      	lsls	r1, r1, #8
 80028a4:	430a      	orrs	r2, r1
 80028a6:	609a      	str	r2, [r3, #8]
 80028a8:	e007      	b.n	80028ba <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	689a      	ldr	r2, [r3, #8]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2184      	movs	r1, #132	; 0x84
 80028b4:	0209      	lsls	r1, r1, #8
 80028b6:	430a      	orrs	r2, r1
 80028b8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d104      	bne.n	80028cc <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2280      	movs	r2, #128	; 0x80
 80028c8:	0112      	lsls	r2, r2, #4
 80028ca:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	685a      	ldr	r2, [r3, #4]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	491f      	ldr	r1, [pc, #124]	; (8002954 <HAL_I2C_Init+0x128>)
 80028d8:	430a      	orrs	r2, r1
 80028da:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68da      	ldr	r2, [r3, #12]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	491a      	ldr	r1, [pc, #104]	; (8002950 <HAL_I2C_Init+0x124>)
 80028e8:	400a      	ands	r2, r1
 80028ea:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	691a      	ldr	r2, [r3, #16]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	431a      	orrs	r2, r3
 80028f6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	430a      	orrs	r2, r1
 8002904:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69d9      	ldr	r1, [r3, #28]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a1a      	ldr	r2, [r3, #32]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	430a      	orrs	r2, r1
 8002914:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2101      	movs	r1, #1
 8002922:	430a      	orrs	r2, r1
 8002924:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2241      	movs	r2, #65	; 0x41
 8002930:	2120      	movs	r1, #32
 8002932:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2242      	movs	r2, #66	; 0x42
 800293e:	2100      	movs	r1, #0
 8002940:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	0018      	movs	r0, r3
 8002946:	46bd      	mov	sp, r7
 8002948:	b002      	add	sp, #8
 800294a:	bd80      	pop	{r7, pc}
 800294c:	f0ffffff 	.word	0xf0ffffff
 8002950:	ffff7fff 	.word	0xffff7fff
 8002954:	02008000 	.word	0x02008000

08002958 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002958:	b590      	push	{r4, r7, lr}
 800295a:	b089      	sub	sp, #36	; 0x24
 800295c:	af02      	add	r7, sp, #8
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	000c      	movs	r4, r1
 8002962:	0010      	movs	r0, r2
 8002964:	0019      	movs	r1, r3
 8002966:	230a      	movs	r3, #10
 8002968:	18fb      	adds	r3, r7, r3
 800296a:	1c22      	adds	r2, r4, #0
 800296c:	801a      	strh	r2, [r3, #0]
 800296e:	2308      	movs	r3, #8
 8002970:	18fb      	adds	r3, r7, r3
 8002972:	1c02      	adds	r2, r0, #0
 8002974:	801a      	strh	r2, [r3, #0]
 8002976:	1dbb      	adds	r3, r7, #6
 8002978:	1c0a      	adds	r2, r1, #0
 800297a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2241      	movs	r2, #65	; 0x41
 8002980:	5c9b      	ldrb	r3, [r3, r2]
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b20      	cmp	r3, #32
 8002986:	d000      	beq.n	800298a <HAL_I2C_Mem_Write+0x32>
 8002988:	e10c      	b.n	8002ba4 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800298a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800298c:	2b00      	cmp	r3, #0
 800298e:	d004      	beq.n	800299a <HAL_I2C_Mem_Write+0x42>
 8002990:	232c      	movs	r3, #44	; 0x2c
 8002992:	18fb      	adds	r3, r7, r3
 8002994:	881b      	ldrh	r3, [r3, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d105      	bne.n	80029a6 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2280      	movs	r2, #128	; 0x80
 800299e:	0092      	lsls	r2, r2, #2
 80029a0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e0ff      	b.n	8002ba6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2240      	movs	r2, #64	; 0x40
 80029aa:	5c9b      	ldrb	r3, [r3, r2]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d101      	bne.n	80029b4 <HAL_I2C_Mem_Write+0x5c>
 80029b0:	2302      	movs	r3, #2
 80029b2:	e0f8      	b.n	8002ba6 <HAL_I2C_Mem_Write+0x24e>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2240      	movs	r2, #64	; 0x40
 80029b8:	2101      	movs	r1, #1
 80029ba:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80029bc:	f7ff fc64 	bl	8002288 <HAL_GetTick>
 80029c0:	0003      	movs	r3, r0
 80029c2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029c4:	2380      	movs	r3, #128	; 0x80
 80029c6:	0219      	lsls	r1, r3, #8
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	9300      	str	r3, [sp, #0]
 80029ce:	2319      	movs	r3, #25
 80029d0:	2201      	movs	r2, #1
 80029d2:	f000 fb0b 	bl	8002fec <I2C_WaitOnFlagUntilTimeout>
 80029d6:	1e03      	subs	r3, r0, #0
 80029d8:	d001      	beq.n	80029de <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e0e3      	b.n	8002ba6 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2241      	movs	r2, #65	; 0x41
 80029e2:	2121      	movs	r1, #33	; 0x21
 80029e4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2242      	movs	r2, #66	; 0x42
 80029ea:	2140      	movs	r1, #64	; 0x40
 80029ec:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	222c      	movs	r2, #44	; 0x2c
 80029fe:	18ba      	adds	r2, r7, r2
 8002a00:	8812      	ldrh	r2, [r2, #0]
 8002a02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a0a:	1dbb      	adds	r3, r7, #6
 8002a0c:	881c      	ldrh	r4, [r3, #0]
 8002a0e:	2308      	movs	r3, #8
 8002a10:	18fb      	adds	r3, r7, r3
 8002a12:	881a      	ldrh	r2, [r3, #0]
 8002a14:	230a      	movs	r3, #10
 8002a16:	18fb      	adds	r3, r7, r3
 8002a18:	8819      	ldrh	r1, [r3, #0]
 8002a1a:	68f8      	ldr	r0, [r7, #12]
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	9301      	str	r3, [sp, #4]
 8002a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	0023      	movs	r3, r4
 8002a26:	f000 f9f9 	bl	8002e1c <I2C_RequestMemoryWrite>
 8002a2a:	1e03      	subs	r3, r0, #0
 8002a2c:	d005      	beq.n	8002a3a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2240      	movs	r2, #64	; 0x40
 8002a32:	2100      	movs	r1, #0
 8002a34:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e0b5      	b.n	8002ba6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	2bff      	cmp	r3, #255	; 0xff
 8002a42:	d911      	bls.n	8002a68 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	22ff      	movs	r2, #255	; 0xff
 8002a48:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a4e:	b2da      	uxtb	r2, r3
 8002a50:	2380      	movs	r3, #128	; 0x80
 8002a52:	045c      	lsls	r4, r3, #17
 8002a54:	230a      	movs	r3, #10
 8002a56:	18fb      	adds	r3, r7, r3
 8002a58:	8819      	ldrh	r1, [r3, #0]
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	0023      	movs	r3, r4
 8002a62:	f000 fbf7 	bl	8003254 <I2C_TransferConfig>
 8002a66:	e012      	b.n	8002a8e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a76:	b2da      	uxtb	r2, r3
 8002a78:	2380      	movs	r3, #128	; 0x80
 8002a7a:	049c      	lsls	r4, r3, #18
 8002a7c:	230a      	movs	r3, #10
 8002a7e:	18fb      	adds	r3, r7, r3
 8002a80:	8819      	ldrh	r1, [r3, #0]
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	2300      	movs	r3, #0
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	0023      	movs	r3, r4
 8002a8a:	f000 fbe3 	bl	8003254 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	0018      	movs	r0, r3
 8002a96:	f000 fae8 	bl	800306a <I2C_WaitOnTXISFlagUntilTimeout>
 8002a9a:	1e03      	subs	r3, r0, #0
 8002a9c:	d001      	beq.n	8002aa2 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e081      	b.n	8002ba6 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa6:	781a      	ldrb	r2, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab2:	1c5a      	adds	r2, r3, #1
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aca:	3b01      	subs	r3, #1
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d03a      	beq.n	8002b52 <HAL_I2C_Mem_Write+0x1fa>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d136      	bne.n	8002b52 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ae4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	0013      	movs	r3, r2
 8002aee:	2200      	movs	r2, #0
 8002af0:	2180      	movs	r1, #128	; 0x80
 8002af2:	f000 fa7b 	bl	8002fec <I2C_WaitOnFlagUntilTimeout>
 8002af6:	1e03      	subs	r3, r0, #0
 8002af8:	d001      	beq.n	8002afe <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e053      	b.n	8002ba6 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	2bff      	cmp	r3, #255	; 0xff
 8002b06:	d911      	bls.n	8002b2c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	22ff      	movs	r2, #255	; 0xff
 8002b0c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b12:	b2da      	uxtb	r2, r3
 8002b14:	2380      	movs	r3, #128	; 0x80
 8002b16:	045c      	lsls	r4, r3, #17
 8002b18:	230a      	movs	r3, #10
 8002b1a:	18fb      	adds	r3, r7, r3
 8002b1c:	8819      	ldrh	r1, [r3, #0]
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	2300      	movs	r3, #0
 8002b22:	9300      	str	r3, [sp, #0]
 8002b24:	0023      	movs	r3, r4
 8002b26:	f000 fb95 	bl	8003254 <I2C_TransferConfig>
 8002b2a:	e012      	b.n	8002b52 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b3a:	b2da      	uxtb	r2, r3
 8002b3c:	2380      	movs	r3, #128	; 0x80
 8002b3e:	049c      	lsls	r4, r3, #18
 8002b40:	230a      	movs	r3, #10
 8002b42:	18fb      	adds	r3, r7, r3
 8002b44:	8819      	ldrh	r1, [r3, #0]
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	2300      	movs	r3, #0
 8002b4a:	9300      	str	r3, [sp, #0]
 8002b4c:	0023      	movs	r3, r4
 8002b4e:	f000 fb81 	bl	8003254 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d198      	bne.n	8002a8e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	0018      	movs	r0, r3
 8002b64:	f000 fac0 	bl	80030e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b68:	1e03      	subs	r3, r0, #0
 8002b6a:	d001      	beq.n	8002b70 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e01a      	b.n	8002ba6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2220      	movs	r2, #32
 8002b76:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	490b      	ldr	r1, [pc, #44]	; (8002bb0 <HAL_I2C_Mem_Write+0x258>)
 8002b84:	400a      	ands	r2, r1
 8002b86:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2241      	movs	r2, #65	; 0x41
 8002b8c:	2120      	movs	r1, #32
 8002b8e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2242      	movs	r2, #66	; 0x42
 8002b94:	2100      	movs	r1, #0
 8002b96:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2240      	movs	r2, #64	; 0x40
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	e000      	b.n	8002ba6 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8002ba4:	2302      	movs	r3, #2
  }
}
 8002ba6:	0018      	movs	r0, r3
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	b007      	add	sp, #28
 8002bac:	bd90      	pop	{r4, r7, pc}
 8002bae:	46c0      	nop			; (mov r8, r8)
 8002bb0:	fe00e800 	.word	0xfe00e800

08002bb4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bb4:	b590      	push	{r4, r7, lr}
 8002bb6:	b089      	sub	sp, #36	; 0x24
 8002bb8:	af02      	add	r7, sp, #8
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	000c      	movs	r4, r1
 8002bbe:	0010      	movs	r0, r2
 8002bc0:	0019      	movs	r1, r3
 8002bc2:	230a      	movs	r3, #10
 8002bc4:	18fb      	adds	r3, r7, r3
 8002bc6:	1c22      	adds	r2, r4, #0
 8002bc8:	801a      	strh	r2, [r3, #0]
 8002bca:	2308      	movs	r3, #8
 8002bcc:	18fb      	adds	r3, r7, r3
 8002bce:	1c02      	adds	r2, r0, #0
 8002bd0:	801a      	strh	r2, [r3, #0]
 8002bd2:	1dbb      	adds	r3, r7, #6
 8002bd4:	1c0a      	adds	r2, r1, #0
 8002bd6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2241      	movs	r2, #65	; 0x41
 8002bdc:	5c9b      	ldrb	r3, [r3, r2]
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b20      	cmp	r3, #32
 8002be2:	d000      	beq.n	8002be6 <HAL_I2C_Mem_Read+0x32>
 8002be4:	e110      	b.n	8002e08 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8002be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d004      	beq.n	8002bf6 <HAL_I2C_Mem_Read+0x42>
 8002bec:	232c      	movs	r3, #44	; 0x2c
 8002bee:	18fb      	adds	r3, r7, r3
 8002bf0:	881b      	ldrh	r3, [r3, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d105      	bne.n	8002c02 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2280      	movs	r2, #128	; 0x80
 8002bfa:	0092      	lsls	r2, r2, #2
 8002bfc:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e103      	b.n	8002e0a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2240      	movs	r2, #64	; 0x40
 8002c06:	5c9b      	ldrb	r3, [r3, r2]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d101      	bne.n	8002c10 <HAL_I2C_Mem_Read+0x5c>
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	e0fc      	b.n	8002e0a <HAL_I2C_Mem_Read+0x256>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2240      	movs	r2, #64	; 0x40
 8002c14:	2101      	movs	r1, #1
 8002c16:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c18:	f7ff fb36 	bl	8002288 <HAL_GetTick>
 8002c1c:	0003      	movs	r3, r0
 8002c1e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c20:	2380      	movs	r3, #128	; 0x80
 8002c22:	0219      	lsls	r1, r3, #8
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	9300      	str	r3, [sp, #0]
 8002c2a:	2319      	movs	r3, #25
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f000 f9dd 	bl	8002fec <I2C_WaitOnFlagUntilTimeout>
 8002c32:	1e03      	subs	r3, r0, #0
 8002c34:	d001      	beq.n	8002c3a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e0e7      	b.n	8002e0a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2241      	movs	r2, #65	; 0x41
 8002c3e:	2122      	movs	r1, #34	; 0x22
 8002c40:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2242      	movs	r2, #66	; 0x42
 8002c46:	2140      	movs	r1, #64	; 0x40
 8002c48:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	222c      	movs	r2, #44	; 0x2c
 8002c5a:	18ba      	adds	r2, r7, r2
 8002c5c:	8812      	ldrh	r2, [r2, #0]
 8002c5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c66:	1dbb      	adds	r3, r7, #6
 8002c68:	881c      	ldrh	r4, [r3, #0]
 8002c6a:	2308      	movs	r3, #8
 8002c6c:	18fb      	adds	r3, r7, r3
 8002c6e:	881a      	ldrh	r2, [r3, #0]
 8002c70:	230a      	movs	r3, #10
 8002c72:	18fb      	adds	r3, r7, r3
 8002c74:	8819      	ldrh	r1, [r3, #0]
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	9301      	str	r3, [sp, #4]
 8002c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	0023      	movs	r3, r4
 8002c82:	f000 f92f 	bl	8002ee4 <I2C_RequestMemoryRead>
 8002c86:	1e03      	subs	r3, r0, #0
 8002c88:	d005      	beq.n	8002c96 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2240      	movs	r2, #64	; 0x40
 8002c8e:	2100      	movs	r1, #0
 8002c90:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e0b9      	b.n	8002e0a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	2bff      	cmp	r3, #255	; 0xff
 8002c9e:	d911      	bls.n	8002cc4 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	22ff      	movs	r2, #255	; 0xff
 8002ca4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002caa:	b2da      	uxtb	r2, r3
 8002cac:	2380      	movs	r3, #128	; 0x80
 8002cae:	045c      	lsls	r4, r3, #17
 8002cb0:	230a      	movs	r3, #10
 8002cb2:	18fb      	adds	r3, r7, r3
 8002cb4:	8819      	ldrh	r1, [r3, #0]
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	4b56      	ldr	r3, [pc, #344]	; (8002e14 <HAL_I2C_Mem_Read+0x260>)
 8002cba:	9300      	str	r3, [sp, #0]
 8002cbc:	0023      	movs	r3, r4
 8002cbe:	f000 fac9 	bl	8003254 <I2C_TransferConfig>
 8002cc2:	e012      	b.n	8002cea <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd2:	b2da      	uxtb	r2, r3
 8002cd4:	2380      	movs	r3, #128	; 0x80
 8002cd6:	049c      	lsls	r4, r3, #18
 8002cd8:	230a      	movs	r3, #10
 8002cda:	18fb      	adds	r3, r7, r3
 8002cdc:	8819      	ldrh	r1, [r3, #0]
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	4b4c      	ldr	r3, [pc, #304]	; (8002e14 <HAL_I2C_Mem_Read+0x260>)
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	0023      	movs	r3, r4
 8002ce6:	f000 fab5 	bl	8003254 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002cea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	0013      	movs	r3, r2
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	2104      	movs	r1, #4
 8002cf8:	f000 f978 	bl	8002fec <I2C_WaitOnFlagUntilTimeout>
 8002cfc:	1e03      	subs	r3, r0, #0
 8002cfe:	d001      	beq.n	8002d04 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e082      	b.n	8002e0a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d16:	1c5a      	adds	r2, r3, #1
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d20:	3b01      	subs	r3, #1
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d03a      	beq.n	8002db6 <HAL_I2C_Mem_Read+0x202>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d136      	bne.n	8002db6 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	9300      	str	r3, [sp, #0]
 8002d50:	0013      	movs	r3, r2
 8002d52:	2200      	movs	r2, #0
 8002d54:	2180      	movs	r1, #128	; 0x80
 8002d56:	f000 f949 	bl	8002fec <I2C_WaitOnFlagUntilTimeout>
 8002d5a:	1e03      	subs	r3, r0, #0
 8002d5c:	d001      	beq.n	8002d62 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e053      	b.n	8002e0a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	2bff      	cmp	r3, #255	; 0xff
 8002d6a:	d911      	bls.n	8002d90 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	22ff      	movs	r2, #255	; 0xff
 8002d70:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	2380      	movs	r3, #128	; 0x80
 8002d7a:	045c      	lsls	r4, r3, #17
 8002d7c:	230a      	movs	r3, #10
 8002d7e:	18fb      	adds	r3, r7, r3
 8002d80:	8819      	ldrh	r1, [r3, #0]
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	2300      	movs	r3, #0
 8002d86:	9300      	str	r3, [sp, #0]
 8002d88:	0023      	movs	r3, r4
 8002d8a:	f000 fa63 	bl	8003254 <I2C_TransferConfig>
 8002d8e:	e012      	b.n	8002db6 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d9e:	b2da      	uxtb	r2, r3
 8002da0:	2380      	movs	r3, #128	; 0x80
 8002da2:	049c      	lsls	r4, r3, #18
 8002da4:	230a      	movs	r3, #10
 8002da6:	18fb      	adds	r3, r7, r3
 8002da8:	8819      	ldrh	r1, [r3, #0]
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	2300      	movs	r3, #0
 8002dae:	9300      	str	r3, [sp, #0]
 8002db0:	0023      	movs	r3, r4
 8002db2:	f000 fa4f 	bl	8003254 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d194      	bne.n	8002cea <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	0018      	movs	r0, r3
 8002dc8:	f000 f98e 	bl	80030e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002dcc:	1e03      	subs	r3, r0, #0
 8002dce:	d001      	beq.n	8002dd4 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e01a      	b.n	8002e0a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2220      	movs	r2, #32
 8002dda:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	490c      	ldr	r1, [pc, #48]	; (8002e18 <HAL_I2C_Mem_Read+0x264>)
 8002de8:	400a      	ands	r2, r1
 8002dea:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2241      	movs	r2, #65	; 0x41
 8002df0:	2120      	movs	r1, #32
 8002df2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2242      	movs	r2, #66	; 0x42
 8002df8:	2100      	movs	r1, #0
 8002dfa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2240      	movs	r2, #64	; 0x40
 8002e00:	2100      	movs	r1, #0
 8002e02:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002e04:	2300      	movs	r3, #0
 8002e06:	e000      	b.n	8002e0a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8002e08:	2302      	movs	r3, #2
  }
}
 8002e0a:	0018      	movs	r0, r3
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	b007      	add	sp, #28
 8002e10:	bd90      	pop	{r4, r7, pc}
 8002e12:	46c0      	nop			; (mov r8, r8)
 8002e14:	80002400 	.word	0x80002400
 8002e18:	fe00e800 	.word	0xfe00e800

08002e1c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002e1c:	b5b0      	push	{r4, r5, r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af02      	add	r7, sp, #8
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	000c      	movs	r4, r1
 8002e26:	0010      	movs	r0, r2
 8002e28:	0019      	movs	r1, r3
 8002e2a:	250a      	movs	r5, #10
 8002e2c:	197b      	adds	r3, r7, r5
 8002e2e:	1c22      	adds	r2, r4, #0
 8002e30:	801a      	strh	r2, [r3, #0]
 8002e32:	2308      	movs	r3, #8
 8002e34:	18fb      	adds	r3, r7, r3
 8002e36:	1c02      	adds	r2, r0, #0
 8002e38:	801a      	strh	r2, [r3, #0]
 8002e3a:	1dbb      	adds	r3, r7, #6
 8002e3c:	1c0a      	adds	r2, r1, #0
 8002e3e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002e40:	1dbb      	adds	r3, r7, #6
 8002e42:	881b      	ldrh	r3, [r3, #0]
 8002e44:	b2da      	uxtb	r2, r3
 8002e46:	2380      	movs	r3, #128	; 0x80
 8002e48:	045c      	lsls	r4, r3, #17
 8002e4a:	197b      	adds	r3, r7, r5
 8002e4c:	8819      	ldrh	r1, [r3, #0]
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	4b23      	ldr	r3, [pc, #140]	; (8002ee0 <I2C_RequestMemoryWrite+0xc4>)
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	0023      	movs	r3, r4
 8002e56:	f000 f9fd 	bl	8003254 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e5c:	6a39      	ldr	r1, [r7, #32]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	0018      	movs	r0, r3
 8002e62:	f000 f902 	bl	800306a <I2C_WaitOnTXISFlagUntilTimeout>
 8002e66:	1e03      	subs	r3, r0, #0
 8002e68:	d001      	beq.n	8002e6e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e033      	b.n	8002ed6 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e6e:	1dbb      	adds	r3, r7, #6
 8002e70:	881b      	ldrh	r3, [r3, #0]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d107      	bne.n	8002e86 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e76:	2308      	movs	r3, #8
 8002e78:	18fb      	adds	r3, r7, r3
 8002e7a:	881b      	ldrh	r3, [r3, #0]
 8002e7c:	b2da      	uxtb	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	629a      	str	r2, [r3, #40]	; 0x28
 8002e84:	e019      	b.n	8002eba <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e86:	2308      	movs	r3, #8
 8002e88:	18fb      	adds	r3, r7, r3
 8002e8a:	881b      	ldrh	r3, [r3, #0]
 8002e8c:	0a1b      	lsrs	r3, r3, #8
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e9a:	6a39      	ldr	r1, [r7, #32]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	f000 f8e3 	bl	800306a <I2C_WaitOnTXISFlagUntilTimeout>
 8002ea4:	1e03      	subs	r3, r0, #0
 8002ea6:	d001      	beq.n	8002eac <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e014      	b.n	8002ed6 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002eac:	2308      	movs	r3, #8
 8002eae:	18fb      	adds	r3, r7, r3
 8002eb0:	881b      	ldrh	r3, [r3, #0]
 8002eb2:	b2da      	uxtb	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002eba:	6a3a      	ldr	r2, [r7, #32]
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	0013      	movs	r3, r2
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	2180      	movs	r1, #128	; 0x80
 8002ec8:	f000 f890 	bl	8002fec <I2C_WaitOnFlagUntilTimeout>
 8002ecc:	1e03      	subs	r3, r0, #0
 8002ece:	d001      	beq.n	8002ed4 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e000      	b.n	8002ed6 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	b004      	add	sp, #16
 8002edc:	bdb0      	pop	{r4, r5, r7, pc}
 8002ede:	46c0      	nop			; (mov r8, r8)
 8002ee0:	80002000 	.word	0x80002000

08002ee4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002ee4:	b5b0      	push	{r4, r5, r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af02      	add	r7, sp, #8
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	000c      	movs	r4, r1
 8002eee:	0010      	movs	r0, r2
 8002ef0:	0019      	movs	r1, r3
 8002ef2:	250a      	movs	r5, #10
 8002ef4:	197b      	adds	r3, r7, r5
 8002ef6:	1c22      	adds	r2, r4, #0
 8002ef8:	801a      	strh	r2, [r3, #0]
 8002efa:	2308      	movs	r3, #8
 8002efc:	18fb      	adds	r3, r7, r3
 8002efe:	1c02      	adds	r2, r0, #0
 8002f00:	801a      	strh	r2, [r3, #0]
 8002f02:	1dbb      	adds	r3, r7, #6
 8002f04:	1c0a      	adds	r2, r1, #0
 8002f06:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002f08:	1dbb      	adds	r3, r7, #6
 8002f0a:	881b      	ldrh	r3, [r3, #0]
 8002f0c:	b2da      	uxtb	r2, r3
 8002f0e:	197b      	adds	r3, r7, r5
 8002f10:	8819      	ldrh	r1, [r3, #0]
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	4b23      	ldr	r3, [pc, #140]	; (8002fa4 <I2C_RequestMemoryRead+0xc0>)
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	2300      	movs	r3, #0
 8002f1a:	f000 f99b 	bl	8003254 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f20:	6a39      	ldr	r1, [r7, #32]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	0018      	movs	r0, r3
 8002f26:	f000 f8a0 	bl	800306a <I2C_WaitOnTXISFlagUntilTimeout>
 8002f2a:	1e03      	subs	r3, r0, #0
 8002f2c:	d001      	beq.n	8002f32 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e033      	b.n	8002f9a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f32:	1dbb      	adds	r3, r7, #6
 8002f34:	881b      	ldrh	r3, [r3, #0]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d107      	bne.n	8002f4a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f3a:	2308      	movs	r3, #8
 8002f3c:	18fb      	adds	r3, r7, r3
 8002f3e:	881b      	ldrh	r3, [r3, #0]
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	629a      	str	r2, [r3, #40]	; 0x28
 8002f48:	e019      	b.n	8002f7e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002f4a:	2308      	movs	r3, #8
 8002f4c:	18fb      	adds	r3, r7, r3
 8002f4e:	881b      	ldrh	r3, [r3, #0]
 8002f50:	0a1b      	lsrs	r3, r3, #8
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	b2da      	uxtb	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f5e:	6a39      	ldr	r1, [r7, #32]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	0018      	movs	r0, r3
 8002f64:	f000 f881 	bl	800306a <I2C_WaitOnTXISFlagUntilTimeout>
 8002f68:	1e03      	subs	r3, r0, #0
 8002f6a:	d001      	beq.n	8002f70 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e014      	b.n	8002f9a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f70:	2308      	movs	r3, #8
 8002f72:	18fb      	adds	r3, r7, r3
 8002f74:	881b      	ldrh	r3, [r3, #0]
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002f7e:	6a3a      	ldr	r2, [r7, #32]
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	0013      	movs	r3, r2
 8002f88:	2200      	movs	r2, #0
 8002f8a:	2140      	movs	r1, #64	; 0x40
 8002f8c:	f000 f82e 	bl	8002fec <I2C_WaitOnFlagUntilTimeout>
 8002f90:	1e03      	subs	r3, r0, #0
 8002f92:	d001      	beq.n	8002f98 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e000      	b.n	8002f9a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	b004      	add	sp, #16
 8002fa0:	bdb0      	pop	{r4, r5, r7, pc}
 8002fa2:	46c0      	nop			; (mov r8, r8)
 8002fa4:	80002000 	.word	0x80002000

08002fa8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	4013      	ands	r3, r2
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d103      	bne.n	8002fc6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	4013      	ands	r3, r2
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d007      	beq.n	8002fe4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	699a      	ldr	r2, [r3, #24]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2101      	movs	r1, #1
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	619a      	str	r2, [r3, #24]
  }
}
 8002fe4:	46c0      	nop			; (mov r8, r8)
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	b002      	add	sp, #8
 8002fea:	bd80      	pop	{r7, pc}

08002fec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	603b      	str	r3, [r7, #0]
 8002ff8:	1dfb      	adds	r3, r7, #7
 8002ffa:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ffc:	e021      	b.n	8003042 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	3301      	adds	r3, #1
 8003002:	d01e      	beq.n	8003042 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003004:	f7ff f940 	bl	8002288 <HAL_GetTick>
 8003008:	0002      	movs	r2, r0
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	429a      	cmp	r2, r3
 8003012:	d302      	bcc.n	800301a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d113      	bne.n	8003042 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301e:	2220      	movs	r2, #32
 8003020:	431a      	orrs	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2241      	movs	r2, #65	; 0x41
 800302a:	2120      	movs	r1, #32
 800302c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2242      	movs	r2, #66	; 0x42
 8003032:	2100      	movs	r1, #0
 8003034:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2240      	movs	r2, #64	; 0x40
 800303a:	2100      	movs	r1, #0
 800303c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e00f      	b.n	8003062 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	68ba      	ldr	r2, [r7, #8]
 800304a:	4013      	ands	r3, r2
 800304c:	68ba      	ldr	r2, [r7, #8]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	425a      	negs	r2, r3
 8003052:	4153      	adcs	r3, r2
 8003054:	b2db      	uxtb	r3, r3
 8003056:	001a      	movs	r2, r3
 8003058:	1dfb      	adds	r3, r7, #7
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	429a      	cmp	r2, r3
 800305e:	d0ce      	beq.n	8002ffe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	0018      	movs	r0, r3
 8003064:	46bd      	mov	sp, r7
 8003066:	b004      	add	sp, #16
 8003068:	bd80      	pop	{r7, pc}

0800306a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b084      	sub	sp, #16
 800306e:	af00      	add	r7, sp, #0
 8003070:	60f8      	str	r0, [r7, #12]
 8003072:	60b9      	str	r1, [r7, #8]
 8003074:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003076:	e02b      	b.n	80030d0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	68b9      	ldr	r1, [r7, #8]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	0018      	movs	r0, r3
 8003080:	f000 f86e 	bl	8003160 <I2C_IsAcknowledgeFailed>
 8003084:	1e03      	subs	r3, r0, #0
 8003086:	d001      	beq.n	800308c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e029      	b.n	80030e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	3301      	adds	r3, #1
 8003090:	d01e      	beq.n	80030d0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003092:	f7ff f8f9 	bl	8002288 <HAL_GetTick>
 8003096:	0002      	movs	r2, r0
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	68ba      	ldr	r2, [r7, #8]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d302      	bcc.n	80030a8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d113      	bne.n	80030d0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ac:	2220      	movs	r2, #32
 80030ae:	431a      	orrs	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2241      	movs	r2, #65	; 0x41
 80030b8:	2120      	movs	r1, #32
 80030ba:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2242      	movs	r2, #66	; 0x42
 80030c0:	2100      	movs	r1, #0
 80030c2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2240      	movs	r2, #64	; 0x40
 80030c8:	2100      	movs	r1, #0
 80030ca:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e007      	b.n	80030e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	2202      	movs	r2, #2
 80030d8:	4013      	ands	r3, r2
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d1cc      	bne.n	8003078 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	0018      	movs	r0, r3
 80030e2:	46bd      	mov	sp, r7
 80030e4:	b004      	add	sp, #16
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030f4:	e028      	b.n	8003148 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	68b9      	ldr	r1, [r7, #8]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	0018      	movs	r0, r3
 80030fe:	f000 f82f 	bl	8003160 <I2C_IsAcknowledgeFailed>
 8003102:	1e03      	subs	r3, r0, #0
 8003104:	d001      	beq.n	800310a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e026      	b.n	8003158 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800310a:	f7ff f8bd 	bl	8002288 <HAL_GetTick>
 800310e:	0002      	movs	r2, r0
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	68ba      	ldr	r2, [r7, #8]
 8003116:	429a      	cmp	r2, r3
 8003118:	d302      	bcc.n	8003120 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d113      	bne.n	8003148 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003124:	2220      	movs	r2, #32
 8003126:	431a      	orrs	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2241      	movs	r2, #65	; 0x41
 8003130:	2120      	movs	r1, #32
 8003132:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2242      	movs	r2, #66	; 0x42
 8003138:	2100      	movs	r1, #0
 800313a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2240      	movs	r2, #64	; 0x40
 8003140:	2100      	movs	r1, #0
 8003142:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e007      	b.n	8003158 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	2220      	movs	r2, #32
 8003150:	4013      	ands	r3, r2
 8003152:	2b20      	cmp	r3, #32
 8003154:	d1cf      	bne.n	80030f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	0018      	movs	r0, r3
 800315a:	46bd      	mov	sp, r7
 800315c:	b004      	add	sp, #16
 800315e:	bd80      	pop	{r7, pc}

08003160 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	2210      	movs	r2, #16
 8003174:	4013      	ands	r3, r2
 8003176:	2b10      	cmp	r3, #16
 8003178:	d164      	bne.n	8003244 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	685a      	ldr	r2, [r3, #4]
 8003180:	2380      	movs	r3, #128	; 0x80
 8003182:	049b      	lsls	r3, r3, #18
 8003184:	401a      	ands	r2, r3
 8003186:	2380      	movs	r3, #128	; 0x80
 8003188:	049b      	lsls	r3, r3, #18
 800318a:	429a      	cmp	r2, r3
 800318c:	d02b      	beq.n	80031e6 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	685a      	ldr	r2, [r3, #4]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2180      	movs	r1, #128	; 0x80
 800319a:	01c9      	lsls	r1, r1, #7
 800319c:	430a      	orrs	r2, r1
 800319e:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031a0:	e021      	b.n	80031e6 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	3301      	adds	r3, #1
 80031a6:	d01e      	beq.n	80031e6 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031a8:	f7ff f86e 	bl	8002288 <HAL_GetTick>
 80031ac:	0002      	movs	r2, r0
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	68ba      	ldr	r2, [r7, #8]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d302      	bcc.n	80031be <I2C_IsAcknowledgeFailed+0x5e>
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d113      	bne.n	80031e6 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c2:	2220      	movs	r2, #32
 80031c4:	431a      	orrs	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2241      	movs	r2, #65	; 0x41
 80031ce:	2120      	movs	r1, #32
 80031d0:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2242      	movs	r2, #66	; 0x42
 80031d6:	2100      	movs	r1, #0
 80031d8:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2240      	movs	r2, #64	; 0x40
 80031de:	2100      	movs	r1, #0
 80031e0:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e02f      	b.n	8003246 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	2220      	movs	r2, #32
 80031ee:	4013      	ands	r3, r2
 80031f0:	2b20      	cmp	r3, #32
 80031f2:	d1d6      	bne.n	80031a2 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2210      	movs	r2, #16
 80031fa:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2220      	movs	r2, #32
 8003202:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	0018      	movs	r0, r3
 8003208:	f7ff fece 	bl	8002fa8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	490e      	ldr	r1, [pc, #56]	; (8003250 <I2C_IsAcknowledgeFailed+0xf0>)
 8003218:	400a      	ands	r2, r1
 800321a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003220:	2204      	movs	r2, #4
 8003222:	431a      	orrs	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2241      	movs	r2, #65	; 0x41
 800322c:	2120      	movs	r1, #32
 800322e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2242      	movs	r2, #66	; 0x42
 8003234:	2100      	movs	r1, #0
 8003236:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2240      	movs	r2, #64	; 0x40
 800323c:	2100      	movs	r1, #0
 800323e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e000      	b.n	8003246 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	0018      	movs	r0, r3
 8003248:	46bd      	mov	sp, r7
 800324a:	b004      	add	sp, #16
 800324c:	bd80      	pop	{r7, pc}
 800324e:	46c0      	nop			; (mov r8, r8)
 8003250:	fe00e800 	.word	0xfe00e800

08003254 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003254:	b590      	push	{r4, r7, lr}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	0008      	movs	r0, r1
 800325e:	0011      	movs	r1, r2
 8003260:	607b      	str	r3, [r7, #4]
 8003262:	240a      	movs	r4, #10
 8003264:	193b      	adds	r3, r7, r4
 8003266:	1c02      	adds	r2, r0, #0
 8003268:	801a      	strh	r2, [r3, #0]
 800326a:	2009      	movs	r0, #9
 800326c:	183b      	adds	r3, r7, r0
 800326e:	1c0a      	adds	r2, r1, #0
 8003270:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	6a3a      	ldr	r2, [r7, #32]
 800327a:	0d51      	lsrs	r1, r2, #21
 800327c:	2280      	movs	r2, #128	; 0x80
 800327e:	00d2      	lsls	r2, r2, #3
 8003280:	400a      	ands	r2, r1
 8003282:	490e      	ldr	r1, [pc, #56]	; (80032bc <I2C_TransferConfig+0x68>)
 8003284:	430a      	orrs	r2, r1
 8003286:	43d2      	mvns	r2, r2
 8003288:	401a      	ands	r2, r3
 800328a:	0011      	movs	r1, r2
 800328c:	193b      	adds	r3, r7, r4
 800328e:	881b      	ldrh	r3, [r3, #0]
 8003290:	059b      	lsls	r3, r3, #22
 8003292:	0d9a      	lsrs	r2, r3, #22
 8003294:	183b      	adds	r3, r7, r0
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	0418      	lsls	r0, r3, #16
 800329a:	23ff      	movs	r3, #255	; 0xff
 800329c:	041b      	lsls	r3, r3, #16
 800329e:	4003      	ands	r3, r0
 80032a0:	431a      	orrs	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	431a      	orrs	r2, r3
 80032a6:	6a3b      	ldr	r3, [r7, #32]
 80032a8:	431a      	orrs	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80032b2:	46c0      	nop			; (mov r8, r8)
 80032b4:	46bd      	mov	sp, r7
 80032b6:	b005      	add	sp, #20
 80032b8:	bd90      	pop	{r4, r7, pc}
 80032ba:	46c0      	nop			; (mov r8, r8)
 80032bc:	03ff63ff 	.word	0x03ff63ff

080032c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2241      	movs	r2, #65	; 0x41
 80032ce:	5c9b      	ldrb	r3, [r3, r2]
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b20      	cmp	r3, #32
 80032d4:	d138      	bne.n	8003348 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2240      	movs	r2, #64	; 0x40
 80032da:	5c9b      	ldrb	r3, [r3, r2]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d101      	bne.n	80032e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80032e0:	2302      	movs	r3, #2
 80032e2:	e032      	b.n	800334a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2240      	movs	r2, #64	; 0x40
 80032e8:	2101      	movs	r1, #1
 80032ea:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2241      	movs	r2, #65	; 0x41
 80032f0:	2124      	movs	r1, #36	; 0x24
 80032f2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2101      	movs	r1, #1
 8003300:	438a      	bics	r2, r1
 8003302:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4911      	ldr	r1, [pc, #68]	; (8003354 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003310:	400a      	ands	r2, r1
 8003312:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6819      	ldr	r1, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	430a      	orrs	r2, r1
 8003322:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2101      	movs	r1, #1
 8003330:	430a      	orrs	r2, r1
 8003332:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2241      	movs	r2, #65	; 0x41
 8003338:	2120      	movs	r1, #32
 800333a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2240      	movs	r2, #64	; 0x40
 8003340:	2100      	movs	r1, #0
 8003342:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003344:	2300      	movs	r3, #0
 8003346:	e000      	b.n	800334a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003348:	2302      	movs	r3, #2
  }
}
 800334a:	0018      	movs	r0, r3
 800334c:	46bd      	mov	sp, r7
 800334e:	b002      	add	sp, #8
 8003350:	bd80      	pop	{r7, pc}
 8003352:	46c0      	nop			; (mov r8, r8)
 8003354:	ffffefff 	.word	0xffffefff

08003358 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2241      	movs	r2, #65	; 0x41
 8003366:	5c9b      	ldrb	r3, [r3, r2]
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b20      	cmp	r3, #32
 800336c:	d139      	bne.n	80033e2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2240      	movs	r2, #64	; 0x40
 8003372:	5c9b      	ldrb	r3, [r3, r2]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d101      	bne.n	800337c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003378:	2302      	movs	r3, #2
 800337a:	e033      	b.n	80033e4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2240      	movs	r2, #64	; 0x40
 8003380:	2101      	movs	r1, #1
 8003382:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2241      	movs	r2, #65	; 0x41
 8003388:	2124      	movs	r1, #36	; 0x24
 800338a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2101      	movs	r1, #1
 8003398:	438a      	bics	r2, r1
 800339a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	4a11      	ldr	r2, [pc, #68]	; (80033ec <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80033a8:	4013      	ands	r3, r2
 80033aa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	021b      	lsls	r3, r3, #8
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2101      	movs	r1, #1
 80033ca:	430a      	orrs	r2, r1
 80033cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2241      	movs	r2, #65	; 0x41
 80033d2:	2120      	movs	r1, #32
 80033d4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2240      	movs	r2, #64	; 0x40
 80033da:	2100      	movs	r1, #0
 80033dc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80033de:	2300      	movs	r3, #0
 80033e0:	e000      	b.n	80033e4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80033e2:	2302      	movs	r3, #2
  }
}
 80033e4:	0018      	movs	r0, r3
 80033e6:	46bd      	mov	sp, r7
 80033e8:	b004      	add	sp, #16
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	fffff0ff 	.word	0xfffff0ff

080033f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b088      	sub	sp, #32
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e301      	b.n	8003a06 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2201      	movs	r2, #1
 8003408:	4013      	ands	r3, r2
 800340a:	d100      	bne.n	800340e <HAL_RCC_OscConfig+0x1e>
 800340c:	e08d      	b.n	800352a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800340e:	4bc3      	ldr	r3, [pc, #780]	; (800371c <HAL_RCC_OscConfig+0x32c>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	220c      	movs	r2, #12
 8003414:	4013      	ands	r3, r2
 8003416:	2b04      	cmp	r3, #4
 8003418:	d00e      	beq.n	8003438 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800341a:	4bc0      	ldr	r3, [pc, #768]	; (800371c <HAL_RCC_OscConfig+0x32c>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	220c      	movs	r2, #12
 8003420:	4013      	ands	r3, r2
 8003422:	2b08      	cmp	r3, #8
 8003424:	d116      	bne.n	8003454 <HAL_RCC_OscConfig+0x64>
 8003426:	4bbd      	ldr	r3, [pc, #756]	; (800371c <HAL_RCC_OscConfig+0x32c>)
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	2380      	movs	r3, #128	; 0x80
 800342c:	025b      	lsls	r3, r3, #9
 800342e:	401a      	ands	r2, r3
 8003430:	2380      	movs	r3, #128	; 0x80
 8003432:	025b      	lsls	r3, r3, #9
 8003434:	429a      	cmp	r2, r3
 8003436:	d10d      	bne.n	8003454 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003438:	4bb8      	ldr	r3, [pc, #736]	; (800371c <HAL_RCC_OscConfig+0x32c>)
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	2380      	movs	r3, #128	; 0x80
 800343e:	029b      	lsls	r3, r3, #10
 8003440:	4013      	ands	r3, r2
 8003442:	d100      	bne.n	8003446 <HAL_RCC_OscConfig+0x56>
 8003444:	e070      	b.n	8003528 <HAL_RCC_OscConfig+0x138>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d000      	beq.n	8003450 <HAL_RCC_OscConfig+0x60>
 800344e:	e06b      	b.n	8003528 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e2d8      	b.n	8003a06 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d107      	bne.n	800346c <HAL_RCC_OscConfig+0x7c>
 800345c:	4baf      	ldr	r3, [pc, #700]	; (800371c <HAL_RCC_OscConfig+0x32c>)
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	4bae      	ldr	r3, [pc, #696]	; (800371c <HAL_RCC_OscConfig+0x32c>)
 8003462:	2180      	movs	r1, #128	; 0x80
 8003464:	0249      	lsls	r1, r1, #9
 8003466:	430a      	orrs	r2, r1
 8003468:	601a      	str	r2, [r3, #0]
 800346a:	e02f      	b.n	80034cc <HAL_RCC_OscConfig+0xdc>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10c      	bne.n	800348e <HAL_RCC_OscConfig+0x9e>
 8003474:	4ba9      	ldr	r3, [pc, #676]	; (800371c <HAL_RCC_OscConfig+0x32c>)
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	4ba8      	ldr	r3, [pc, #672]	; (800371c <HAL_RCC_OscConfig+0x32c>)
 800347a:	49a9      	ldr	r1, [pc, #676]	; (8003720 <HAL_RCC_OscConfig+0x330>)
 800347c:	400a      	ands	r2, r1
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	4ba6      	ldr	r3, [pc, #664]	; (800371c <HAL_RCC_OscConfig+0x32c>)
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	4ba5      	ldr	r3, [pc, #660]	; (800371c <HAL_RCC_OscConfig+0x32c>)
 8003486:	49a7      	ldr	r1, [pc, #668]	; (8003724 <HAL_RCC_OscConfig+0x334>)
 8003488:	400a      	ands	r2, r1
 800348a:	601a      	str	r2, [r3, #0]
 800348c:	e01e      	b.n	80034cc <HAL_RCC_OscConfig+0xdc>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	2b05      	cmp	r3, #5
 8003494:	d10e      	bne.n	80034b4 <HAL_RCC_OscConfig+0xc4>
 8003496:	4ba1      	ldr	r3, [pc, #644]	; (800371c <HAL_RCC_OscConfig+0x32c>)
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	4ba0      	ldr	r3, [pc, #640]	; (800371c <HAL_RCC_OscConfig+0x32c>)
 800349c:	2180      	movs	r1, #128	; 0x80
 800349e:	02c9      	lsls	r1, r1, #11
 80034a0:	430a      	orrs	r2, r1
 80034a2:	601a      	str	r2, [r3, #0]
 80034a4:	4b9d      	ldr	r3, [pc, #628]	; (800371c <HAL_RCC_OscConfig+0x32c>)
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	4b9c      	ldr	r3, [pc, #624]	; (800371c <HAL_RCC_OscConfig+0x32c>)
 80034aa:	2180      	movs	r1, #128	; 0x80
 80034ac:	0249      	lsls	r1, r1, #9
 80034ae:	430a      	orrs	r2, r1
 80034b0:	601a      	str	r2, [r3, #0]
 80034b2:	e00b      	b.n	80034cc <HAL_RCC_OscConfig+0xdc>
 80034b4:	4b99      	ldr	r3, [pc, #612]	; (800371c <HAL_RCC_OscConfig+0x32c>)
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	4b98      	ldr	r3, [pc, #608]	; (800371c <HAL_RCC_OscConfig+0x32c>)
 80034ba:	4999      	ldr	r1, [pc, #612]	; (8003720 <HAL_RCC_OscConfig+0x330>)
 80034bc:	400a      	ands	r2, r1
 80034be:	601a      	str	r2, [r3, #0]
 80034c0:	4b96      	ldr	r3, [pc, #600]	; (800371c <HAL_RCC_OscConfig+0x32c>)
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	4b95      	ldr	r3, [pc, #596]	; (800371c <HAL_RCC_OscConfig+0x32c>)
 80034c6:	4997      	ldr	r1, [pc, #604]	; (8003724 <HAL_RCC_OscConfig+0x334>)
 80034c8:	400a      	ands	r2, r1
 80034ca:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d014      	beq.n	80034fe <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d4:	f7fe fed8 	bl	8002288 <HAL_GetTick>
 80034d8:	0003      	movs	r3, r0
 80034da:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034dc:	e008      	b.n	80034f0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034de:	f7fe fed3 	bl	8002288 <HAL_GetTick>
 80034e2:	0002      	movs	r2, r0
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b64      	cmp	r3, #100	; 0x64
 80034ea:	d901      	bls.n	80034f0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e28a      	b.n	8003a06 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034f0:	4b8a      	ldr	r3, [pc, #552]	; (800371c <HAL_RCC_OscConfig+0x32c>)
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	2380      	movs	r3, #128	; 0x80
 80034f6:	029b      	lsls	r3, r3, #10
 80034f8:	4013      	ands	r3, r2
 80034fa:	d0f0      	beq.n	80034de <HAL_RCC_OscConfig+0xee>
 80034fc:	e015      	b.n	800352a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034fe:	f7fe fec3 	bl	8002288 <HAL_GetTick>
 8003502:	0003      	movs	r3, r0
 8003504:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003508:	f7fe febe 	bl	8002288 <HAL_GetTick>
 800350c:	0002      	movs	r2, r0
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b64      	cmp	r3, #100	; 0x64
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e275      	b.n	8003a06 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800351a:	4b80      	ldr	r3, [pc, #512]	; (800371c <HAL_RCC_OscConfig+0x32c>)
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	2380      	movs	r3, #128	; 0x80
 8003520:	029b      	lsls	r3, r3, #10
 8003522:	4013      	ands	r3, r2
 8003524:	d1f0      	bne.n	8003508 <HAL_RCC_OscConfig+0x118>
 8003526:	e000      	b.n	800352a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003528:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2202      	movs	r2, #2
 8003530:	4013      	ands	r3, r2
 8003532:	d100      	bne.n	8003536 <HAL_RCC_OscConfig+0x146>
 8003534:	e069      	b.n	800360a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003536:	4b79      	ldr	r3, [pc, #484]	; (800371c <HAL_RCC_OscConfig+0x32c>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	220c      	movs	r2, #12
 800353c:	4013      	ands	r3, r2
 800353e:	d00b      	beq.n	8003558 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003540:	4b76      	ldr	r3, [pc, #472]	; (800371c <HAL_RCC_OscConfig+0x32c>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	220c      	movs	r2, #12
 8003546:	4013      	ands	r3, r2
 8003548:	2b08      	cmp	r3, #8
 800354a:	d11c      	bne.n	8003586 <HAL_RCC_OscConfig+0x196>
 800354c:	4b73      	ldr	r3, [pc, #460]	; (800371c <HAL_RCC_OscConfig+0x32c>)
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	2380      	movs	r3, #128	; 0x80
 8003552:	025b      	lsls	r3, r3, #9
 8003554:	4013      	ands	r3, r2
 8003556:	d116      	bne.n	8003586 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003558:	4b70      	ldr	r3, [pc, #448]	; (800371c <HAL_RCC_OscConfig+0x32c>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2202      	movs	r2, #2
 800355e:	4013      	ands	r3, r2
 8003560:	d005      	beq.n	800356e <HAL_RCC_OscConfig+0x17e>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d001      	beq.n	800356e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e24b      	b.n	8003a06 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800356e:	4b6b      	ldr	r3, [pc, #428]	; (800371c <HAL_RCC_OscConfig+0x32c>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	22f8      	movs	r2, #248	; 0xf8
 8003574:	4393      	bics	r3, r2
 8003576:	0019      	movs	r1, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	00da      	lsls	r2, r3, #3
 800357e:	4b67      	ldr	r3, [pc, #412]	; (800371c <HAL_RCC_OscConfig+0x32c>)
 8003580:	430a      	orrs	r2, r1
 8003582:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003584:	e041      	b.n	800360a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d024      	beq.n	80035d8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800358e:	4b63      	ldr	r3, [pc, #396]	; (800371c <HAL_RCC_OscConfig+0x32c>)
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	4b62      	ldr	r3, [pc, #392]	; (800371c <HAL_RCC_OscConfig+0x32c>)
 8003594:	2101      	movs	r1, #1
 8003596:	430a      	orrs	r2, r1
 8003598:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800359a:	f7fe fe75 	bl	8002288 <HAL_GetTick>
 800359e:	0003      	movs	r3, r0
 80035a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035a4:	f7fe fe70 	bl	8002288 <HAL_GetTick>
 80035a8:	0002      	movs	r2, r0
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e227      	b.n	8003a06 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035b6:	4b59      	ldr	r3, [pc, #356]	; (800371c <HAL_RCC_OscConfig+0x32c>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2202      	movs	r2, #2
 80035bc:	4013      	ands	r3, r2
 80035be:	d0f1      	beq.n	80035a4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c0:	4b56      	ldr	r3, [pc, #344]	; (800371c <HAL_RCC_OscConfig+0x32c>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	22f8      	movs	r2, #248	; 0xf8
 80035c6:	4393      	bics	r3, r2
 80035c8:	0019      	movs	r1, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	00da      	lsls	r2, r3, #3
 80035d0:	4b52      	ldr	r3, [pc, #328]	; (800371c <HAL_RCC_OscConfig+0x32c>)
 80035d2:	430a      	orrs	r2, r1
 80035d4:	601a      	str	r2, [r3, #0]
 80035d6:	e018      	b.n	800360a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035d8:	4b50      	ldr	r3, [pc, #320]	; (800371c <HAL_RCC_OscConfig+0x32c>)
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	4b4f      	ldr	r3, [pc, #316]	; (800371c <HAL_RCC_OscConfig+0x32c>)
 80035de:	2101      	movs	r1, #1
 80035e0:	438a      	bics	r2, r1
 80035e2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e4:	f7fe fe50 	bl	8002288 <HAL_GetTick>
 80035e8:	0003      	movs	r3, r0
 80035ea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ec:	e008      	b.n	8003600 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035ee:	f7fe fe4b 	bl	8002288 <HAL_GetTick>
 80035f2:	0002      	movs	r2, r0
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d901      	bls.n	8003600 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e202      	b.n	8003a06 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003600:	4b46      	ldr	r3, [pc, #280]	; (800371c <HAL_RCC_OscConfig+0x32c>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2202      	movs	r2, #2
 8003606:	4013      	ands	r3, r2
 8003608:	d1f1      	bne.n	80035ee <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2208      	movs	r2, #8
 8003610:	4013      	ands	r3, r2
 8003612:	d036      	beq.n	8003682 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	69db      	ldr	r3, [r3, #28]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d019      	beq.n	8003650 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800361c:	4b3f      	ldr	r3, [pc, #252]	; (800371c <HAL_RCC_OscConfig+0x32c>)
 800361e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003620:	4b3e      	ldr	r3, [pc, #248]	; (800371c <HAL_RCC_OscConfig+0x32c>)
 8003622:	2101      	movs	r1, #1
 8003624:	430a      	orrs	r2, r1
 8003626:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003628:	f7fe fe2e 	bl	8002288 <HAL_GetTick>
 800362c:	0003      	movs	r3, r0
 800362e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003630:	e008      	b.n	8003644 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003632:	f7fe fe29 	bl	8002288 <HAL_GetTick>
 8003636:	0002      	movs	r2, r0
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e1e0      	b.n	8003a06 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003644:	4b35      	ldr	r3, [pc, #212]	; (800371c <HAL_RCC_OscConfig+0x32c>)
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	2202      	movs	r2, #2
 800364a:	4013      	ands	r3, r2
 800364c:	d0f1      	beq.n	8003632 <HAL_RCC_OscConfig+0x242>
 800364e:	e018      	b.n	8003682 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003650:	4b32      	ldr	r3, [pc, #200]	; (800371c <HAL_RCC_OscConfig+0x32c>)
 8003652:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003654:	4b31      	ldr	r3, [pc, #196]	; (800371c <HAL_RCC_OscConfig+0x32c>)
 8003656:	2101      	movs	r1, #1
 8003658:	438a      	bics	r2, r1
 800365a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800365c:	f7fe fe14 	bl	8002288 <HAL_GetTick>
 8003660:	0003      	movs	r3, r0
 8003662:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003664:	e008      	b.n	8003678 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003666:	f7fe fe0f 	bl	8002288 <HAL_GetTick>
 800366a:	0002      	movs	r2, r0
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d901      	bls.n	8003678 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e1c6      	b.n	8003a06 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003678:	4b28      	ldr	r3, [pc, #160]	; (800371c <HAL_RCC_OscConfig+0x32c>)
 800367a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367c:	2202      	movs	r2, #2
 800367e:	4013      	ands	r3, r2
 8003680:	d1f1      	bne.n	8003666 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2204      	movs	r2, #4
 8003688:	4013      	ands	r3, r2
 800368a:	d100      	bne.n	800368e <HAL_RCC_OscConfig+0x29e>
 800368c:	e0b4      	b.n	80037f8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800368e:	201f      	movs	r0, #31
 8003690:	183b      	adds	r3, r7, r0
 8003692:	2200      	movs	r2, #0
 8003694:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003696:	4b21      	ldr	r3, [pc, #132]	; (800371c <HAL_RCC_OscConfig+0x32c>)
 8003698:	69da      	ldr	r2, [r3, #28]
 800369a:	2380      	movs	r3, #128	; 0x80
 800369c:	055b      	lsls	r3, r3, #21
 800369e:	4013      	ands	r3, r2
 80036a0:	d110      	bne.n	80036c4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036a2:	4b1e      	ldr	r3, [pc, #120]	; (800371c <HAL_RCC_OscConfig+0x32c>)
 80036a4:	69da      	ldr	r2, [r3, #28]
 80036a6:	4b1d      	ldr	r3, [pc, #116]	; (800371c <HAL_RCC_OscConfig+0x32c>)
 80036a8:	2180      	movs	r1, #128	; 0x80
 80036aa:	0549      	lsls	r1, r1, #21
 80036ac:	430a      	orrs	r2, r1
 80036ae:	61da      	str	r2, [r3, #28]
 80036b0:	4b1a      	ldr	r3, [pc, #104]	; (800371c <HAL_RCC_OscConfig+0x32c>)
 80036b2:	69da      	ldr	r2, [r3, #28]
 80036b4:	2380      	movs	r3, #128	; 0x80
 80036b6:	055b      	lsls	r3, r3, #21
 80036b8:	4013      	ands	r3, r2
 80036ba:	60fb      	str	r3, [r7, #12]
 80036bc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80036be:	183b      	adds	r3, r7, r0
 80036c0:	2201      	movs	r2, #1
 80036c2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c4:	4b18      	ldr	r3, [pc, #96]	; (8003728 <HAL_RCC_OscConfig+0x338>)
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	2380      	movs	r3, #128	; 0x80
 80036ca:	005b      	lsls	r3, r3, #1
 80036cc:	4013      	ands	r3, r2
 80036ce:	d11a      	bne.n	8003706 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036d0:	4b15      	ldr	r3, [pc, #84]	; (8003728 <HAL_RCC_OscConfig+0x338>)
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	4b14      	ldr	r3, [pc, #80]	; (8003728 <HAL_RCC_OscConfig+0x338>)
 80036d6:	2180      	movs	r1, #128	; 0x80
 80036d8:	0049      	lsls	r1, r1, #1
 80036da:	430a      	orrs	r2, r1
 80036dc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036de:	f7fe fdd3 	bl	8002288 <HAL_GetTick>
 80036e2:	0003      	movs	r3, r0
 80036e4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e6:	e008      	b.n	80036fa <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036e8:	f7fe fdce 	bl	8002288 <HAL_GetTick>
 80036ec:	0002      	movs	r2, r0
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b64      	cmp	r3, #100	; 0x64
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e185      	b.n	8003a06 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036fa:	4b0b      	ldr	r3, [pc, #44]	; (8003728 <HAL_RCC_OscConfig+0x338>)
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	2380      	movs	r3, #128	; 0x80
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	4013      	ands	r3, r2
 8003704:	d0f0      	beq.n	80036e8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d10e      	bne.n	800372c <HAL_RCC_OscConfig+0x33c>
 800370e:	4b03      	ldr	r3, [pc, #12]	; (800371c <HAL_RCC_OscConfig+0x32c>)
 8003710:	6a1a      	ldr	r2, [r3, #32]
 8003712:	4b02      	ldr	r3, [pc, #8]	; (800371c <HAL_RCC_OscConfig+0x32c>)
 8003714:	2101      	movs	r1, #1
 8003716:	430a      	orrs	r2, r1
 8003718:	621a      	str	r2, [r3, #32]
 800371a:	e035      	b.n	8003788 <HAL_RCC_OscConfig+0x398>
 800371c:	40021000 	.word	0x40021000
 8003720:	fffeffff 	.word	0xfffeffff
 8003724:	fffbffff 	.word	0xfffbffff
 8003728:	40007000 	.word	0x40007000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d10c      	bne.n	800374e <HAL_RCC_OscConfig+0x35e>
 8003734:	4bb6      	ldr	r3, [pc, #728]	; (8003a10 <HAL_RCC_OscConfig+0x620>)
 8003736:	6a1a      	ldr	r2, [r3, #32]
 8003738:	4bb5      	ldr	r3, [pc, #724]	; (8003a10 <HAL_RCC_OscConfig+0x620>)
 800373a:	2101      	movs	r1, #1
 800373c:	438a      	bics	r2, r1
 800373e:	621a      	str	r2, [r3, #32]
 8003740:	4bb3      	ldr	r3, [pc, #716]	; (8003a10 <HAL_RCC_OscConfig+0x620>)
 8003742:	6a1a      	ldr	r2, [r3, #32]
 8003744:	4bb2      	ldr	r3, [pc, #712]	; (8003a10 <HAL_RCC_OscConfig+0x620>)
 8003746:	2104      	movs	r1, #4
 8003748:	438a      	bics	r2, r1
 800374a:	621a      	str	r2, [r3, #32]
 800374c:	e01c      	b.n	8003788 <HAL_RCC_OscConfig+0x398>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	2b05      	cmp	r3, #5
 8003754:	d10c      	bne.n	8003770 <HAL_RCC_OscConfig+0x380>
 8003756:	4bae      	ldr	r3, [pc, #696]	; (8003a10 <HAL_RCC_OscConfig+0x620>)
 8003758:	6a1a      	ldr	r2, [r3, #32]
 800375a:	4bad      	ldr	r3, [pc, #692]	; (8003a10 <HAL_RCC_OscConfig+0x620>)
 800375c:	2104      	movs	r1, #4
 800375e:	430a      	orrs	r2, r1
 8003760:	621a      	str	r2, [r3, #32]
 8003762:	4bab      	ldr	r3, [pc, #684]	; (8003a10 <HAL_RCC_OscConfig+0x620>)
 8003764:	6a1a      	ldr	r2, [r3, #32]
 8003766:	4baa      	ldr	r3, [pc, #680]	; (8003a10 <HAL_RCC_OscConfig+0x620>)
 8003768:	2101      	movs	r1, #1
 800376a:	430a      	orrs	r2, r1
 800376c:	621a      	str	r2, [r3, #32]
 800376e:	e00b      	b.n	8003788 <HAL_RCC_OscConfig+0x398>
 8003770:	4ba7      	ldr	r3, [pc, #668]	; (8003a10 <HAL_RCC_OscConfig+0x620>)
 8003772:	6a1a      	ldr	r2, [r3, #32]
 8003774:	4ba6      	ldr	r3, [pc, #664]	; (8003a10 <HAL_RCC_OscConfig+0x620>)
 8003776:	2101      	movs	r1, #1
 8003778:	438a      	bics	r2, r1
 800377a:	621a      	str	r2, [r3, #32]
 800377c:	4ba4      	ldr	r3, [pc, #656]	; (8003a10 <HAL_RCC_OscConfig+0x620>)
 800377e:	6a1a      	ldr	r2, [r3, #32]
 8003780:	4ba3      	ldr	r3, [pc, #652]	; (8003a10 <HAL_RCC_OscConfig+0x620>)
 8003782:	2104      	movs	r1, #4
 8003784:	438a      	bics	r2, r1
 8003786:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d014      	beq.n	80037ba <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003790:	f7fe fd7a 	bl	8002288 <HAL_GetTick>
 8003794:	0003      	movs	r3, r0
 8003796:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003798:	e009      	b.n	80037ae <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800379a:	f7fe fd75 	bl	8002288 <HAL_GetTick>
 800379e:	0002      	movs	r2, r0
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	4a9b      	ldr	r2, [pc, #620]	; (8003a14 <HAL_RCC_OscConfig+0x624>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e12b      	b.n	8003a06 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ae:	4b98      	ldr	r3, [pc, #608]	; (8003a10 <HAL_RCC_OscConfig+0x620>)
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	2202      	movs	r2, #2
 80037b4:	4013      	ands	r3, r2
 80037b6:	d0f0      	beq.n	800379a <HAL_RCC_OscConfig+0x3aa>
 80037b8:	e013      	b.n	80037e2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037ba:	f7fe fd65 	bl	8002288 <HAL_GetTick>
 80037be:	0003      	movs	r3, r0
 80037c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037c2:	e009      	b.n	80037d8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037c4:	f7fe fd60 	bl	8002288 <HAL_GetTick>
 80037c8:	0002      	movs	r2, r0
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	4a91      	ldr	r2, [pc, #580]	; (8003a14 <HAL_RCC_OscConfig+0x624>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d901      	bls.n	80037d8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e116      	b.n	8003a06 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037d8:	4b8d      	ldr	r3, [pc, #564]	; (8003a10 <HAL_RCC_OscConfig+0x620>)
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	2202      	movs	r2, #2
 80037de:	4013      	ands	r3, r2
 80037e0:	d1f0      	bne.n	80037c4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80037e2:	231f      	movs	r3, #31
 80037e4:	18fb      	adds	r3, r7, r3
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d105      	bne.n	80037f8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037ec:	4b88      	ldr	r3, [pc, #544]	; (8003a10 <HAL_RCC_OscConfig+0x620>)
 80037ee:	69da      	ldr	r2, [r3, #28]
 80037f0:	4b87      	ldr	r3, [pc, #540]	; (8003a10 <HAL_RCC_OscConfig+0x620>)
 80037f2:	4989      	ldr	r1, [pc, #548]	; (8003a18 <HAL_RCC_OscConfig+0x628>)
 80037f4:	400a      	ands	r2, r1
 80037f6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2210      	movs	r2, #16
 80037fe:	4013      	ands	r3, r2
 8003800:	d063      	beq.n	80038ca <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d12a      	bne.n	8003860 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800380a:	4b81      	ldr	r3, [pc, #516]	; (8003a10 <HAL_RCC_OscConfig+0x620>)
 800380c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800380e:	4b80      	ldr	r3, [pc, #512]	; (8003a10 <HAL_RCC_OscConfig+0x620>)
 8003810:	2104      	movs	r1, #4
 8003812:	430a      	orrs	r2, r1
 8003814:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003816:	4b7e      	ldr	r3, [pc, #504]	; (8003a10 <HAL_RCC_OscConfig+0x620>)
 8003818:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800381a:	4b7d      	ldr	r3, [pc, #500]	; (8003a10 <HAL_RCC_OscConfig+0x620>)
 800381c:	2101      	movs	r1, #1
 800381e:	430a      	orrs	r2, r1
 8003820:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003822:	f7fe fd31 	bl	8002288 <HAL_GetTick>
 8003826:	0003      	movs	r3, r0
 8003828:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800382a:	e008      	b.n	800383e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800382c:	f7fe fd2c 	bl	8002288 <HAL_GetTick>
 8003830:	0002      	movs	r2, r0
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b02      	cmp	r3, #2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e0e3      	b.n	8003a06 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800383e:	4b74      	ldr	r3, [pc, #464]	; (8003a10 <HAL_RCC_OscConfig+0x620>)
 8003840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003842:	2202      	movs	r2, #2
 8003844:	4013      	ands	r3, r2
 8003846:	d0f1      	beq.n	800382c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003848:	4b71      	ldr	r3, [pc, #452]	; (8003a10 <HAL_RCC_OscConfig+0x620>)
 800384a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800384c:	22f8      	movs	r2, #248	; 0xf8
 800384e:	4393      	bics	r3, r2
 8003850:	0019      	movs	r1, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	00da      	lsls	r2, r3, #3
 8003858:	4b6d      	ldr	r3, [pc, #436]	; (8003a10 <HAL_RCC_OscConfig+0x620>)
 800385a:	430a      	orrs	r2, r1
 800385c:	635a      	str	r2, [r3, #52]	; 0x34
 800385e:	e034      	b.n	80038ca <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	3305      	adds	r3, #5
 8003866:	d111      	bne.n	800388c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003868:	4b69      	ldr	r3, [pc, #420]	; (8003a10 <HAL_RCC_OscConfig+0x620>)
 800386a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800386c:	4b68      	ldr	r3, [pc, #416]	; (8003a10 <HAL_RCC_OscConfig+0x620>)
 800386e:	2104      	movs	r1, #4
 8003870:	438a      	bics	r2, r1
 8003872:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003874:	4b66      	ldr	r3, [pc, #408]	; (8003a10 <HAL_RCC_OscConfig+0x620>)
 8003876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003878:	22f8      	movs	r2, #248	; 0xf8
 800387a:	4393      	bics	r3, r2
 800387c:	0019      	movs	r1, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	00da      	lsls	r2, r3, #3
 8003884:	4b62      	ldr	r3, [pc, #392]	; (8003a10 <HAL_RCC_OscConfig+0x620>)
 8003886:	430a      	orrs	r2, r1
 8003888:	635a      	str	r2, [r3, #52]	; 0x34
 800388a:	e01e      	b.n	80038ca <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800388c:	4b60      	ldr	r3, [pc, #384]	; (8003a10 <HAL_RCC_OscConfig+0x620>)
 800388e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003890:	4b5f      	ldr	r3, [pc, #380]	; (8003a10 <HAL_RCC_OscConfig+0x620>)
 8003892:	2104      	movs	r1, #4
 8003894:	430a      	orrs	r2, r1
 8003896:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003898:	4b5d      	ldr	r3, [pc, #372]	; (8003a10 <HAL_RCC_OscConfig+0x620>)
 800389a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800389c:	4b5c      	ldr	r3, [pc, #368]	; (8003a10 <HAL_RCC_OscConfig+0x620>)
 800389e:	2101      	movs	r1, #1
 80038a0:	438a      	bics	r2, r1
 80038a2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038a4:	f7fe fcf0 	bl	8002288 <HAL_GetTick>
 80038a8:	0003      	movs	r3, r0
 80038aa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80038ac:	e008      	b.n	80038c0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80038ae:	f7fe fceb 	bl	8002288 <HAL_GetTick>
 80038b2:	0002      	movs	r2, r0
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d901      	bls.n	80038c0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e0a2      	b.n	8003a06 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80038c0:	4b53      	ldr	r3, [pc, #332]	; (8003a10 <HAL_RCC_OscConfig+0x620>)
 80038c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c4:	2202      	movs	r2, #2
 80038c6:	4013      	ands	r3, r2
 80038c8:	d1f1      	bne.n	80038ae <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d100      	bne.n	80038d4 <HAL_RCC_OscConfig+0x4e4>
 80038d2:	e097      	b.n	8003a04 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038d4:	4b4e      	ldr	r3, [pc, #312]	; (8003a10 <HAL_RCC_OscConfig+0x620>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	220c      	movs	r2, #12
 80038da:	4013      	ands	r3, r2
 80038dc:	2b08      	cmp	r3, #8
 80038de:	d100      	bne.n	80038e2 <HAL_RCC_OscConfig+0x4f2>
 80038e0:	e06b      	b.n	80039ba <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d14c      	bne.n	8003984 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ea:	4b49      	ldr	r3, [pc, #292]	; (8003a10 <HAL_RCC_OscConfig+0x620>)
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	4b48      	ldr	r3, [pc, #288]	; (8003a10 <HAL_RCC_OscConfig+0x620>)
 80038f0:	494a      	ldr	r1, [pc, #296]	; (8003a1c <HAL_RCC_OscConfig+0x62c>)
 80038f2:	400a      	ands	r2, r1
 80038f4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f6:	f7fe fcc7 	bl	8002288 <HAL_GetTick>
 80038fa:	0003      	movs	r3, r0
 80038fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038fe:	e008      	b.n	8003912 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003900:	f7fe fcc2 	bl	8002288 <HAL_GetTick>
 8003904:	0002      	movs	r2, r0
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e079      	b.n	8003a06 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003912:	4b3f      	ldr	r3, [pc, #252]	; (8003a10 <HAL_RCC_OscConfig+0x620>)
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	2380      	movs	r3, #128	; 0x80
 8003918:	049b      	lsls	r3, r3, #18
 800391a:	4013      	ands	r3, r2
 800391c:	d1f0      	bne.n	8003900 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800391e:	4b3c      	ldr	r3, [pc, #240]	; (8003a10 <HAL_RCC_OscConfig+0x620>)
 8003920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003922:	220f      	movs	r2, #15
 8003924:	4393      	bics	r3, r2
 8003926:	0019      	movs	r1, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800392c:	4b38      	ldr	r3, [pc, #224]	; (8003a10 <HAL_RCC_OscConfig+0x620>)
 800392e:	430a      	orrs	r2, r1
 8003930:	62da      	str	r2, [r3, #44]	; 0x2c
 8003932:	4b37      	ldr	r3, [pc, #220]	; (8003a10 <HAL_RCC_OscConfig+0x620>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	4a3a      	ldr	r2, [pc, #232]	; (8003a20 <HAL_RCC_OscConfig+0x630>)
 8003938:	4013      	ands	r3, r2
 800393a:	0019      	movs	r1, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003944:	431a      	orrs	r2, r3
 8003946:	4b32      	ldr	r3, [pc, #200]	; (8003a10 <HAL_RCC_OscConfig+0x620>)
 8003948:	430a      	orrs	r2, r1
 800394a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800394c:	4b30      	ldr	r3, [pc, #192]	; (8003a10 <HAL_RCC_OscConfig+0x620>)
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	4b2f      	ldr	r3, [pc, #188]	; (8003a10 <HAL_RCC_OscConfig+0x620>)
 8003952:	2180      	movs	r1, #128	; 0x80
 8003954:	0449      	lsls	r1, r1, #17
 8003956:	430a      	orrs	r2, r1
 8003958:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800395a:	f7fe fc95 	bl	8002288 <HAL_GetTick>
 800395e:	0003      	movs	r3, r0
 8003960:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003962:	e008      	b.n	8003976 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003964:	f7fe fc90 	bl	8002288 <HAL_GetTick>
 8003968:	0002      	movs	r2, r0
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b02      	cmp	r3, #2
 8003970:	d901      	bls.n	8003976 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e047      	b.n	8003a06 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003976:	4b26      	ldr	r3, [pc, #152]	; (8003a10 <HAL_RCC_OscConfig+0x620>)
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	2380      	movs	r3, #128	; 0x80
 800397c:	049b      	lsls	r3, r3, #18
 800397e:	4013      	ands	r3, r2
 8003980:	d0f0      	beq.n	8003964 <HAL_RCC_OscConfig+0x574>
 8003982:	e03f      	b.n	8003a04 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003984:	4b22      	ldr	r3, [pc, #136]	; (8003a10 <HAL_RCC_OscConfig+0x620>)
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	4b21      	ldr	r3, [pc, #132]	; (8003a10 <HAL_RCC_OscConfig+0x620>)
 800398a:	4924      	ldr	r1, [pc, #144]	; (8003a1c <HAL_RCC_OscConfig+0x62c>)
 800398c:	400a      	ands	r2, r1
 800398e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003990:	f7fe fc7a 	bl	8002288 <HAL_GetTick>
 8003994:	0003      	movs	r3, r0
 8003996:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003998:	e008      	b.n	80039ac <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800399a:	f7fe fc75 	bl	8002288 <HAL_GetTick>
 800399e:	0002      	movs	r2, r0
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d901      	bls.n	80039ac <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e02c      	b.n	8003a06 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039ac:	4b18      	ldr	r3, [pc, #96]	; (8003a10 <HAL_RCC_OscConfig+0x620>)
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	2380      	movs	r3, #128	; 0x80
 80039b2:	049b      	lsls	r3, r3, #18
 80039b4:	4013      	ands	r3, r2
 80039b6:	d1f0      	bne.n	800399a <HAL_RCC_OscConfig+0x5aa>
 80039b8:	e024      	b.n	8003a04 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d101      	bne.n	80039c6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e01f      	b.n	8003a06 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80039c6:	4b12      	ldr	r3, [pc, #72]	; (8003a10 <HAL_RCC_OscConfig+0x620>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80039cc:	4b10      	ldr	r3, [pc, #64]	; (8003a10 <HAL_RCC_OscConfig+0x620>)
 80039ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	2380      	movs	r3, #128	; 0x80
 80039d6:	025b      	lsls	r3, r3, #9
 80039d8:	401a      	ands	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039de:	429a      	cmp	r2, r3
 80039e0:	d10e      	bne.n	8003a00 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	220f      	movs	r2, #15
 80039e6:	401a      	ands	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d107      	bne.n	8003a00 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	23f0      	movs	r3, #240	; 0xf0
 80039f4:	039b      	lsls	r3, r3, #14
 80039f6:	401a      	ands	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d001      	beq.n	8003a04 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e000      	b.n	8003a06 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	0018      	movs	r0, r3
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	b008      	add	sp, #32
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	46c0      	nop			; (mov r8, r8)
 8003a10:	40021000 	.word	0x40021000
 8003a14:	00001388 	.word	0x00001388
 8003a18:	efffffff 	.word	0xefffffff
 8003a1c:	feffffff 	.word	0xfeffffff
 8003a20:	ffc2ffff 	.word	0xffc2ffff

08003a24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d101      	bne.n	8003a38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e0b3      	b.n	8003ba0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a38:	4b5b      	ldr	r3, [pc, #364]	; (8003ba8 <HAL_RCC_ClockConfig+0x184>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	4013      	ands	r3, r2
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d911      	bls.n	8003a6a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a46:	4b58      	ldr	r3, [pc, #352]	; (8003ba8 <HAL_RCC_ClockConfig+0x184>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	4393      	bics	r3, r2
 8003a4e:	0019      	movs	r1, r3
 8003a50:	4b55      	ldr	r3, [pc, #340]	; (8003ba8 <HAL_RCC_ClockConfig+0x184>)
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	430a      	orrs	r2, r1
 8003a56:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a58:	4b53      	ldr	r3, [pc, #332]	; (8003ba8 <HAL_RCC_ClockConfig+0x184>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	4013      	ands	r3, r2
 8003a60:	683a      	ldr	r2, [r7, #0]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d001      	beq.n	8003a6a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e09a      	b.n	8003ba0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2202      	movs	r2, #2
 8003a70:	4013      	ands	r3, r2
 8003a72:	d015      	beq.n	8003aa0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2204      	movs	r2, #4
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	d006      	beq.n	8003a8c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003a7e:	4b4b      	ldr	r3, [pc, #300]	; (8003bac <HAL_RCC_ClockConfig+0x188>)
 8003a80:	685a      	ldr	r2, [r3, #4]
 8003a82:	4b4a      	ldr	r3, [pc, #296]	; (8003bac <HAL_RCC_ClockConfig+0x188>)
 8003a84:	21e0      	movs	r1, #224	; 0xe0
 8003a86:	00c9      	lsls	r1, r1, #3
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a8c:	4b47      	ldr	r3, [pc, #284]	; (8003bac <HAL_RCC_ClockConfig+0x188>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	22f0      	movs	r2, #240	; 0xf0
 8003a92:	4393      	bics	r3, r2
 8003a94:	0019      	movs	r1, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	689a      	ldr	r2, [r3, #8]
 8003a9a:	4b44      	ldr	r3, [pc, #272]	; (8003bac <HAL_RCC_ClockConfig+0x188>)
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	d040      	beq.n	8003b2c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d107      	bne.n	8003ac2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ab2:	4b3e      	ldr	r3, [pc, #248]	; (8003bac <HAL_RCC_ClockConfig+0x188>)
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	2380      	movs	r3, #128	; 0x80
 8003ab8:	029b      	lsls	r3, r3, #10
 8003aba:	4013      	ands	r3, r2
 8003abc:	d114      	bne.n	8003ae8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e06e      	b.n	8003ba0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d107      	bne.n	8003ada <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aca:	4b38      	ldr	r3, [pc, #224]	; (8003bac <HAL_RCC_ClockConfig+0x188>)
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	2380      	movs	r3, #128	; 0x80
 8003ad0:	049b      	lsls	r3, r3, #18
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	d108      	bne.n	8003ae8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e062      	b.n	8003ba0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ada:	4b34      	ldr	r3, [pc, #208]	; (8003bac <HAL_RCC_ClockConfig+0x188>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2202      	movs	r2, #2
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	d101      	bne.n	8003ae8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e05b      	b.n	8003ba0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ae8:	4b30      	ldr	r3, [pc, #192]	; (8003bac <HAL_RCC_ClockConfig+0x188>)
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	2203      	movs	r2, #3
 8003aee:	4393      	bics	r3, r2
 8003af0:	0019      	movs	r1, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	4b2d      	ldr	r3, [pc, #180]	; (8003bac <HAL_RCC_ClockConfig+0x188>)
 8003af8:	430a      	orrs	r2, r1
 8003afa:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003afc:	f7fe fbc4 	bl	8002288 <HAL_GetTick>
 8003b00:	0003      	movs	r3, r0
 8003b02:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b04:	e009      	b.n	8003b1a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b06:	f7fe fbbf 	bl	8002288 <HAL_GetTick>
 8003b0a:	0002      	movs	r2, r0
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	4a27      	ldr	r2, [pc, #156]	; (8003bb0 <HAL_RCC_ClockConfig+0x18c>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e042      	b.n	8003ba0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b1a:	4b24      	ldr	r3, [pc, #144]	; (8003bac <HAL_RCC_ClockConfig+0x188>)
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	220c      	movs	r2, #12
 8003b20:	401a      	ands	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d1ec      	bne.n	8003b06 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b2c:	4b1e      	ldr	r3, [pc, #120]	; (8003ba8 <HAL_RCC_ClockConfig+0x184>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2201      	movs	r2, #1
 8003b32:	4013      	ands	r3, r2
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d211      	bcs.n	8003b5e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b3a:	4b1b      	ldr	r3, [pc, #108]	; (8003ba8 <HAL_RCC_ClockConfig+0x184>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	4393      	bics	r3, r2
 8003b42:	0019      	movs	r1, r3
 8003b44:	4b18      	ldr	r3, [pc, #96]	; (8003ba8 <HAL_RCC_ClockConfig+0x184>)
 8003b46:	683a      	ldr	r2, [r7, #0]
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b4c:	4b16      	ldr	r3, [pc, #88]	; (8003ba8 <HAL_RCC_ClockConfig+0x184>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2201      	movs	r2, #1
 8003b52:	4013      	ands	r3, r2
 8003b54:	683a      	ldr	r2, [r7, #0]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d001      	beq.n	8003b5e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e020      	b.n	8003ba0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2204      	movs	r2, #4
 8003b64:	4013      	ands	r3, r2
 8003b66:	d009      	beq.n	8003b7c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003b68:	4b10      	ldr	r3, [pc, #64]	; (8003bac <HAL_RCC_ClockConfig+0x188>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	4a11      	ldr	r2, [pc, #68]	; (8003bb4 <HAL_RCC_ClockConfig+0x190>)
 8003b6e:	4013      	ands	r3, r2
 8003b70:	0019      	movs	r1, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68da      	ldr	r2, [r3, #12]
 8003b76:	4b0d      	ldr	r3, [pc, #52]	; (8003bac <HAL_RCC_ClockConfig+0x188>)
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003b7c:	f000 f820 	bl	8003bc0 <HAL_RCC_GetSysClockFreq>
 8003b80:	0001      	movs	r1, r0
 8003b82:	4b0a      	ldr	r3, [pc, #40]	; (8003bac <HAL_RCC_ClockConfig+0x188>)
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	091b      	lsrs	r3, r3, #4
 8003b88:	220f      	movs	r2, #15
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	4a0a      	ldr	r2, [pc, #40]	; (8003bb8 <HAL_RCC_ClockConfig+0x194>)
 8003b8e:	5cd3      	ldrb	r3, [r2, r3]
 8003b90:	000a      	movs	r2, r1
 8003b92:	40da      	lsrs	r2, r3
 8003b94:	4b09      	ldr	r3, [pc, #36]	; (8003bbc <HAL_RCC_ClockConfig+0x198>)
 8003b96:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003b98:	2003      	movs	r0, #3
 8003b9a:	f7fe fb2f 	bl	80021fc <HAL_InitTick>
  
  return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	0018      	movs	r0, r3
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	b004      	add	sp, #16
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	40022000 	.word	0x40022000
 8003bac:	40021000 	.word	0x40021000
 8003bb0:	00001388 	.word	0x00001388
 8003bb4:	fffff8ff 	.word	0xfffff8ff
 8003bb8:	080056a8 	.word	0x080056a8
 8003bbc:	2000000c 	.word	0x2000000c

08003bc0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bc0:	b590      	push	{r4, r7, lr}
 8003bc2:	b08f      	sub	sp, #60	; 0x3c
 8003bc4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003bc6:	2314      	movs	r3, #20
 8003bc8:	18fb      	adds	r3, r7, r3
 8003bca:	4a2b      	ldr	r2, [pc, #172]	; (8003c78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bcc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003bce:	c313      	stmia	r3!, {r0, r1, r4}
 8003bd0:	6812      	ldr	r2, [r2, #0]
 8003bd2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003bd4:	1d3b      	adds	r3, r7, #4
 8003bd6:	4a29      	ldr	r2, [pc, #164]	; (8003c7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003bd8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003bda:	c313      	stmia	r3!, {r0, r1, r4}
 8003bdc:	6812      	ldr	r2, [r2, #0]
 8003bde:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003be0:	2300      	movs	r3, #0
 8003be2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003be4:	2300      	movs	r3, #0
 8003be6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003be8:	2300      	movs	r3, #0
 8003bea:	637b      	str	r3, [r7, #52]	; 0x34
 8003bec:	2300      	movs	r3, #0
 8003bee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003bf4:	4b22      	ldr	r3, [pc, #136]	; (8003c80 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bfc:	220c      	movs	r2, #12
 8003bfe:	4013      	ands	r3, r2
 8003c00:	2b04      	cmp	r3, #4
 8003c02:	d002      	beq.n	8003c0a <HAL_RCC_GetSysClockFreq+0x4a>
 8003c04:	2b08      	cmp	r3, #8
 8003c06:	d003      	beq.n	8003c10 <HAL_RCC_GetSysClockFreq+0x50>
 8003c08:	e02d      	b.n	8003c66 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c0a:	4b1e      	ldr	r3, [pc, #120]	; (8003c84 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003c0c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003c0e:	e02d      	b.n	8003c6c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c12:	0c9b      	lsrs	r3, r3, #18
 8003c14:	220f      	movs	r2, #15
 8003c16:	4013      	ands	r3, r2
 8003c18:	2214      	movs	r2, #20
 8003c1a:	18ba      	adds	r2, r7, r2
 8003c1c:	5cd3      	ldrb	r3, [r2, r3]
 8003c1e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003c20:	4b17      	ldr	r3, [pc, #92]	; (8003c80 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c24:	220f      	movs	r2, #15
 8003c26:	4013      	ands	r3, r2
 8003c28:	1d3a      	adds	r2, r7, #4
 8003c2a:	5cd3      	ldrb	r3, [r2, r3]
 8003c2c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003c2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c30:	2380      	movs	r3, #128	; 0x80
 8003c32:	025b      	lsls	r3, r3, #9
 8003c34:	4013      	ands	r3, r2
 8003c36:	d009      	beq.n	8003c4c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003c38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c3a:	4812      	ldr	r0, [pc, #72]	; (8003c84 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003c3c:	f7fc fa6e 	bl	800011c <__udivsi3>
 8003c40:	0003      	movs	r3, r0
 8003c42:	001a      	movs	r2, r3
 8003c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c46:	4353      	muls	r3, r2
 8003c48:	637b      	str	r3, [r7, #52]	; 0x34
 8003c4a:	e009      	b.n	8003c60 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003c4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c4e:	000a      	movs	r2, r1
 8003c50:	0152      	lsls	r2, r2, #5
 8003c52:	1a52      	subs	r2, r2, r1
 8003c54:	0193      	lsls	r3, r2, #6
 8003c56:	1a9b      	subs	r3, r3, r2
 8003c58:	00db      	lsls	r3, r3, #3
 8003c5a:	185b      	adds	r3, r3, r1
 8003c5c:	021b      	lsls	r3, r3, #8
 8003c5e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8003c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c62:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003c64:	e002      	b.n	8003c6c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c66:	4b07      	ldr	r3, [pc, #28]	; (8003c84 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003c68:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003c6a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003c6e:	0018      	movs	r0, r3
 8003c70:	46bd      	mov	sp, r7
 8003c72:	b00f      	add	sp, #60	; 0x3c
 8003c74:	bd90      	pop	{r4, r7, pc}
 8003c76:	46c0      	nop			; (mov r8, r8)
 8003c78:	080055e8 	.word	0x080055e8
 8003c7c:	080055f8 	.word	0x080055f8
 8003c80:	40021000 	.word	0x40021000
 8003c84:	007a1200 	.word	0x007a1200

08003c88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c8c:	4b02      	ldr	r3, [pc, #8]	; (8003c98 <HAL_RCC_GetHCLKFreq+0x10>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
}
 8003c90:	0018      	movs	r0, r3
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	46c0      	nop			; (mov r8, r8)
 8003c98:	2000000c 	.word	0x2000000c

08003c9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003ca0:	f7ff fff2 	bl	8003c88 <HAL_RCC_GetHCLKFreq>
 8003ca4:	0001      	movs	r1, r0
 8003ca6:	4b06      	ldr	r3, [pc, #24]	; (8003cc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	0a1b      	lsrs	r3, r3, #8
 8003cac:	2207      	movs	r2, #7
 8003cae:	4013      	ands	r3, r2
 8003cb0:	4a04      	ldr	r2, [pc, #16]	; (8003cc4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003cb2:	5cd3      	ldrb	r3, [r2, r3]
 8003cb4:	40d9      	lsrs	r1, r3
 8003cb6:	000b      	movs	r3, r1
}    
 8003cb8:	0018      	movs	r0, r3
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	46c0      	nop			; (mov r8, r8)
 8003cc0:	40021000 	.word	0x40021000
 8003cc4:	080056b8 	.word	0x080056b8

08003cc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	2380      	movs	r3, #128	; 0x80
 8003cde:	025b      	lsls	r3, r3, #9
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	d100      	bne.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003ce4:	e08e      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003ce6:	2017      	movs	r0, #23
 8003ce8:	183b      	adds	r3, r7, r0
 8003cea:	2200      	movs	r2, #0
 8003cec:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cee:	4b57      	ldr	r3, [pc, #348]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003cf0:	69da      	ldr	r2, [r3, #28]
 8003cf2:	2380      	movs	r3, #128	; 0x80
 8003cf4:	055b      	lsls	r3, r3, #21
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	d110      	bne.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003cfa:	4b54      	ldr	r3, [pc, #336]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003cfc:	69da      	ldr	r2, [r3, #28]
 8003cfe:	4b53      	ldr	r3, [pc, #332]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003d00:	2180      	movs	r1, #128	; 0x80
 8003d02:	0549      	lsls	r1, r1, #21
 8003d04:	430a      	orrs	r2, r1
 8003d06:	61da      	str	r2, [r3, #28]
 8003d08:	4b50      	ldr	r3, [pc, #320]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003d0a:	69da      	ldr	r2, [r3, #28]
 8003d0c:	2380      	movs	r3, #128	; 0x80
 8003d0e:	055b      	lsls	r3, r3, #21
 8003d10:	4013      	ands	r3, r2
 8003d12:	60bb      	str	r3, [r7, #8]
 8003d14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d16:	183b      	adds	r3, r7, r0
 8003d18:	2201      	movs	r2, #1
 8003d1a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d1c:	4b4c      	ldr	r3, [pc, #304]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	2380      	movs	r3, #128	; 0x80
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	4013      	ands	r3, r2
 8003d26:	d11a      	bne.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d28:	4b49      	ldr	r3, [pc, #292]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	4b48      	ldr	r3, [pc, #288]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003d2e:	2180      	movs	r1, #128	; 0x80
 8003d30:	0049      	lsls	r1, r1, #1
 8003d32:	430a      	orrs	r2, r1
 8003d34:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d36:	f7fe faa7 	bl	8002288 <HAL_GetTick>
 8003d3a:	0003      	movs	r3, r0
 8003d3c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d3e:	e008      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d40:	f7fe faa2 	bl	8002288 <HAL_GetTick>
 8003d44:	0002      	movs	r2, r0
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b64      	cmp	r3, #100	; 0x64
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e077      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d52:	4b3f      	ldr	r3, [pc, #252]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	2380      	movs	r3, #128	; 0x80
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	d0f0      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d5e:	4b3b      	ldr	r3, [pc, #236]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003d60:	6a1a      	ldr	r2, [r3, #32]
 8003d62:	23c0      	movs	r3, #192	; 0xc0
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	4013      	ands	r3, r2
 8003d68:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d034      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	23c0      	movs	r3, #192	; 0xc0
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	4013      	ands	r3, r2
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d02c      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d80:	4b32      	ldr	r3, [pc, #200]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	4a33      	ldr	r2, [pc, #204]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003d86:	4013      	ands	r3, r2
 8003d88:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d8a:	4b30      	ldr	r3, [pc, #192]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003d8c:	6a1a      	ldr	r2, [r3, #32]
 8003d8e:	4b2f      	ldr	r3, [pc, #188]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003d90:	2180      	movs	r1, #128	; 0x80
 8003d92:	0249      	lsls	r1, r1, #9
 8003d94:	430a      	orrs	r2, r1
 8003d96:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d98:	4b2c      	ldr	r3, [pc, #176]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003d9a:	6a1a      	ldr	r2, [r3, #32]
 8003d9c:	4b2b      	ldr	r3, [pc, #172]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003d9e:	492e      	ldr	r1, [pc, #184]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003da0:	400a      	ands	r2, r1
 8003da2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003da4:	4b29      	ldr	r3, [pc, #164]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2201      	movs	r2, #1
 8003dae:	4013      	ands	r3, r2
 8003db0:	d013      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db2:	f7fe fa69 	bl	8002288 <HAL_GetTick>
 8003db6:	0003      	movs	r3, r0
 8003db8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dba:	e009      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dbc:	f7fe fa64 	bl	8002288 <HAL_GetTick>
 8003dc0:	0002      	movs	r2, r0
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	4a25      	ldr	r2, [pc, #148]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d901      	bls.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e038      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dd0:	4b1e      	ldr	r3, [pc, #120]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003dd2:	6a1b      	ldr	r3, [r3, #32]
 8003dd4:	2202      	movs	r2, #2
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	d0f0      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dda:	4b1c      	ldr	r3, [pc, #112]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	4a1d      	ldr	r2, [pc, #116]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003de0:	4013      	ands	r3, r2
 8003de2:	0019      	movs	r1, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685a      	ldr	r2, [r3, #4]
 8003de8:	4b18      	ldr	r3, [pc, #96]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003dea:	430a      	orrs	r2, r1
 8003dec:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003dee:	2317      	movs	r3, #23
 8003df0:	18fb      	adds	r3, r7, r3
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d105      	bne.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003df8:	4b14      	ldr	r3, [pc, #80]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003dfa:	69da      	ldr	r2, [r3, #28]
 8003dfc:	4b13      	ldr	r3, [pc, #76]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003dfe:	4918      	ldr	r1, [pc, #96]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8003e00:	400a      	ands	r2, r1
 8003e02:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	d009      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e0e:	4b0f      	ldr	r3, [pc, #60]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e12:	2203      	movs	r2, #3
 8003e14:	4393      	bics	r3, r2
 8003e16:	0019      	movs	r1, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689a      	ldr	r2, [r3, #8]
 8003e1c:	4b0b      	ldr	r3, [pc, #44]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2220      	movs	r2, #32
 8003e28:	4013      	ands	r3, r2
 8003e2a:	d009      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e2c:	4b07      	ldr	r3, [pc, #28]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e30:	2210      	movs	r2, #16
 8003e32:	4393      	bics	r3, r2
 8003e34:	0019      	movs	r1, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	68da      	ldr	r2, [r3, #12]
 8003e3a:	4b04      	ldr	r3, [pc, #16]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	0018      	movs	r0, r3
 8003e44:	46bd      	mov	sp, r7
 8003e46:	b006      	add	sp, #24
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	46c0      	nop			; (mov r8, r8)
 8003e4c:	40021000 	.word	0x40021000
 8003e50:	40007000 	.word	0x40007000
 8003e54:	fffffcff 	.word	0xfffffcff
 8003e58:	fffeffff 	.word	0xfffeffff
 8003e5c:	00001388 	.word	0x00001388
 8003e60:	efffffff 	.word	0xefffffff

08003e64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e042      	b.n	8003efc <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	223d      	movs	r2, #61	; 0x3d
 8003e7a:	5c9b      	ldrb	r3, [r3, r2]
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d107      	bne.n	8003e92 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	223c      	movs	r2, #60	; 0x3c
 8003e86:	2100      	movs	r1, #0
 8003e88:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	0018      	movs	r0, r3
 8003e8e:	f7fe f85d 	bl	8001f4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	223d      	movs	r2, #61	; 0x3d
 8003e96:	2102      	movs	r1, #2
 8003e98:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	0019      	movs	r1, r3
 8003ea4:	0010      	movs	r0, r2
 8003ea6:	f000 f9b7 	bl	8004218 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2246      	movs	r2, #70	; 0x46
 8003eae:	2101      	movs	r1, #1
 8003eb0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	223e      	movs	r2, #62	; 0x3e
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	5499      	strb	r1, [r3, r2]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	223f      	movs	r2, #63	; 0x3f
 8003ebe:	2101      	movs	r1, #1
 8003ec0:	5499      	strb	r1, [r3, r2]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2240      	movs	r2, #64	; 0x40
 8003ec6:	2101      	movs	r1, #1
 8003ec8:	5499      	strb	r1, [r3, r2]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2241      	movs	r2, #65	; 0x41
 8003ece:	2101      	movs	r1, #1
 8003ed0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2242      	movs	r2, #66	; 0x42
 8003ed6:	2101      	movs	r1, #1
 8003ed8:	5499      	strb	r1, [r3, r2]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2243      	movs	r2, #67	; 0x43
 8003ede:	2101      	movs	r1, #1
 8003ee0:	5499      	strb	r1, [r3, r2]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2244      	movs	r2, #68	; 0x44
 8003ee6:	2101      	movs	r1, #1
 8003ee8:	5499      	strb	r1, [r3, r2]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2245      	movs	r2, #69	; 0x45
 8003eee:	2101      	movs	r1, #1
 8003ef0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	223d      	movs	r2, #61	; 0x3d
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	0018      	movs	r0, r3
 8003efe:	46bd      	mov	sp, r7
 8003f00:	b002      	add	sp, #8
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	223d      	movs	r2, #61	; 0x3d
 8003f10:	5c9b      	ldrb	r3, [r3, r2]
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d001      	beq.n	8003f1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e035      	b.n	8003f88 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	223d      	movs	r2, #61	; 0x3d
 8003f20:	2102      	movs	r1, #2
 8003f22:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68da      	ldr	r2, [r3, #12]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2101      	movs	r1, #1
 8003f30:	430a      	orrs	r2, r1
 8003f32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a15      	ldr	r2, [pc, #84]	; (8003f90 <HAL_TIM_Base_Start_IT+0x8c>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d009      	beq.n	8003f52 <HAL_TIM_Base_Start_IT+0x4e>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a14      	ldr	r2, [pc, #80]	; (8003f94 <HAL_TIM_Base_Start_IT+0x90>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d004      	beq.n	8003f52 <HAL_TIM_Base_Start_IT+0x4e>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a12      	ldr	r2, [pc, #72]	; (8003f98 <HAL_TIM_Base_Start_IT+0x94>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d111      	bne.n	8003f76 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	2207      	movs	r2, #7
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2b06      	cmp	r3, #6
 8003f62:	d010      	beq.n	8003f86 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2101      	movs	r1, #1
 8003f70:	430a      	orrs	r2, r1
 8003f72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f74:	e007      	b.n	8003f86 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2101      	movs	r1, #1
 8003f82:	430a      	orrs	r2, r1
 8003f84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	0018      	movs	r0, r3
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	b004      	add	sp, #16
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	40012c00 	.word	0x40012c00
 8003f94:	40000400 	.word	0x40000400
 8003f98:	40014000 	.word	0x40014000

08003f9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	2202      	movs	r2, #2
 8003fac:	4013      	ands	r3, r2
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d124      	bne.n	8003ffc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	2202      	movs	r2, #2
 8003fba:	4013      	ands	r3, r2
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d11d      	bne.n	8003ffc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2203      	movs	r2, #3
 8003fc6:	4252      	negs	r2, r2
 8003fc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	2203      	movs	r2, #3
 8003fd8:	4013      	ands	r3, r2
 8003fda:	d004      	beq.n	8003fe6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	0018      	movs	r0, r3
 8003fe0:	f000 f902 	bl	80041e8 <HAL_TIM_IC_CaptureCallback>
 8003fe4:	e007      	b.n	8003ff6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	0018      	movs	r0, r3
 8003fea:	f000 f8f5 	bl	80041d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	0018      	movs	r0, r3
 8003ff2:	f000 f901 	bl	80041f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	2204      	movs	r2, #4
 8004004:	4013      	ands	r3, r2
 8004006:	2b04      	cmp	r3, #4
 8004008:	d125      	bne.n	8004056 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	2204      	movs	r2, #4
 8004012:	4013      	ands	r3, r2
 8004014:	2b04      	cmp	r3, #4
 8004016:	d11e      	bne.n	8004056 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2205      	movs	r2, #5
 800401e:	4252      	negs	r2, r2
 8004020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2202      	movs	r2, #2
 8004026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	699a      	ldr	r2, [r3, #24]
 800402e:	23c0      	movs	r3, #192	; 0xc0
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	4013      	ands	r3, r2
 8004034:	d004      	beq.n	8004040 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	0018      	movs	r0, r3
 800403a:	f000 f8d5 	bl	80041e8 <HAL_TIM_IC_CaptureCallback>
 800403e:	e007      	b.n	8004050 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	0018      	movs	r0, r3
 8004044:	f000 f8c8 	bl	80041d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	0018      	movs	r0, r3
 800404c:	f000 f8d4 	bl	80041f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	2208      	movs	r2, #8
 800405e:	4013      	ands	r3, r2
 8004060:	2b08      	cmp	r3, #8
 8004062:	d124      	bne.n	80040ae <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	2208      	movs	r2, #8
 800406c:	4013      	ands	r3, r2
 800406e:	2b08      	cmp	r3, #8
 8004070:	d11d      	bne.n	80040ae <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2209      	movs	r2, #9
 8004078:	4252      	negs	r2, r2
 800407a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2204      	movs	r2, #4
 8004080:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	2203      	movs	r2, #3
 800408a:	4013      	ands	r3, r2
 800408c:	d004      	beq.n	8004098 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	0018      	movs	r0, r3
 8004092:	f000 f8a9 	bl	80041e8 <HAL_TIM_IC_CaptureCallback>
 8004096:	e007      	b.n	80040a8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	0018      	movs	r0, r3
 800409c:	f000 f89c 	bl	80041d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	0018      	movs	r0, r3
 80040a4:	f000 f8a8 	bl	80041f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	2210      	movs	r2, #16
 80040b6:	4013      	ands	r3, r2
 80040b8:	2b10      	cmp	r3, #16
 80040ba:	d125      	bne.n	8004108 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	2210      	movs	r2, #16
 80040c4:	4013      	ands	r3, r2
 80040c6:	2b10      	cmp	r3, #16
 80040c8:	d11e      	bne.n	8004108 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2211      	movs	r2, #17
 80040d0:	4252      	negs	r2, r2
 80040d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2208      	movs	r2, #8
 80040d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	69da      	ldr	r2, [r3, #28]
 80040e0:	23c0      	movs	r3, #192	; 0xc0
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4013      	ands	r3, r2
 80040e6:	d004      	beq.n	80040f2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	0018      	movs	r0, r3
 80040ec:	f000 f87c 	bl	80041e8 <HAL_TIM_IC_CaptureCallback>
 80040f0:	e007      	b.n	8004102 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	0018      	movs	r0, r3
 80040f6:	f000 f86f 	bl	80041d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	0018      	movs	r0, r3
 80040fe:	f000 f87b 	bl	80041f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	2201      	movs	r2, #1
 8004110:	4013      	ands	r3, r2
 8004112:	2b01      	cmp	r3, #1
 8004114:	d10f      	bne.n	8004136 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	2201      	movs	r2, #1
 800411e:	4013      	ands	r3, r2
 8004120:	2b01      	cmp	r3, #1
 8004122:	d108      	bne.n	8004136 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2202      	movs	r2, #2
 800412a:	4252      	negs	r2, r2
 800412c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	0018      	movs	r0, r3
 8004132:	f000 f849 	bl	80041c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	2280      	movs	r2, #128	; 0x80
 800413e:	4013      	ands	r3, r2
 8004140:	2b80      	cmp	r3, #128	; 0x80
 8004142:	d10f      	bne.n	8004164 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	2280      	movs	r2, #128	; 0x80
 800414c:	4013      	ands	r3, r2
 800414e:	2b80      	cmp	r3, #128	; 0x80
 8004150:	d108      	bne.n	8004164 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2281      	movs	r2, #129	; 0x81
 8004158:	4252      	negs	r2, r2
 800415a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	0018      	movs	r0, r3
 8004160:	f000 f8d8 	bl	8004314 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	2240      	movs	r2, #64	; 0x40
 800416c:	4013      	ands	r3, r2
 800416e:	2b40      	cmp	r3, #64	; 0x40
 8004170:	d10f      	bne.n	8004192 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	2240      	movs	r2, #64	; 0x40
 800417a:	4013      	ands	r3, r2
 800417c:	2b40      	cmp	r3, #64	; 0x40
 800417e:	d108      	bne.n	8004192 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2241      	movs	r2, #65	; 0x41
 8004186:	4252      	negs	r2, r2
 8004188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	0018      	movs	r0, r3
 800418e:	f000 f83b 	bl	8004208 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	2220      	movs	r2, #32
 800419a:	4013      	ands	r3, r2
 800419c:	2b20      	cmp	r3, #32
 800419e:	d10f      	bne.n	80041c0 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	2220      	movs	r2, #32
 80041a8:	4013      	ands	r3, r2
 80041aa:	2b20      	cmp	r3, #32
 80041ac:	d108      	bne.n	80041c0 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2221      	movs	r2, #33	; 0x21
 80041b4:	4252      	negs	r2, r2
 80041b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	0018      	movs	r0, r3
 80041bc:	f000 f8a2 	bl	8004304 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041c0:	46c0      	nop			; (mov r8, r8)
 80041c2:	46bd      	mov	sp, r7
 80041c4:	b002      	add	sp, #8
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80041d0:	46c0      	nop			; (mov r8, r8)
 80041d2:	46bd      	mov	sp, r7
 80041d4:	b002      	add	sp, #8
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041e0:	46c0      	nop			; (mov r8, r8)
 80041e2:	46bd      	mov	sp, r7
 80041e4:	b002      	add	sp, #8
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041f0:	46c0      	nop			; (mov r8, r8)
 80041f2:	46bd      	mov	sp, r7
 80041f4:	b002      	add	sp, #8
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004200:	46c0      	nop			; (mov r8, r8)
 8004202:	46bd      	mov	sp, r7
 8004204:	b002      	add	sp, #8
 8004206:	bd80      	pop	{r7, pc}

08004208 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004210:	46c0      	nop			; (mov r8, r8)
 8004212:	46bd      	mov	sp, r7
 8004214:	b002      	add	sp, #8
 8004216:	bd80      	pop	{r7, pc}

08004218 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a2f      	ldr	r2, [pc, #188]	; (80042e8 <TIM_Base_SetConfig+0xd0>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d003      	beq.n	8004238 <TIM_Base_SetConfig+0x20>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a2e      	ldr	r2, [pc, #184]	; (80042ec <TIM_Base_SetConfig+0xd4>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d108      	bne.n	800424a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2270      	movs	r2, #112	; 0x70
 800423c:	4393      	bics	r3, r2
 800423e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	4313      	orrs	r3, r2
 8004248:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a26      	ldr	r2, [pc, #152]	; (80042e8 <TIM_Base_SetConfig+0xd0>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d013      	beq.n	800427a <TIM_Base_SetConfig+0x62>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a25      	ldr	r2, [pc, #148]	; (80042ec <TIM_Base_SetConfig+0xd4>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d00f      	beq.n	800427a <TIM_Base_SetConfig+0x62>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a24      	ldr	r2, [pc, #144]	; (80042f0 <TIM_Base_SetConfig+0xd8>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d00b      	beq.n	800427a <TIM_Base_SetConfig+0x62>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a23      	ldr	r2, [pc, #140]	; (80042f4 <TIM_Base_SetConfig+0xdc>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d007      	beq.n	800427a <TIM_Base_SetConfig+0x62>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a22      	ldr	r2, [pc, #136]	; (80042f8 <TIM_Base_SetConfig+0xe0>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d003      	beq.n	800427a <TIM_Base_SetConfig+0x62>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a21      	ldr	r2, [pc, #132]	; (80042fc <TIM_Base_SetConfig+0xe4>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d108      	bne.n	800428c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	4a20      	ldr	r2, [pc, #128]	; (8004300 <TIM_Base_SetConfig+0xe8>)
 800427e:	4013      	ands	r3, r2
 8004280:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	4313      	orrs	r3, r2
 800428a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2280      	movs	r2, #128	; 0x80
 8004290:	4393      	bics	r3, r2
 8004292:	001a      	movs	r2, r3
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	695b      	ldr	r3, [r3, #20]
 8004298:	4313      	orrs	r3, r2
 800429a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	689a      	ldr	r2, [r3, #8]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a0c      	ldr	r2, [pc, #48]	; (80042e8 <TIM_Base_SetConfig+0xd0>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d00b      	beq.n	80042d2 <TIM_Base_SetConfig+0xba>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a0d      	ldr	r2, [pc, #52]	; (80042f4 <TIM_Base_SetConfig+0xdc>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d007      	beq.n	80042d2 <TIM_Base_SetConfig+0xba>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a0c      	ldr	r2, [pc, #48]	; (80042f8 <TIM_Base_SetConfig+0xe0>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d003      	beq.n	80042d2 <TIM_Base_SetConfig+0xba>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a0b      	ldr	r2, [pc, #44]	; (80042fc <TIM_Base_SetConfig+0xe4>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d103      	bne.n	80042da <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	691a      	ldr	r2, [r3, #16]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	615a      	str	r2, [r3, #20]
}
 80042e0:	46c0      	nop			; (mov r8, r8)
 80042e2:	46bd      	mov	sp, r7
 80042e4:	b004      	add	sp, #16
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	40012c00 	.word	0x40012c00
 80042ec:	40000400 	.word	0x40000400
 80042f0:	40002000 	.word	0x40002000
 80042f4:	40014000 	.word	0x40014000
 80042f8:	40014400 	.word	0x40014400
 80042fc:	40014800 	.word	0x40014800
 8004300:	fffffcff 	.word	0xfffffcff

08004304 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800430c:	46c0      	nop			; (mov r8, r8)
 800430e:	46bd      	mov	sp, r7
 8004310:	b002      	add	sp, #8
 8004312:	bd80      	pop	{r7, pc}

08004314 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800431c:	46c0      	nop			; (mov r8, r8)
 800431e:	46bd      	mov	sp, r7
 8004320:	b002      	add	sp, #8
 8004322:	bd80      	pop	{r7, pc}

08004324 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b08a      	sub	sp, #40	; 0x28
 8004328:	af02      	add	r7, sp, #8
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	603b      	str	r3, [r7, #0]
 8004330:	1dbb      	adds	r3, r7, #6
 8004332:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004338:	2b20      	cmp	r3, #32
 800433a:	d000      	beq.n	800433e <HAL_UART_Transmit+0x1a>
 800433c:	e096      	b.n	800446c <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d003      	beq.n	800434c <HAL_UART_Transmit+0x28>
 8004344:	1dbb      	adds	r3, r7, #6
 8004346:	881b      	ldrh	r3, [r3, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d101      	bne.n	8004350 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e08e      	b.n	800446e <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	689a      	ldr	r2, [r3, #8]
 8004354:	2380      	movs	r3, #128	; 0x80
 8004356:	015b      	lsls	r3, r3, #5
 8004358:	429a      	cmp	r2, r3
 800435a:	d109      	bne.n	8004370 <HAL_UART_Transmit+0x4c>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d105      	bne.n	8004370 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	2201      	movs	r2, #1
 8004368:	4013      	ands	r3, r2
 800436a:	d001      	beq.n	8004370 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e07e      	b.n	800446e <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2274      	movs	r2, #116	; 0x74
 8004374:	5c9b      	ldrb	r3, [r3, r2]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d101      	bne.n	800437e <HAL_UART_Transmit+0x5a>
 800437a:	2302      	movs	r3, #2
 800437c:	e077      	b.n	800446e <HAL_UART_Transmit+0x14a>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2274      	movs	r2, #116	; 0x74
 8004382:	2101      	movs	r1, #1
 8004384:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2280      	movs	r2, #128	; 0x80
 800438a:	2100      	movs	r1, #0
 800438c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2221      	movs	r2, #33	; 0x21
 8004392:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004394:	f7fd ff78 	bl	8002288 <HAL_GetTick>
 8004398:	0003      	movs	r3, r0
 800439a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	1dba      	adds	r2, r7, #6
 80043a0:	2150      	movs	r1, #80	; 0x50
 80043a2:	8812      	ldrh	r2, [r2, #0]
 80043a4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	1dba      	adds	r2, r7, #6
 80043aa:	2152      	movs	r1, #82	; 0x52
 80043ac:	8812      	ldrh	r2, [r2, #0]
 80043ae:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	689a      	ldr	r2, [r3, #8]
 80043b4:	2380      	movs	r3, #128	; 0x80
 80043b6:	015b      	lsls	r3, r3, #5
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d108      	bne.n	80043ce <HAL_UART_Transmit+0xaa>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d104      	bne.n	80043ce <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80043c4:	2300      	movs	r3, #0
 80043c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	61bb      	str	r3, [r7, #24]
 80043cc:	e003      	b.n	80043d6 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043d2:	2300      	movs	r3, #0
 80043d4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2274      	movs	r2, #116	; 0x74
 80043da:	2100      	movs	r1, #0
 80043dc:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80043de:	e02d      	b.n	800443c <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	9300      	str	r3, [sp, #0]
 80043e8:	0013      	movs	r3, r2
 80043ea:	2200      	movs	r2, #0
 80043ec:	2180      	movs	r1, #128	; 0x80
 80043ee:	f000 fa7f 	bl	80048f0 <UART_WaitOnFlagUntilTimeout>
 80043f2:	1e03      	subs	r3, r0, #0
 80043f4:	d001      	beq.n	80043fa <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e039      	b.n	800446e <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d10b      	bne.n	8004418 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	881a      	ldrh	r2, [r3, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	05d2      	lsls	r2, r2, #23
 800440a:	0dd2      	lsrs	r2, r2, #23
 800440c:	b292      	uxth	r2, r2
 800440e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	3302      	adds	r3, #2
 8004414:	61bb      	str	r3, [r7, #24]
 8004416:	e008      	b.n	800442a <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	781a      	ldrb	r2, [r3, #0]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	b292      	uxth	r2, r2
 8004422:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	3301      	adds	r3, #1
 8004428:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2252      	movs	r2, #82	; 0x52
 800442e:	5a9b      	ldrh	r3, [r3, r2]
 8004430:	b29b      	uxth	r3, r3
 8004432:	3b01      	subs	r3, #1
 8004434:	b299      	uxth	r1, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2252      	movs	r2, #82	; 0x52
 800443a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2252      	movs	r2, #82	; 0x52
 8004440:	5a9b      	ldrh	r3, [r3, r2]
 8004442:	b29b      	uxth	r3, r3
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1cb      	bne.n	80043e0 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	9300      	str	r3, [sp, #0]
 8004450:	0013      	movs	r3, r2
 8004452:	2200      	movs	r2, #0
 8004454:	2140      	movs	r1, #64	; 0x40
 8004456:	f000 fa4b 	bl	80048f0 <UART_WaitOnFlagUntilTimeout>
 800445a:	1e03      	subs	r3, r0, #0
 800445c:	d001      	beq.n	8004462 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e005      	b.n	800446e <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2220      	movs	r2, #32
 8004466:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004468:	2300      	movs	r3, #0
 800446a:	e000      	b.n	800446e <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800446c:	2302      	movs	r3, #2
  }
}
 800446e:	0018      	movs	r0, r3
 8004470:	46bd      	mov	sp, r7
 8004472:	b008      	add	sp, #32
 8004474:	bd80      	pop	{r7, pc}
	...

08004478 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b088      	sub	sp, #32
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004480:	231e      	movs	r3, #30
 8004482:	18fb      	adds	r3, r7, r3
 8004484:	2200      	movs	r2, #0
 8004486:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689a      	ldr	r2, [r3, #8]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	431a      	orrs	r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	431a      	orrs	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	69db      	ldr	r3, [r3, #28]
 800449c:	4313      	orrs	r3, r2
 800449e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a8d      	ldr	r2, [pc, #564]	; (80046dc <UART_SetConfig+0x264>)
 80044a8:	4013      	ands	r3, r2
 80044aa:	0019      	movs	r1, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	430a      	orrs	r2, r1
 80044b4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	4a88      	ldr	r2, [pc, #544]	; (80046e0 <UART_SetConfig+0x268>)
 80044be:	4013      	ands	r3, r2
 80044c0:	0019      	movs	r1, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	68da      	ldr	r2, [r3, #12]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	430a      	orrs	r2, r1
 80044cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a1b      	ldr	r3, [r3, #32]
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	4313      	orrs	r3, r2
 80044dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	4a7f      	ldr	r2, [pc, #508]	; (80046e4 <UART_SetConfig+0x26c>)
 80044e6:	4013      	ands	r3, r2
 80044e8:	0019      	movs	r1, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	697a      	ldr	r2, [r7, #20]
 80044f0:	430a      	orrs	r2, r1
 80044f2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a7b      	ldr	r2, [pc, #492]	; (80046e8 <UART_SetConfig+0x270>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d127      	bne.n	800454e <UART_SetConfig+0xd6>
 80044fe:	4b7b      	ldr	r3, [pc, #492]	; (80046ec <UART_SetConfig+0x274>)
 8004500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004502:	2203      	movs	r2, #3
 8004504:	4013      	ands	r3, r2
 8004506:	2b03      	cmp	r3, #3
 8004508:	d00d      	beq.n	8004526 <UART_SetConfig+0xae>
 800450a:	d81b      	bhi.n	8004544 <UART_SetConfig+0xcc>
 800450c:	2b02      	cmp	r3, #2
 800450e:	d014      	beq.n	800453a <UART_SetConfig+0xc2>
 8004510:	d818      	bhi.n	8004544 <UART_SetConfig+0xcc>
 8004512:	2b00      	cmp	r3, #0
 8004514:	d002      	beq.n	800451c <UART_SetConfig+0xa4>
 8004516:	2b01      	cmp	r3, #1
 8004518:	d00a      	beq.n	8004530 <UART_SetConfig+0xb8>
 800451a:	e013      	b.n	8004544 <UART_SetConfig+0xcc>
 800451c:	231f      	movs	r3, #31
 800451e:	18fb      	adds	r3, r7, r3
 8004520:	2200      	movs	r2, #0
 8004522:	701a      	strb	r2, [r3, #0]
 8004524:	e021      	b.n	800456a <UART_SetConfig+0xf2>
 8004526:	231f      	movs	r3, #31
 8004528:	18fb      	adds	r3, r7, r3
 800452a:	2202      	movs	r2, #2
 800452c:	701a      	strb	r2, [r3, #0]
 800452e:	e01c      	b.n	800456a <UART_SetConfig+0xf2>
 8004530:	231f      	movs	r3, #31
 8004532:	18fb      	adds	r3, r7, r3
 8004534:	2204      	movs	r2, #4
 8004536:	701a      	strb	r2, [r3, #0]
 8004538:	e017      	b.n	800456a <UART_SetConfig+0xf2>
 800453a:	231f      	movs	r3, #31
 800453c:	18fb      	adds	r3, r7, r3
 800453e:	2208      	movs	r2, #8
 8004540:	701a      	strb	r2, [r3, #0]
 8004542:	e012      	b.n	800456a <UART_SetConfig+0xf2>
 8004544:	231f      	movs	r3, #31
 8004546:	18fb      	adds	r3, r7, r3
 8004548:	2210      	movs	r2, #16
 800454a:	701a      	strb	r2, [r3, #0]
 800454c:	e00d      	b.n	800456a <UART_SetConfig+0xf2>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a67      	ldr	r2, [pc, #412]	; (80046f0 <UART_SetConfig+0x278>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d104      	bne.n	8004562 <UART_SetConfig+0xea>
 8004558:	231f      	movs	r3, #31
 800455a:	18fb      	adds	r3, r7, r3
 800455c:	2200      	movs	r2, #0
 800455e:	701a      	strb	r2, [r3, #0]
 8004560:	e003      	b.n	800456a <UART_SetConfig+0xf2>
 8004562:	231f      	movs	r3, #31
 8004564:	18fb      	adds	r3, r7, r3
 8004566:	2210      	movs	r2, #16
 8004568:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	69da      	ldr	r2, [r3, #28]
 800456e:	2380      	movs	r3, #128	; 0x80
 8004570:	021b      	lsls	r3, r3, #8
 8004572:	429a      	cmp	r2, r3
 8004574:	d15d      	bne.n	8004632 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8004576:	231f      	movs	r3, #31
 8004578:	18fb      	adds	r3, r7, r3
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	2b08      	cmp	r3, #8
 800457e:	d015      	beq.n	80045ac <UART_SetConfig+0x134>
 8004580:	dc18      	bgt.n	80045b4 <UART_SetConfig+0x13c>
 8004582:	2b04      	cmp	r3, #4
 8004584:	d00d      	beq.n	80045a2 <UART_SetConfig+0x12a>
 8004586:	dc15      	bgt.n	80045b4 <UART_SetConfig+0x13c>
 8004588:	2b00      	cmp	r3, #0
 800458a:	d002      	beq.n	8004592 <UART_SetConfig+0x11a>
 800458c:	2b02      	cmp	r3, #2
 800458e:	d005      	beq.n	800459c <UART_SetConfig+0x124>
 8004590:	e010      	b.n	80045b4 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004592:	f7ff fb83 	bl	8003c9c <HAL_RCC_GetPCLK1Freq>
 8004596:	0003      	movs	r3, r0
 8004598:	61bb      	str	r3, [r7, #24]
        break;
 800459a:	e012      	b.n	80045c2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800459c:	4b55      	ldr	r3, [pc, #340]	; (80046f4 <UART_SetConfig+0x27c>)
 800459e:	61bb      	str	r3, [r7, #24]
        break;
 80045a0:	e00f      	b.n	80045c2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045a2:	f7ff fb0d 	bl	8003bc0 <HAL_RCC_GetSysClockFreq>
 80045a6:	0003      	movs	r3, r0
 80045a8:	61bb      	str	r3, [r7, #24]
        break;
 80045aa:	e00a      	b.n	80045c2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045ac:	2380      	movs	r3, #128	; 0x80
 80045ae:	021b      	lsls	r3, r3, #8
 80045b0:	61bb      	str	r3, [r7, #24]
        break;
 80045b2:	e006      	b.n	80045c2 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80045b4:	2300      	movs	r3, #0
 80045b6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80045b8:	231e      	movs	r3, #30
 80045ba:	18fb      	adds	r3, r7, r3
 80045bc:	2201      	movs	r2, #1
 80045be:	701a      	strb	r2, [r3, #0]
        break;
 80045c0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d100      	bne.n	80045ca <UART_SetConfig+0x152>
 80045c8:	e07b      	b.n	80046c2 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	005a      	lsls	r2, r3, #1
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	085b      	lsrs	r3, r3, #1
 80045d4:	18d2      	adds	r2, r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	0019      	movs	r1, r3
 80045dc:	0010      	movs	r0, r2
 80045de:	f7fb fd9d 	bl	800011c <__udivsi3>
 80045e2:	0003      	movs	r3, r0
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	2b0f      	cmp	r3, #15
 80045ec:	d91c      	bls.n	8004628 <UART_SetConfig+0x1b0>
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	2380      	movs	r3, #128	; 0x80
 80045f2:	025b      	lsls	r3, r3, #9
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d217      	bcs.n	8004628 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	200e      	movs	r0, #14
 80045fe:	183b      	adds	r3, r7, r0
 8004600:	210f      	movs	r1, #15
 8004602:	438a      	bics	r2, r1
 8004604:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	085b      	lsrs	r3, r3, #1
 800460a:	b29b      	uxth	r3, r3
 800460c:	2207      	movs	r2, #7
 800460e:	4013      	ands	r3, r2
 8004610:	b299      	uxth	r1, r3
 8004612:	183b      	adds	r3, r7, r0
 8004614:	183a      	adds	r2, r7, r0
 8004616:	8812      	ldrh	r2, [r2, #0]
 8004618:	430a      	orrs	r2, r1
 800461a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	183a      	adds	r2, r7, r0
 8004622:	8812      	ldrh	r2, [r2, #0]
 8004624:	60da      	str	r2, [r3, #12]
 8004626:	e04c      	b.n	80046c2 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8004628:	231e      	movs	r3, #30
 800462a:	18fb      	adds	r3, r7, r3
 800462c:	2201      	movs	r2, #1
 800462e:	701a      	strb	r2, [r3, #0]
 8004630:	e047      	b.n	80046c2 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004632:	231f      	movs	r3, #31
 8004634:	18fb      	adds	r3, r7, r3
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	2b08      	cmp	r3, #8
 800463a:	d015      	beq.n	8004668 <UART_SetConfig+0x1f0>
 800463c:	dc18      	bgt.n	8004670 <UART_SetConfig+0x1f8>
 800463e:	2b04      	cmp	r3, #4
 8004640:	d00d      	beq.n	800465e <UART_SetConfig+0x1e6>
 8004642:	dc15      	bgt.n	8004670 <UART_SetConfig+0x1f8>
 8004644:	2b00      	cmp	r3, #0
 8004646:	d002      	beq.n	800464e <UART_SetConfig+0x1d6>
 8004648:	2b02      	cmp	r3, #2
 800464a:	d005      	beq.n	8004658 <UART_SetConfig+0x1e0>
 800464c:	e010      	b.n	8004670 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800464e:	f7ff fb25 	bl	8003c9c <HAL_RCC_GetPCLK1Freq>
 8004652:	0003      	movs	r3, r0
 8004654:	61bb      	str	r3, [r7, #24]
        break;
 8004656:	e012      	b.n	800467e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004658:	4b26      	ldr	r3, [pc, #152]	; (80046f4 <UART_SetConfig+0x27c>)
 800465a:	61bb      	str	r3, [r7, #24]
        break;
 800465c:	e00f      	b.n	800467e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800465e:	f7ff faaf 	bl	8003bc0 <HAL_RCC_GetSysClockFreq>
 8004662:	0003      	movs	r3, r0
 8004664:	61bb      	str	r3, [r7, #24]
        break;
 8004666:	e00a      	b.n	800467e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004668:	2380      	movs	r3, #128	; 0x80
 800466a:	021b      	lsls	r3, r3, #8
 800466c:	61bb      	str	r3, [r7, #24]
        break;
 800466e:	e006      	b.n	800467e <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8004670:	2300      	movs	r3, #0
 8004672:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004674:	231e      	movs	r3, #30
 8004676:	18fb      	adds	r3, r7, r3
 8004678:	2201      	movs	r2, #1
 800467a:	701a      	strb	r2, [r3, #0]
        break;
 800467c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d01e      	beq.n	80046c2 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	085a      	lsrs	r2, r3, #1
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	18d2      	adds	r2, r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	0019      	movs	r1, r3
 8004694:	0010      	movs	r0, r2
 8004696:	f7fb fd41 	bl	800011c <__udivsi3>
 800469a:	0003      	movs	r3, r0
 800469c:	b29b      	uxth	r3, r3
 800469e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	2b0f      	cmp	r3, #15
 80046a4:	d909      	bls.n	80046ba <UART_SetConfig+0x242>
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	2380      	movs	r3, #128	; 0x80
 80046aa:	025b      	lsls	r3, r3, #9
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d204      	bcs.n	80046ba <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	60da      	str	r2, [r3, #12]
 80046b8:	e003      	b.n	80046c2 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80046ba:	231e      	movs	r3, #30
 80046bc:	18fb      	adds	r3, r7, r3
 80046be:	2201      	movs	r2, #1
 80046c0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80046ce:	231e      	movs	r3, #30
 80046d0:	18fb      	adds	r3, r7, r3
 80046d2:	781b      	ldrb	r3, [r3, #0]
}
 80046d4:	0018      	movs	r0, r3
 80046d6:	46bd      	mov	sp, r7
 80046d8:	b008      	add	sp, #32
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	ffff69f3 	.word	0xffff69f3
 80046e0:	ffffcfff 	.word	0xffffcfff
 80046e4:	fffff4ff 	.word	0xfffff4ff
 80046e8:	40013800 	.word	0x40013800
 80046ec:	40021000 	.word	0x40021000
 80046f0:	40004400 	.word	0x40004400
 80046f4:	007a1200 	.word	0x007a1200

080046f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004704:	2201      	movs	r2, #1
 8004706:	4013      	ands	r3, r2
 8004708:	d00b      	beq.n	8004722 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	4a4a      	ldr	r2, [pc, #296]	; (800483c <UART_AdvFeatureConfig+0x144>)
 8004712:	4013      	ands	r3, r2
 8004714:	0019      	movs	r1, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	430a      	orrs	r2, r1
 8004720:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004726:	2202      	movs	r2, #2
 8004728:	4013      	ands	r3, r2
 800472a:	d00b      	beq.n	8004744 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	4a43      	ldr	r2, [pc, #268]	; (8004840 <UART_AdvFeatureConfig+0x148>)
 8004734:	4013      	ands	r3, r2
 8004736:	0019      	movs	r1, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	430a      	orrs	r2, r1
 8004742:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004748:	2204      	movs	r2, #4
 800474a:	4013      	ands	r3, r2
 800474c:	d00b      	beq.n	8004766 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	4a3b      	ldr	r2, [pc, #236]	; (8004844 <UART_AdvFeatureConfig+0x14c>)
 8004756:	4013      	ands	r3, r2
 8004758:	0019      	movs	r1, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	430a      	orrs	r2, r1
 8004764:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476a:	2208      	movs	r2, #8
 800476c:	4013      	ands	r3, r2
 800476e:	d00b      	beq.n	8004788 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	4a34      	ldr	r2, [pc, #208]	; (8004848 <UART_AdvFeatureConfig+0x150>)
 8004778:	4013      	ands	r3, r2
 800477a:	0019      	movs	r1, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	430a      	orrs	r2, r1
 8004786:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478c:	2210      	movs	r2, #16
 800478e:	4013      	ands	r3, r2
 8004790:	d00b      	beq.n	80047aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	4a2c      	ldr	r2, [pc, #176]	; (800484c <UART_AdvFeatureConfig+0x154>)
 800479a:	4013      	ands	r3, r2
 800479c:	0019      	movs	r1, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ae:	2220      	movs	r2, #32
 80047b0:	4013      	ands	r3, r2
 80047b2:	d00b      	beq.n	80047cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	4a25      	ldr	r2, [pc, #148]	; (8004850 <UART_AdvFeatureConfig+0x158>)
 80047bc:	4013      	ands	r3, r2
 80047be:	0019      	movs	r1, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	430a      	orrs	r2, r1
 80047ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d0:	2240      	movs	r2, #64	; 0x40
 80047d2:	4013      	ands	r3, r2
 80047d4:	d01d      	beq.n	8004812 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	4a1d      	ldr	r2, [pc, #116]	; (8004854 <UART_AdvFeatureConfig+0x15c>)
 80047de:	4013      	ands	r3, r2
 80047e0:	0019      	movs	r1, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047f2:	2380      	movs	r3, #128	; 0x80
 80047f4:	035b      	lsls	r3, r3, #13
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d10b      	bne.n	8004812 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	4a15      	ldr	r2, [pc, #84]	; (8004858 <UART_AdvFeatureConfig+0x160>)
 8004802:	4013      	ands	r3, r2
 8004804:	0019      	movs	r1, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	430a      	orrs	r2, r1
 8004810:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004816:	2280      	movs	r2, #128	; 0x80
 8004818:	4013      	ands	r3, r2
 800481a:	d00b      	beq.n	8004834 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	4a0e      	ldr	r2, [pc, #56]	; (800485c <UART_AdvFeatureConfig+0x164>)
 8004824:	4013      	ands	r3, r2
 8004826:	0019      	movs	r1, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	430a      	orrs	r2, r1
 8004832:	605a      	str	r2, [r3, #4]
  }
}
 8004834:	46c0      	nop			; (mov r8, r8)
 8004836:	46bd      	mov	sp, r7
 8004838:	b002      	add	sp, #8
 800483a:	bd80      	pop	{r7, pc}
 800483c:	fffdffff 	.word	0xfffdffff
 8004840:	fffeffff 	.word	0xfffeffff
 8004844:	fffbffff 	.word	0xfffbffff
 8004848:	ffff7fff 	.word	0xffff7fff
 800484c:	ffffefff 	.word	0xffffefff
 8004850:	ffffdfff 	.word	0xffffdfff
 8004854:	ffefffff 	.word	0xffefffff
 8004858:	ff9fffff 	.word	0xff9fffff
 800485c:	fff7ffff 	.word	0xfff7ffff

08004860 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b086      	sub	sp, #24
 8004864:	af02      	add	r7, sp, #8
 8004866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2280      	movs	r2, #128	; 0x80
 800486c:	2100      	movs	r1, #0
 800486e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004870:	f7fd fd0a 	bl	8002288 <HAL_GetTick>
 8004874:	0003      	movs	r3, r0
 8004876:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2208      	movs	r2, #8
 8004880:	4013      	ands	r3, r2
 8004882:	2b08      	cmp	r3, #8
 8004884:	d10c      	bne.n	80048a0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2280      	movs	r2, #128	; 0x80
 800488a:	0391      	lsls	r1, r2, #14
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	4a17      	ldr	r2, [pc, #92]	; (80048ec <UART_CheckIdleState+0x8c>)
 8004890:	9200      	str	r2, [sp, #0]
 8004892:	2200      	movs	r2, #0
 8004894:	f000 f82c 	bl	80048f0 <UART_WaitOnFlagUntilTimeout>
 8004898:	1e03      	subs	r3, r0, #0
 800489a:	d001      	beq.n	80048a0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e021      	b.n	80048e4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2204      	movs	r2, #4
 80048a8:	4013      	ands	r3, r2
 80048aa:	2b04      	cmp	r3, #4
 80048ac:	d10c      	bne.n	80048c8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2280      	movs	r2, #128	; 0x80
 80048b2:	03d1      	lsls	r1, r2, #15
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	4a0d      	ldr	r2, [pc, #52]	; (80048ec <UART_CheckIdleState+0x8c>)
 80048b8:	9200      	str	r2, [sp, #0]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f000 f818 	bl	80048f0 <UART_WaitOnFlagUntilTimeout>
 80048c0:	1e03      	subs	r3, r0, #0
 80048c2:	d001      	beq.n	80048c8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e00d      	b.n	80048e4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2220      	movs	r2, #32
 80048cc:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2220      	movs	r2, #32
 80048d2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2274      	movs	r2, #116	; 0x74
 80048de:	2100      	movs	r1, #0
 80048e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	0018      	movs	r0, r3
 80048e6:	46bd      	mov	sp, r7
 80048e8:	b004      	add	sp, #16
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	01ffffff 	.word	0x01ffffff

080048f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b094      	sub	sp, #80	; 0x50
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	603b      	str	r3, [r7, #0]
 80048fc:	1dfb      	adds	r3, r7, #7
 80048fe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004900:	e0a3      	b.n	8004a4a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004902:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004904:	3301      	adds	r3, #1
 8004906:	d100      	bne.n	800490a <UART_WaitOnFlagUntilTimeout+0x1a>
 8004908:	e09f      	b.n	8004a4a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800490a:	f7fd fcbd 	bl	8002288 <HAL_GetTick>
 800490e:	0002      	movs	r2, r0
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004916:	429a      	cmp	r2, r3
 8004918:	d302      	bcc.n	8004920 <UART_WaitOnFlagUntilTimeout+0x30>
 800491a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800491c:	2b00      	cmp	r3, #0
 800491e:	d13d      	bne.n	800499c <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004920:	f3ef 8310 	mrs	r3, PRIMASK
 8004924:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004926:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004928:	647b      	str	r3, [r7, #68]	; 0x44
 800492a:	2301      	movs	r3, #1
 800492c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800492e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004930:	f383 8810 	msr	PRIMASK, r3
}
 8004934:	46c0      	nop			; (mov r8, r8)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	494c      	ldr	r1, [pc, #304]	; (8004a74 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004942:	400a      	ands	r2, r1
 8004944:	601a      	str	r2, [r3, #0]
 8004946:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004948:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800494a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800494c:	f383 8810 	msr	PRIMASK, r3
}
 8004950:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004952:	f3ef 8310 	mrs	r3, PRIMASK
 8004956:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800495a:	643b      	str	r3, [r7, #64]	; 0x40
 800495c:	2301      	movs	r3, #1
 800495e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004962:	f383 8810 	msr	PRIMASK, r3
}
 8004966:	46c0      	nop			; (mov r8, r8)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	689a      	ldr	r2, [r3, #8]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2101      	movs	r1, #1
 8004974:	438a      	bics	r2, r1
 8004976:	609a      	str	r2, [r3, #8]
 8004978:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800497a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800497c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800497e:	f383 8810 	msr	PRIMASK, r3
}
 8004982:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2220      	movs	r2, #32
 8004988:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2220      	movs	r2, #32
 800498e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2274      	movs	r2, #116	; 0x74
 8004994:	2100      	movs	r1, #0
 8004996:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e067      	b.n	8004a6c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2204      	movs	r2, #4
 80049a4:	4013      	ands	r3, r2
 80049a6:	d050      	beq.n	8004a4a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	69da      	ldr	r2, [r3, #28]
 80049ae:	2380      	movs	r3, #128	; 0x80
 80049b0:	011b      	lsls	r3, r3, #4
 80049b2:	401a      	ands	r2, r3
 80049b4:	2380      	movs	r3, #128	; 0x80
 80049b6:	011b      	lsls	r3, r3, #4
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d146      	bne.n	8004a4a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2280      	movs	r2, #128	; 0x80
 80049c2:	0112      	lsls	r2, r2, #4
 80049c4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049c6:	f3ef 8310 	mrs	r3, PRIMASK
 80049ca:	613b      	str	r3, [r7, #16]
  return(result);
 80049cc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049d0:	2301      	movs	r3, #1
 80049d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	f383 8810 	msr	PRIMASK, r3
}
 80049da:	46c0      	nop			; (mov r8, r8)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4923      	ldr	r1, [pc, #140]	; (8004a74 <UART_WaitOnFlagUntilTimeout+0x184>)
 80049e8:	400a      	ands	r2, r1
 80049ea:	601a      	str	r2, [r3, #0]
 80049ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049ee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	f383 8810 	msr	PRIMASK, r3
}
 80049f6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049f8:	f3ef 8310 	mrs	r3, PRIMASK
 80049fc:	61fb      	str	r3, [r7, #28]
  return(result);
 80049fe:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a00:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a02:	2301      	movs	r3, #1
 8004a04:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a06:	6a3b      	ldr	r3, [r7, #32]
 8004a08:	f383 8810 	msr	PRIMASK, r3
}
 8004a0c:	46c0      	nop			; (mov r8, r8)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	689a      	ldr	r2, [r3, #8]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2101      	movs	r1, #1
 8004a1a:	438a      	bics	r2, r1
 8004a1c:	609a      	str	r2, [r3, #8]
 8004a1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a20:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a24:	f383 8810 	msr	PRIMASK, r3
}
 8004a28:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2220      	movs	r2, #32
 8004a2e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2220      	movs	r2, #32
 8004a34:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2280      	movs	r2, #128	; 0x80
 8004a3a:	2120      	movs	r1, #32
 8004a3c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2274      	movs	r2, #116	; 0x74
 8004a42:	2100      	movs	r1, #0
 8004a44:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e010      	b.n	8004a6c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	69db      	ldr	r3, [r3, #28]
 8004a50:	68ba      	ldr	r2, [r7, #8]
 8004a52:	4013      	ands	r3, r2
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	425a      	negs	r2, r3
 8004a5a:	4153      	adcs	r3, r2
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	001a      	movs	r2, r3
 8004a60:	1dfb      	adds	r3, r7, #7
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d100      	bne.n	8004a6a <UART_WaitOnFlagUntilTimeout+0x17a>
 8004a68:	e74b      	b.n	8004902 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	0018      	movs	r0, r3
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	b014      	add	sp, #80	; 0x50
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	fffffe5f 	.word	0xfffffe5f

08004a78 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b086      	sub	sp, #24
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
 8004a84:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d101      	bne.n	8004a90 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e05b      	b.n	8004b48 <HAL_RS485Ex_Init+0xd0>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d107      	bne.n	8004aa8 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2274      	movs	r2, #116	; 0x74
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	0018      	movs	r0, r3
 8004aa4:	f7fd fa78 	bl	8001f98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2224      	movs	r2, #36	; 0x24
 8004aac:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2101      	movs	r1, #1
 8004aba:	438a      	bics	r2, r1
 8004abc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	0018      	movs	r0, r3
 8004ac2:	f7ff fcd9 	bl	8004478 <UART_SetConfig>
 8004ac6:	0003      	movs	r3, r0
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d101      	bne.n	8004ad0 <HAL_RS485Ex_Init+0x58>
  {
    return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e03b      	b.n	8004b48 <HAL_RS485Ex_Init+0xd0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d003      	beq.n	8004ae0 <HAL_RS485Ex_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	0018      	movs	r0, r3
 8004adc:	f7ff fe0c 	bl	80046f8 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	689a      	ldr	r2, [r3, #8]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2180      	movs	r1, #128	; 0x80
 8004aec:	01c9      	lsls	r1, r1, #7
 8004aee:	430a      	orrs	r2, r1
 8004af0:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	4a15      	ldr	r2, [pc, #84]	; (8004b50 <HAL_RS485Ex_Init+0xd8>)
 8004afa:	4013      	ands	r3, r2
 8004afc:	0019      	movs	r1, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68ba      	ldr	r2, [r7, #8]
 8004b04:	430a      	orrs	r2, r1
 8004b06:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	055b      	lsls	r3, r3, #21
 8004b0c:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	041b      	lsls	r3, r3, #16
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a0d      	ldr	r2, [pc, #52]	; (8004b54 <HAL_RS485Ex_Init+0xdc>)
 8004b20:	4013      	ands	r3, r2
 8004b22:	0019      	movs	r1, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	697a      	ldr	r2, [r7, #20]
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2101      	movs	r1, #1
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	0018      	movs	r0, r3
 8004b42:	f7ff fe8d 	bl	8004860 <UART_CheckIdleState>
 8004b46:	0003      	movs	r3, r0
}
 8004b48:	0018      	movs	r0, r3
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	b006      	add	sp, #24
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	ffff7fff 	.word	0xffff7fff
 8004b54:	fc00ffff 	.word	0xfc00ffff

08004b58 <__errno>:
 8004b58:	4b01      	ldr	r3, [pc, #4]	; (8004b60 <__errno+0x8>)
 8004b5a:	6818      	ldr	r0, [r3, #0]
 8004b5c:	4770      	bx	lr
 8004b5e:	46c0      	nop			; (mov r8, r8)
 8004b60:	20000018 	.word	0x20000018

08004b64 <__libc_init_array>:
 8004b64:	b570      	push	{r4, r5, r6, lr}
 8004b66:	2600      	movs	r6, #0
 8004b68:	4d0c      	ldr	r5, [pc, #48]	; (8004b9c <__libc_init_array+0x38>)
 8004b6a:	4c0d      	ldr	r4, [pc, #52]	; (8004ba0 <__libc_init_array+0x3c>)
 8004b6c:	1b64      	subs	r4, r4, r5
 8004b6e:	10a4      	asrs	r4, r4, #2
 8004b70:	42a6      	cmp	r6, r4
 8004b72:	d109      	bne.n	8004b88 <__libc_init_array+0x24>
 8004b74:	2600      	movs	r6, #0
 8004b76:	f000 fc8b 	bl	8005490 <_init>
 8004b7a:	4d0a      	ldr	r5, [pc, #40]	; (8004ba4 <__libc_init_array+0x40>)
 8004b7c:	4c0a      	ldr	r4, [pc, #40]	; (8004ba8 <__libc_init_array+0x44>)
 8004b7e:	1b64      	subs	r4, r4, r5
 8004b80:	10a4      	asrs	r4, r4, #2
 8004b82:	42a6      	cmp	r6, r4
 8004b84:	d105      	bne.n	8004b92 <__libc_init_array+0x2e>
 8004b86:	bd70      	pop	{r4, r5, r6, pc}
 8004b88:	00b3      	lsls	r3, r6, #2
 8004b8a:	58eb      	ldr	r3, [r5, r3]
 8004b8c:	4798      	blx	r3
 8004b8e:	3601      	adds	r6, #1
 8004b90:	e7ee      	b.n	8004b70 <__libc_init_array+0xc>
 8004b92:	00b3      	lsls	r3, r6, #2
 8004b94:	58eb      	ldr	r3, [r5, r3]
 8004b96:	4798      	blx	r3
 8004b98:	3601      	adds	r6, #1
 8004b9a:	e7f2      	b.n	8004b82 <__libc_init_array+0x1e>
 8004b9c:	080056f4 	.word	0x080056f4
 8004ba0:	080056f4 	.word	0x080056f4
 8004ba4:	080056f4 	.word	0x080056f4
 8004ba8:	080056f8 	.word	0x080056f8

08004bac <memset>:
 8004bac:	0003      	movs	r3, r0
 8004bae:	1882      	adds	r2, r0, r2
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d100      	bne.n	8004bb6 <memset+0xa>
 8004bb4:	4770      	bx	lr
 8004bb6:	7019      	strb	r1, [r3, #0]
 8004bb8:	3301      	adds	r3, #1
 8004bba:	e7f9      	b.n	8004bb0 <memset+0x4>

08004bbc <siprintf>:
 8004bbc:	b40e      	push	{r1, r2, r3}
 8004bbe:	b500      	push	{lr}
 8004bc0:	490b      	ldr	r1, [pc, #44]	; (8004bf0 <siprintf+0x34>)
 8004bc2:	b09c      	sub	sp, #112	; 0x70
 8004bc4:	ab1d      	add	r3, sp, #116	; 0x74
 8004bc6:	9002      	str	r0, [sp, #8]
 8004bc8:	9006      	str	r0, [sp, #24]
 8004bca:	9107      	str	r1, [sp, #28]
 8004bcc:	9104      	str	r1, [sp, #16]
 8004bce:	4809      	ldr	r0, [pc, #36]	; (8004bf4 <siprintf+0x38>)
 8004bd0:	4909      	ldr	r1, [pc, #36]	; (8004bf8 <siprintf+0x3c>)
 8004bd2:	cb04      	ldmia	r3!, {r2}
 8004bd4:	9105      	str	r1, [sp, #20]
 8004bd6:	6800      	ldr	r0, [r0, #0]
 8004bd8:	a902      	add	r1, sp, #8
 8004bda:	9301      	str	r3, [sp, #4]
 8004bdc:	f000 f870 	bl	8004cc0 <_svfiprintf_r>
 8004be0:	2300      	movs	r3, #0
 8004be2:	9a02      	ldr	r2, [sp, #8]
 8004be4:	7013      	strb	r3, [r2, #0]
 8004be6:	b01c      	add	sp, #112	; 0x70
 8004be8:	bc08      	pop	{r3}
 8004bea:	b003      	add	sp, #12
 8004bec:	4718      	bx	r3
 8004bee:	46c0      	nop			; (mov r8, r8)
 8004bf0:	7fffffff 	.word	0x7fffffff
 8004bf4:	20000018 	.word	0x20000018
 8004bf8:	ffff0208 	.word	0xffff0208

08004bfc <__ssputs_r>:
 8004bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bfe:	688e      	ldr	r6, [r1, #8]
 8004c00:	b085      	sub	sp, #20
 8004c02:	0007      	movs	r7, r0
 8004c04:	000c      	movs	r4, r1
 8004c06:	9203      	str	r2, [sp, #12]
 8004c08:	9301      	str	r3, [sp, #4]
 8004c0a:	429e      	cmp	r6, r3
 8004c0c:	d83c      	bhi.n	8004c88 <__ssputs_r+0x8c>
 8004c0e:	2390      	movs	r3, #144	; 0x90
 8004c10:	898a      	ldrh	r2, [r1, #12]
 8004c12:	00db      	lsls	r3, r3, #3
 8004c14:	421a      	tst	r2, r3
 8004c16:	d034      	beq.n	8004c82 <__ssputs_r+0x86>
 8004c18:	6909      	ldr	r1, [r1, #16]
 8004c1a:	6823      	ldr	r3, [r4, #0]
 8004c1c:	6960      	ldr	r0, [r4, #20]
 8004c1e:	1a5b      	subs	r3, r3, r1
 8004c20:	9302      	str	r3, [sp, #8]
 8004c22:	2303      	movs	r3, #3
 8004c24:	4343      	muls	r3, r0
 8004c26:	0fdd      	lsrs	r5, r3, #31
 8004c28:	18ed      	adds	r5, r5, r3
 8004c2a:	9b01      	ldr	r3, [sp, #4]
 8004c2c:	9802      	ldr	r0, [sp, #8]
 8004c2e:	3301      	adds	r3, #1
 8004c30:	181b      	adds	r3, r3, r0
 8004c32:	106d      	asrs	r5, r5, #1
 8004c34:	42ab      	cmp	r3, r5
 8004c36:	d900      	bls.n	8004c3a <__ssputs_r+0x3e>
 8004c38:	001d      	movs	r5, r3
 8004c3a:	0553      	lsls	r3, r2, #21
 8004c3c:	d532      	bpl.n	8004ca4 <__ssputs_r+0xa8>
 8004c3e:	0029      	movs	r1, r5
 8004c40:	0038      	movs	r0, r7
 8004c42:	f000 fb53 	bl	80052ec <_malloc_r>
 8004c46:	1e06      	subs	r6, r0, #0
 8004c48:	d109      	bne.n	8004c5e <__ssputs_r+0x62>
 8004c4a:	230c      	movs	r3, #12
 8004c4c:	603b      	str	r3, [r7, #0]
 8004c4e:	2340      	movs	r3, #64	; 0x40
 8004c50:	2001      	movs	r0, #1
 8004c52:	89a2      	ldrh	r2, [r4, #12]
 8004c54:	4240      	negs	r0, r0
 8004c56:	4313      	orrs	r3, r2
 8004c58:	81a3      	strh	r3, [r4, #12]
 8004c5a:	b005      	add	sp, #20
 8004c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c5e:	9a02      	ldr	r2, [sp, #8]
 8004c60:	6921      	ldr	r1, [r4, #16]
 8004c62:	f000 faba 	bl	80051da <memcpy>
 8004c66:	89a3      	ldrh	r3, [r4, #12]
 8004c68:	4a14      	ldr	r2, [pc, #80]	; (8004cbc <__ssputs_r+0xc0>)
 8004c6a:	401a      	ands	r2, r3
 8004c6c:	2380      	movs	r3, #128	; 0x80
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	81a3      	strh	r3, [r4, #12]
 8004c72:	9b02      	ldr	r3, [sp, #8]
 8004c74:	6126      	str	r6, [r4, #16]
 8004c76:	18f6      	adds	r6, r6, r3
 8004c78:	6026      	str	r6, [r4, #0]
 8004c7a:	6165      	str	r5, [r4, #20]
 8004c7c:	9e01      	ldr	r6, [sp, #4]
 8004c7e:	1aed      	subs	r5, r5, r3
 8004c80:	60a5      	str	r5, [r4, #8]
 8004c82:	9b01      	ldr	r3, [sp, #4]
 8004c84:	429e      	cmp	r6, r3
 8004c86:	d900      	bls.n	8004c8a <__ssputs_r+0x8e>
 8004c88:	9e01      	ldr	r6, [sp, #4]
 8004c8a:	0032      	movs	r2, r6
 8004c8c:	9903      	ldr	r1, [sp, #12]
 8004c8e:	6820      	ldr	r0, [r4, #0]
 8004c90:	f000 faac 	bl	80051ec <memmove>
 8004c94:	68a3      	ldr	r3, [r4, #8]
 8004c96:	2000      	movs	r0, #0
 8004c98:	1b9b      	subs	r3, r3, r6
 8004c9a:	60a3      	str	r3, [r4, #8]
 8004c9c:	6823      	ldr	r3, [r4, #0]
 8004c9e:	199e      	adds	r6, r3, r6
 8004ca0:	6026      	str	r6, [r4, #0]
 8004ca2:	e7da      	b.n	8004c5a <__ssputs_r+0x5e>
 8004ca4:	002a      	movs	r2, r5
 8004ca6:	0038      	movs	r0, r7
 8004ca8:	f000 fb96 	bl	80053d8 <_realloc_r>
 8004cac:	1e06      	subs	r6, r0, #0
 8004cae:	d1e0      	bne.n	8004c72 <__ssputs_r+0x76>
 8004cb0:	0038      	movs	r0, r7
 8004cb2:	6921      	ldr	r1, [r4, #16]
 8004cb4:	f000 faae 	bl	8005214 <_free_r>
 8004cb8:	e7c7      	b.n	8004c4a <__ssputs_r+0x4e>
 8004cba:	46c0      	nop			; (mov r8, r8)
 8004cbc:	fffffb7f 	.word	0xfffffb7f

08004cc0 <_svfiprintf_r>:
 8004cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cc2:	b0a1      	sub	sp, #132	; 0x84
 8004cc4:	9003      	str	r0, [sp, #12]
 8004cc6:	001d      	movs	r5, r3
 8004cc8:	898b      	ldrh	r3, [r1, #12]
 8004cca:	000f      	movs	r7, r1
 8004ccc:	0016      	movs	r6, r2
 8004cce:	061b      	lsls	r3, r3, #24
 8004cd0:	d511      	bpl.n	8004cf6 <_svfiprintf_r+0x36>
 8004cd2:	690b      	ldr	r3, [r1, #16]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d10e      	bne.n	8004cf6 <_svfiprintf_r+0x36>
 8004cd8:	2140      	movs	r1, #64	; 0x40
 8004cda:	f000 fb07 	bl	80052ec <_malloc_r>
 8004cde:	6038      	str	r0, [r7, #0]
 8004ce0:	6138      	str	r0, [r7, #16]
 8004ce2:	2800      	cmp	r0, #0
 8004ce4:	d105      	bne.n	8004cf2 <_svfiprintf_r+0x32>
 8004ce6:	230c      	movs	r3, #12
 8004ce8:	9a03      	ldr	r2, [sp, #12]
 8004cea:	3801      	subs	r0, #1
 8004cec:	6013      	str	r3, [r2, #0]
 8004cee:	b021      	add	sp, #132	; 0x84
 8004cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cf2:	2340      	movs	r3, #64	; 0x40
 8004cf4:	617b      	str	r3, [r7, #20]
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	ac08      	add	r4, sp, #32
 8004cfa:	6163      	str	r3, [r4, #20]
 8004cfc:	3320      	adds	r3, #32
 8004cfe:	7663      	strb	r3, [r4, #25]
 8004d00:	3310      	adds	r3, #16
 8004d02:	76a3      	strb	r3, [r4, #26]
 8004d04:	9507      	str	r5, [sp, #28]
 8004d06:	0035      	movs	r5, r6
 8004d08:	782b      	ldrb	r3, [r5, #0]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d001      	beq.n	8004d12 <_svfiprintf_r+0x52>
 8004d0e:	2b25      	cmp	r3, #37	; 0x25
 8004d10:	d147      	bne.n	8004da2 <_svfiprintf_r+0xe2>
 8004d12:	1bab      	subs	r3, r5, r6
 8004d14:	9305      	str	r3, [sp, #20]
 8004d16:	42b5      	cmp	r5, r6
 8004d18:	d00c      	beq.n	8004d34 <_svfiprintf_r+0x74>
 8004d1a:	0032      	movs	r2, r6
 8004d1c:	0039      	movs	r1, r7
 8004d1e:	9803      	ldr	r0, [sp, #12]
 8004d20:	f7ff ff6c 	bl	8004bfc <__ssputs_r>
 8004d24:	1c43      	adds	r3, r0, #1
 8004d26:	d100      	bne.n	8004d2a <_svfiprintf_r+0x6a>
 8004d28:	e0ae      	b.n	8004e88 <_svfiprintf_r+0x1c8>
 8004d2a:	6962      	ldr	r2, [r4, #20]
 8004d2c:	9b05      	ldr	r3, [sp, #20]
 8004d2e:	4694      	mov	ip, r2
 8004d30:	4463      	add	r3, ip
 8004d32:	6163      	str	r3, [r4, #20]
 8004d34:	782b      	ldrb	r3, [r5, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d100      	bne.n	8004d3c <_svfiprintf_r+0x7c>
 8004d3a:	e0a5      	b.n	8004e88 <_svfiprintf_r+0x1c8>
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	2300      	movs	r3, #0
 8004d40:	4252      	negs	r2, r2
 8004d42:	6062      	str	r2, [r4, #4]
 8004d44:	a904      	add	r1, sp, #16
 8004d46:	3254      	adds	r2, #84	; 0x54
 8004d48:	1852      	adds	r2, r2, r1
 8004d4a:	1c6e      	adds	r6, r5, #1
 8004d4c:	6023      	str	r3, [r4, #0]
 8004d4e:	60e3      	str	r3, [r4, #12]
 8004d50:	60a3      	str	r3, [r4, #8]
 8004d52:	7013      	strb	r3, [r2, #0]
 8004d54:	65a3      	str	r3, [r4, #88]	; 0x58
 8004d56:	2205      	movs	r2, #5
 8004d58:	7831      	ldrb	r1, [r6, #0]
 8004d5a:	4854      	ldr	r0, [pc, #336]	; (8004eac <_svfiprintf_r+0x1ec>)
 8004d5c:	f000 fa32 	bl	80051c4 <memchr>
 8004d60:	1c75      	adds	r5, r6, #1
 8004d62:	2800      	cmp	r0, #0
 8004d64:	d11f      	bne.n	8004da6 <_svfiprintf_r+0xe6>
 8004d66:	6822      	ldr	r2, [r4, #0]
 8004d68:	06d3      	lsls	r3, r2, #27
 8004d6a:	d504      	bpl.n	8004d76 <_svfiprintf_r+0xb6>
 8004d6c:	2353      	movs	r3, #83	; 0x53
 8004d6e:	a904      	add	r1, sp, #16
 8004d70:	185b      	adds	r3, r3, r1
 8004d72:	2120      	movs	r1, #32
 8004d74:	7019      	strb	r1, [r3, #0]
 8004d76:	0713      	lsls	r3, r2, #28
 8004d78:	d504      	bpl.n	8004d84 <_svfiprintf_r+0xc4>
 8004d7a:	2353      	movs	r3, #83	; 0x53
 8004d7c:	a904      	add	r1, sp, #16
 8004d7e:	185b      	adds	r3, r3, r1
 8004d80:	212b      	movs	r1, #43	; 0x2b
 8004d82:	7019      	strb	r1, [r3, #0]
 8004d84:	7833      	ldrb	r3, [r6, #0]
 8004d86:	2b2a      	cmp	r3, #42	; 0x2a
 8004d88:	d016      	beq.n	8004db8 <_svfiprintf_r+0xf8>
 8004d8a:	0035      	movs	r5, r6
 8004d8c:	2100      	movs	r1, #0
 8004d8e:	200a      	movs	r0, #10
 8004d90:	68e3      	ldr	r3, [r4, #12]
 8004d92:	782a      	ldrb	r2, [r5, #0]
 8004d94:	1c6e      	adds	r6, r5, #1
 8004d96:	3a30      	subs	r2, #48	; 0x30
 8004d98:	2a09      	cmp	r2, #9
 8004d9a:	d94e      	bls.n	8004e3a <_svfiprintf_r+0x17a>
 8004d9c:	2900      	cmp	r1, #0
 8004d9e:	d111      	bne.n	8004dc4 <_svfiprintf_r+0x104>
 8004da0:	e017      	b.n	8004dd2 <_svfiprintf_r+0x112>
 8004da2:	3501      	adds	r5, #1
 8004da4:	e7b0      	b.n	8004d08 <_svfiprintf_r+0x48>
 8004da6:	4b41      	ldr	r3, [pc, #260]	; (8004eac <_svfiprintf_r+0x1ec>)
 8004da8:	6822      	ldr	r2, [r4, #0]
 8004daa:	1ac0      	subs	r0, r0, r3
 8004dac:	2301      	movs	r3, #1
 8004dae:	4083      	lsls	r3, r0
 8004db0:	4313      	orrs	r3, r2
 8004db2:	002e      	movs	r6, r5
 8004db4:	6023      	str	r3, [r4, #0]
 8004db6:	e7ce      	b.n	8004d56 <_svfiprintf_r+0x96>
 8004db8:	9b07      	ldr	r3, [sp, #28]
 8004dba:	1d19      	adds	r1, r3, #4
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	9107      	str	r1, [sp, #28]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	db01      	blt.n	8004dc8 <_svfiprintf_r+0x108>
 8004dc4:	930b      	str	r3, [sp, #44]	; 0x2c
 8004dc6:	e004      	b.n	8004dd2 <_svfiprintf_r+0x112>
 8004dc8:	425b      	negs	r3, r3
 8004dca:	60e3      	str	r3, [r4, #12]
 8004dcc:	2302      	movs	r3, #2
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	6023      	str	r3, [r4, #0]
 8004dd2:	782b      	ldrb	r3, [r5, #0]
 8004dd4:	2b2e      	cmp	r3, #46	; 0x2e
 8004dd6:	d10a      	bne.n	8004dee <_svfiprintf_r+0x12e>
 8004dd8:	786b      	ldrb	r3, [r5, #1]
 8004dda:	2b2a      	cmp	r3, #42	; 0x2a
 8004ddc:	d135      	bne.n	8004e4a <_svfiprintf_r+0x18a>
 8004dde:	9b07      	ldr	r3, [sp, #28]
 8004de0:	3502      	adds	r5, #2
 8004de2:	1d1a      	adds	r2, r3, #4
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	9207      	str	r2, [sp, #28]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	db2b      	blt.n	8004e44 <_svfiprintf_r+0x184>
 8004dec:	9309      	str	r3, [sp, #36]	; 0x24
 8004dee:	4e30      	ldr	r6, [pc, #192]	; (8004eb0 <_svfiprintf_r+0x1f0>)
 8004df0:	2203      	movs	r2, #3
 8004df2:	0030      	movs	r0, r6
 8004df4:	7829      	ldrb	r1, [r5, #0]
 8004df6:	f000 f9e5 	bl	80051c4 <memchr>
 8004dfa:	2800      	cmp	r0, #0
 8004dfc:	d006      	beq.n	8004e0c <_svfiprintf_r+0x14c>
 8004dfe:	2340      	movs	r3, #64	; 0x40
 8004e00:	1b80      	subs	r0, r0, r6
 8004e02:	4083      	lsls	r3, r0
 8004e04:	6822      	ldr	r2, [r4, #0]
 8004e06:	3501      	adds	r5, #1
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	6023      	str	r3, [r4, #0]
 8004e0c:	7829      	ldrb	r1, [r5, #0]
 8004e0e:	2206      	movs	r2, #6
 8004e10:	4828      	ldr	r0, [pc, #160]	; (8004eb4 <_svfiprintf_r+0x1f4>)
 8004e12:	1c6e      	adds	r6, r5, #1
 8004e14:	7621      	strb	r1, [r4, #24]
 8004e16:	f000 f9d5 	bl	80051c4 <memchr>
 8004e1a:	2800      	cmp	r0, #0
 8004e1c:	d03c      	beq.n	8004e98 <_svfiprintf_r+0x1d8>
 8004e1e:	4b26      	ldr	r3, [pc, #152]	; (8004eb8 <_svfiprintf_r+0x1f8>)
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d125      	bne.n	8004e70 <_svfiprintf_r+0x1b0>
 8004e24:	2207      	movs	r2, #7
 8004e26:	9b07      	ldr	r3, [sp, #28]
 8004e28:	3307      	adds	r3, #7
 8004e2a:	4393      	bics	r3, r2
 8004e2c:	3308      	adds	r3, #8
 8004e2e:	9307      	str	r3, [sp, #28]
 8004e30:	6963      	ldr	r3, [r4, #20]
 8004e32:	9a04      	ldr	r2, [sp, #16]
 8004e34:	189b      	adds	r3, r3, r2
 8004e36:	6163      	str	r3, [r4, #20]
 8004e38:	e765      	b.n	8004d06 <_svfiprintf_r+0x46>
 8004e3a:	4343      	muls	r3, r0
 8004e3c:	0035      	movs	r5, r6
 8004e3e:	2101      	movs	r1, #1
 8004e40:	189b      	adds	r3, r3, r2
 8004e42:	e7a6      	b.n	8004d92 <_svfiprintf_r+0xd2>
 8004e44:	2301      	movs	r3, #1
 8004e46:	425b      	negs	r3, r3
 8004e48:	e7d0      	b.n	8004dec <_svfiprintf_r+0x12c>
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	200a      	movs	r0, #10
 8004e4e:	001a      	movs	r2, r3
 8004e50:	3501      	adds	r5, #1
 8004e52:	6063      	str	r3, [r4, #4]
 8004e54:	7829      	ldrb	r1, [r5, #0]
 8004e56:	1c6e      	adds	r6, r5, #1
 8004e58:	3930      	subs	r1, #48	; 0x30
 8004e5a:	2909      	cmp	r1, #9
 8004e5c:	d903      	bls.n	8004e66 <_svfiprintf_r+0x1a6>
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d0c5      	beq.n	8004dee <_svfiprintf_r+0x12e>
 8004e62:	9209      	str	r2, [sp, #36]	; 0x24
 8004e64:	e7c3      	b.n	8004dee <_svfiprintf_r+0x12e>
 8004e66:	4342      	muls	r2, r0
 8004e68:	0035      	movs	r5, r6
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	1852      	adds	r2, r2, r1
 8004e6e:	e7f1      	b.n	8004e54 <_svfiprintf_r+0x194>
 8004e70:	ab07      	add	r3, sp, #28
 8004e72:	9300      	str	r3, [sp, #0]
 8004e74:	003a      	movs	r2, r7
 8004e76:	0021      	movs	r1, r4
 8004e78:	4b10      	ldr	r3, [pc, #64]	; (8004ebc <_svfiprintf_r+0x1fc>)
 8004e7a:	9803      	ldr	r0, [sp, #12]
 8004e7c:	e000      	b.n	8004e80 <_svfiprintf_r+0x1c0>
 8004e7e:	bf00      	nop
 8004e80:	9004      	str	r0, [sp, #16]
 8004e82:	9b04      	ldr	r3, [sp, #16]
 8004e84:	3301      	adds	r3, #1
 8004e86:	d1d3      	bne.n	8004e30 <_svfiprintf_r+0x170>
 8004e88:	89bb      	ldrh	r3, [r7, #12]
 8004e8a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004e8c:	065b      	lsls	r3, r3, #25
 8004e8e:	d400      	bmi.n	8004e92 <_svfiprintf_r+0x1d2>
 8004e90:	e72d      	b.n	8004cee <_svfiprintf_r+0x2e>
 8004e92:	2001      	movs	r0, #1
 8004e94:	4240      	negs	r0, r0
 8004e96:	e72a      	b.n	8004cee <_svfiprintf_r+0x2e>
 8004e98:	ab07      	add	r3, sp, #28
 8004e9a:	9300      	str	r3, [sp, #0]
 8004e9c:	003a      	movs	r2, r7
 8004e9e:	0021      	movs	r1, r4
 8004ea0:	4b06      	ldr	r3, [pc, #24]	; (8004ebc <_svfiprintf_r+0x1fc>)
 8004ea2:	9803      	ldr	r0, [sp, #12]
 8004ea4:	f000 f87c 	bl	8004fa0 <_printf_i>
 8004ea8:	e7ea      	b.n	8004e80 <_svfiprintf_r+0x1c0>
 8004eaa:	46c0      	nop			; (mov r8, r8)
 8004eac:	080056c0 	.word	0x080056c0
 8004eb0:	080056c6 	.word	0x080056c6
 8004eb4:	080056ca 	.word	0x080056ca
 8004eb8:	00000000 	.word	0x00000000
 8004ebc:	08004bfd 	.word	0x08004bfd

08004ec0 <_printf_common>:
 8004ec0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ec2:	0015      	movs	r5, r2
 8004ec4:	9301      	str	r3, [sp, #4]
 8004ec6:	688a      	ldr	r2, [r1, #8]
 8004ec8:	690b      	ldr	r3, [r1, #16]
 8004eca:	000c      	movs	r4, r1
 8004ecc:	9000      	str	r0, [sp, #0]
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	da00      	bge.n	8004ed4 <_printf_common+0x14>
 8004ed2:	0013      	movs	r3, r2
 8004ed4:	0022      	movs	r2, r4
 8004ed6:	602b      	str	r3, [r5, #0]
 8004ed8:	3243      	adds	r2, #67	; 0x43
 8004eda:	7812      	ldrb	r2, [r2, #0]
 8004edc:	2a00      	cmp	r2, #0
 8004ede:	d001      	beq.n	8004ee4 <_printf_common+0x24>
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	602b      	str	r3, [r5, #0]
 8004ee4:	6823      	ldr	r3, [r4, #0]
 8004ee6:	069b      	lsls	r3, r3, #26
 8004ee8:	d502      	bpl.n	8004ef0 <_printf_common+0x30>
 8004eea:	682b      	ldr	r3, [r5, #0]
 8004eec:	3302      	adds	r3, #2
 8004eee:	602b      	str	r3, [r5, #0]
 8004ef0:	6822      	ldr	r2, [r4, #0]
 8004ef2:	2306      	movs	r3, #6
 8004ef4:	0017      	movs	r7, r2
 8004ef6:	401f      	ands	r7, r3
 8004ef8:	421a      	tst	r2, r3
 8004efa:	d027      	beq.n	8004f4c <_printf_common+0x8c>
 8004efc:	0023      	movs	r3, r4
 8004efe:	3343      	adds	r3, #67	; 0x43
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	1e5a      	subs	r2, r3, #1
 8004f04:	4193      	sbcs	r3, r2
 8004f06:	6822      	ldr	r2, [r4, #0]
 8004f08:	0692      	lsls	r2, r2, #26
 8004f0a:	d430      	bmi.n	8004f6e <_printf_common+0xae>
 8004f0c:	0022      	movs	r2, r4
 8004f0e:	9901      	ldr	r1, [sp, #4]
 8004f10:	9800      	ldr	r0, [sp, #0]
 8004f12:	9e08      	ldr	r6, [sp, #32]
 8004f14:	3243      	adds	r2, #67	; 0x43
 8004f16:	47b0      	blx	r6
 8004f18:	1c43      	adds	r3, r0, #1
 8004f1a:	d025      	beq.n	8004f68 <_printf_common+0xa8>
 8004f1c:	2306      	movs	r3, #6
 8004f1e:	6820      	ldr	r0, [r4, #0]
 8004f20:	682a      	ldr	r2, [r5, #0]
 8004f22:	68e1      	ldr	r1, [r4, #12]
 8004f24:	2500      	movs	r5, #0
 8004f26:	4003      	ands	r3, r0
 8004f28:	2b04      	cmp	r3, #4
 8004f2a:	d103      	bne.n	8004f34 <_printf_common+0x74>
 8004f2c:	1a8d      	subs	r5, r1, r2
 8004f2e:	43eb      	mvns	r3, r5
 8004f30:	17db      	asrs	r3, r3, #31
 8004f32:	401d      	ands	r5, r3
 8004f34:	68a3      	ldr	r3, [r4, #8]
 8004f36:	6922      	ldr	r2, [r4, #16]
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	dd01      	ble.n	8004f40 <_printf_common+0x80>
 8004f3c:	1a9b      	subs	r3, r3, r2
 8004f3e:	18ed      	adds	r5, r5, r3
 8004f40:	2700      	movs	r7, #0
 8004f42:	42bd      	cmp	r5, r7
 8004f44:	d120      	bne.n	8004f88 <_printf_common+0xc8>
 8004f46:	2000      	movs	r0, #0
 8004f48:	e010      	b.n	8004f6c <_printf_common+0xac>
 8004f4a:	3701      	adds	r7, #1
 8004f4c:	68e3      	ldr	r3, [r4, #12]
 8004f4e:	682a      	ldr	r2, [r5, #0]
 8004f50:	1a9b      	subs	r3, r3, r2
 8004f52:	42bb      	cmp	r3, r7
 8004f54:	ddd2      	ble.n	8004efc <_printf_common+0x3c>
 8004f56:	0022      	movs	r2, r4
 8004f58:	2301      	movs	r3, #1
 8004f5a:	9901      	ldr	r1, [sp, #4]
 8004f5c:	9800      	ldr	r0, [sp, #0]
 8004f5e:	9e08      	ldr	r6, [sp, #32]
 8004f60:	3219      	adds	r2, #25
 8004f62:	47b0      	blx	r6
 8004f64:	1c43      	adds	r3, r0, #1
 8004f66:	d1f0      	bne.n	8004f4a <_printf_common+0x8a>
 8004f68:	2001      	movs	r0, #1
 8004f6a:	4240      	negs	r0, r0
 8004f6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004f6e:	2030      	movs	r0, #48	; 0x30
 8004f70:	18e1      	adds	r1, r4, r3
 8004f72:	3143      	adds	r1, #67	; 0x43
 8004f74:	7008      	strb	r0, [r1, #0]
 8004f76:	0021      	movs	r1, r4
 8004f78:	1c5a      	adds	r2, r3, #1
 8004f7a:	3145      	adds	r1, #69	; 0x45
 8004f7c:	7809      	ldrb	r1, [r1, #0]
 8004f7e:	18a2      	adds	r2, r4, r2
 8004f80:	3243      	adds	r2, #67	; 0x43
 8004f82:	3302      	adds	r3, #2
 8004f84:	7011      	strb	r1, [r2, #0]
 8004f86:	e7c1      	b.n	8004f0c <_printf_common+0x4c>
 8004f88:	0022      	movs	r2, r4
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	9901      	ldr	r1, [sp, #4]
 8004f8e:	9800      	ldr	r0, [sp, #0]
 8004f90:	9e08      	ldr	r6, [sp, #32]
 8004f92:	321a      	adds	r2, #26
 8004f94:	47b0      	blx	r6
 8004f96:	1c43      	adds	r3, r0, #1
 8004f98:	d0e6      	beq.n	8004f68 <_printf_common+0xa8>
 8004f9a:	3701      	adds	r7, #1
 8004f9c:	e7d1      	b.n	8004f42 <_printf_common+0x82>
	...

08004fa0 <_printf_i>:
 8004fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fa2:	b08b      	sub	sp, #44	; 0x2c
 8004fa4:	9206      	str	r2, [sp, #24]
 8004fa6:	000a      	movs	r2, r1
 8004fa8:	3243      	adds	r2, #67	; 0x43
 8004faa:	9307      	str	r3, [sp, #28]
 8004fac:	9005      	str	r0, [sp, #20]
 8004fae:	9204      	str	r2, [sp, #16]
 8004fb0:	7e0a      	ldrb	r2, [r1, #24]
 8004fb2:	000c      	movs	r4, r1
 8004fb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004fb6:	2a78      	cmp	r2, #120	; 0x78
 8004fb8:	d807      	bhi.n	8004fca <_printf_i+0x2a>
 8004fba:	2a62      	cmp	r2, #98	; 0x62
 8004fbc:	d809      	bhi.n	8004fd2 <_printf_i+0x32>
 8004fbe:	2a00      	cmp	r2, #0
 8004fc0:	d100      	bne.n	8004fc4 <_printf_i+0x24>
 8004fc2:	e0c1      	b.n	8005148 <_printf_i+0x1a8>
 8004fc4:	2a58      	cmp	r2, #88	; 0x58
 8004fc6:	d100      	bne.n	8004fca <_printf_i+0x2a>
 8004fc8:	e08c      	b.n	80050e4 <_printf_i+0x144>
 8004fca:	0026      	movs	r6, r4
 8004fcc:	3642      	adds	r6, #66	; 0x42
 8004fce:	7032      	strb	r2, [r6, #0]
 8004fd0:	e022      	b.n	8005018 <_printf_i+0x78>
 8004fd2:	0010      	movs	r0, r2
 8004fd4:	3863      	subs	r0, #99	; 0x63
 8004fd6:	2815      	cmp	r0, #21
 8004fd8:	d8f7      	bhi.n	8004fca <_printf_i+0x2a>
 8004fda:	f7fb f895 	bl	8000108 <__gnu_thumb1_case_shi>
 8004fde:	0016      	.short	0x0016
 8004fe0:	fff6001f 	.word	0xfff6001f
 8004fe4:	fff6fff6 	.word	0xfff6fff6
 8004fe8:	001ffff6 	.word	0x001ffff6
 8004fec:	fff6fff6 	.word	0xfff6fff6
 8004ff0:	fff6fff6 	.word	0xfff6fff6
 8004ff4:	003600a8 	.word	0x003600a8
 8004ff8:	fff6009a 	.word	0xfff6009a
 8004ffc:	00b9fff6 	.word	0x00b9fff6
 8005000:	0036fff6 	.word	0x0036fff6
 8005004:	fff6fff6 	.word	0xfff6fff6
 8005008:	009e      	.short	0x009e
 800500a:	0026      	movs	r6, r4
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	3642      	adds	r6, #66	; 0x42
 8005010:	1d11      	adds	r1, r2, #4
 8005012:	6019      	str	r1, [r3, #0]
 8005014:	6813      	ldr	r3, [r2, #0]
 8005016:	7033      	strb	r3, [r6, #0]
 8005018:	2301      	movs	r3, #1
 800501a:	e0a7      	b.n	800516c <_printf_i+0x1cc>
 800501c:	6808      	ldr	r0, [r1, #0]
 800501e:	6819      	ldr	r1, [r3, #0]
 8005020:	1d0a      	adds	r2, r1, #4
 8005022:	0605      	lsls	r5, r0, #24
 8005024:	d50b      	bpl.n	800503e <_printf_i+0x9e>
 8005026:	680d      	ldr	r5, [r1, #0]
 8005028:	601a      	str	r2, [r3, #0]
 800502a:	2d00      	cmp	r5, #0
 800502c:	da03      	bge.n	8005036 <_printf_i+0x96>
 800502e:	232d      	movs	r3, #45	; 0x2d
 8005030:	9a04      	ldr	r2, [sp, #16]
 8005032:	426d      	negs	r5, r5
 8005034:	7013      	strb	r3, [r2, #0]
 8005036:	4b61      	ldr	r3, [pc, #388]	; (80051bc <_printf_i+0x21c>)
 8005038:	270a      	movs	r7, #10
 800503a:	9303      	str	r3, [sp, #12]
 800503c:	e01b      	b.n	8005076 <_printf_i+0xd6>
 800503e:	680d      	ldr	r5, [r1, #0]
 8005040:	601a      	str	r2, [r3, #0]
 8005042:	0641      	lsls	r1, r0, #25
 8005044:	d5f1      	bpl.n	800502a <_printf_i+0x8a>
 8005046:	b22d      	sxth	r5, r5
 8005048:	e7ef      	b.n	800502a <_printf_i+0x8a>
 800504a:	680d      	ldr	r5, [r1, #0]
 800504c:	6819      	ldr	r1, [r3, #0]
 800504e:	1d08      	adds	r0, r1, #4
 8005050:	6018      	str	r0, [r3, #0]
 8005052:	062e      	lsls	r6, r5, #24
 8005054:	d501      	bpl.n	800505a <_printf_i+0xba>
 8005056:	680d      	ldr	r5, [r1, #0]
 8005058:	e003      	b.n	8005062 <_printf_i+0xc2>
 800505a:	066d      	lsls	r5, r5, #25
 800505c:	d5fb      	bpl.n	8005056 <_printf_i+0xb6>
 800505e:	680d      	ldr	r5, [r1, #0]
 8005060:	b2ad      	uxth	r5, r5
 8005062:	4b56      	ldr	r3, [pc, #344]	; (80051bc <_printf_i+0x21c>)
 8005064:	2708      	movs	r7, #8
 8005066:	9303      	str	r3, [sp, #12]
 8005068:	2a6f      	cmp	r2, #111	; 0x6f
 800506a:	d000      	beq.n	800506e <_printf_i+0xce>
 800506c:	3702      	adds	r7, #2
 800506e:	0023      	movs	r3, r4
 8005070:	2200      	movs	r2, #0
 8005072:	3343      	adds	r3, #67	; 0x43
 8005074:	701a      	strb	r2, [r3, #0]
 8005076:	6863      	ldr	r3, [r4, #4]
 8005078:	60a3      	str	r3, [r4, #8]
 800507a:	2b00      	cmp	r3, #0
 800507c:	db03      	blt.n	8005086 <_printf_i+0xe6>
 800507e:	2204      	movs	r2, #4
 8005080:	6821      	ldr	r1, [r4, #0]
 8005082:	4391      	bics	r1, r2
 8005084:	6021      	str	r1, [r4, #0]
 8005086:	2d00      	cmp	r5, #0
 8005088:	d102      	bne.n	8005090 <_printf_i+0xf0>
 800508a:	9e04      	ldr	r6, [sp, #16]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00c      	beq.n	80050aa <_printf_i+0x10a>
 8005090:	9e04      	ldr	r6, [sp, #16]
 8005092:	0028      	movs	r0, r5
 8005094:	0039      	movs	r1, r7
 8005096:	f7fb f8c7 	bl	8000228 <__aeabi_uidivmod>
 800509a:	9b03      	ldr	r3, [sp, #12]
 800509c:	3e01      	subs	r6, #1
 800509e:	5c5b      	ldrb	r3, [r3, r1]
 80050a0:	7033      	strb	r3, [r6, #0]
 80050a2:	002b      	movs	r3, r5
 80050a4:	0005      	movs	r5, r0
 80050a6:	429f      	cmp	r7, r3
 80050a8:	d9f3      	bls.n	8005092 <_printf_i+0xf2>
 80050aa:	2f08      	cmp	r7, #8
 80050ac:	d109      	bne.n	80050c2 <_printf_i+0x122>
 80050ae:	6823      	ldr	r3, [r4, #0]
 80050b0:	07db      	lsls	r3, r3, #31
 80050b2:	d506      	bpl.n	80050c2 <_printf_i+0x122>
 80050b4:	6863      	ldr	r3, [r4, #4]
 80050b6:	6922      	ldr	r2, [r4, #16]
 80050b8:	4293      	cmp	r3, r2
 80050ba:	dc02      	bgt.n	80050c2 <_printf_i+0x122>
 80050bc:	2330      	movs	r3, #48	; 0x30
 80050be:	3e01      	subs	r6, #1
 80050c0:	7033      	strb	r3, [r6, #0]
 80050c2:	9b04      	ldr	r3, [sp, #16]
 80050c4:	1b9b      	subs	r3, r3, r6
 80050c6:	6123      	str	r3, [r4, #16]
 80050c8:	9b07      	ldr	r3, [sp, #28]
 80050ca:	0021      	movs	r1, r4
 80050cc:	9300      	str	r3, [sp, #0]
 80050ce:	9805      	ldr	r0, [sp, #20]
 80050d0:	9b06      	ldr	r3, [sp, #24]
 80050d2:	aa09      	add	r2, sp, #36	; 0x24
 80050d4:	f7ff fef4 	bl	8004ec0 <_printf_common>
 80050d8:	1c43      	adds	r3, r0, #1
 80050da:	d14c      	bne.n	8005176 <_printf_i+0x1d6>
 80050dc:	2001      	movs	r0, #1
 80050de:	4240      	negs	r0, r0
 80050e0:	b00b      	add	sp, #44	; 0x2c
 80050e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050e4:	3145      	adds	r1, #69	; 0x45
 80050e6:	700a      	strb	r2, [r1, #0]
 80050e8:	4a34      	ldr	r2, [pc, #208]	; (80051bc <_printf_i+0x21c>)
 80050ea:	9203      	str	r2, [sp, #12]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	6821      	ldr	r1, [r4, #0]
 80050f0:	ca20      	ldmia	r2!, {r5}
 80050f2:	601a      	str	r2, [r3, #0]
 80050f4:	0608      	lsls	r0, r1, #24
 80050f6:	d516      	bpl.n	8005126 <_printf_i+0x186>
 80050f8:	07cb      	lsls	r3, r1, #31
 80050fa:	d502      	bpl.n	8005102 <_printf_i+0x162>
 80050fc:	2320      	movs	r3, #32
 80050fe:	4319      	orrs	r1, r3
 8005100:	6021      	str	r1, [r4, #0]
 8005102:	2710      	movs	r7, #16
 8005104:	2d00      	cmp	r5, #0
 8005106:	d1b2      	bne.n	800506e <_printf_i+0xce>
 8005108:	2320      	movs	r3, #32
 800510a:	6822      	ldr	r2, [r4, #0]
 800510c:	439a      	bics	r2, r3
 800510e:	6022      	str	r2, [r4, #0]
 8005110:	e7ad      	b.n	800506e <_printf_i+0xce>
 8005112:	2220      	movs	r2, #32
 8005114:	6809      	ldr	r1, [r1, #0]
 8005116:	430a      	orrs	r2, r1
 8005118:	6022      	str	r2, [r4, #0]
 800511a:	0022      	movs	r2, r4
 800511c:	2178      	movs	r1, #120	; 0x78
 800511e:	3245      	adds	r2, #69	; 0x45
 8005120:	7011      	strb	r1, [r2, #0]
 8005122:	4a27      	ldr	r2, [pc, #156]	; (80051c0 <_printf_i+0x220>)
 8005124:	e7e1      	b.n	80050ea <_printf_i+0x14a>
 8005126:	0648      	lsls	r0, r1, #25
 8005128:	d5e6      	bpl.n	80050f8 <_printf_i+0x158>
 800512a:	b2ad      	uxth	r5, r5
 800512c:	e7e4      	b.n	80050f8 <_printf_i+0x158>
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	680d      	ldr	r5, [r1, #0]
 8005132:	1d10      	adds	r0, r2, #4
 8005134:	6949      	ldr	r1, [r1, #20]
 8005136:	6018      	str	r0, [r3, #0]
 8005138:	6813      	ldr	r3, [r2, #0]
 800513a:	062e      	lsls	r6, r5, #24
 800513c:	d501      	bpl.n	8005142 <_printf_i+0x1a2>
 800513e:	6019      	str	r1, [r3, #0]
 8005140:	e002      	b.n	8005148 <_printf_i+0x1a8>
 8005142:	066d      	lsls	r5, r5, #25
 8005144:	d5fb      	bpl.n	800513e <_printf_i+0x19e>
 8005146:	8019      	strh	r1, [r3, #0]
 8005148:	2300      	movs	r3, #0
 800514a:	9e04      	ldr	r6, [sp, #16]
 800514c:	6123      	str	r3, [r4, #16]
 800514e:	e7bb      	b.n	80050c8 <_printf_i+0x128>
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	1d11      	adds	r1, r2, #4
 8005154:	6019      	str	r1, [r3, #0]
 8005156:	6816      	ldr	r6, [r2, #0]
 8005158:	2100      	movs	r1, #0
 800515a:	0030      	movs	r0, r6
 800515c:	6862      	ldr	r2, [r4, #4]
 800515e:	f000 f831 	bl	80051c4 <memchr>
 8005162:	2800      	cmp	r0, #0
 8005164:	d001      	beq.n	800516a <_printf_i+0x1ca>
 8005166:	1b80      	subs	r0, r0, r6
 8005168:	6060      	str	r0, [r4, #4]
 800516a:	6863      	ldr	r3, [r4, #4]
 800516c:	6123      	str	r3, [r4, #16]
 800516e:	2300      	movs	r3, #0
 8005170:	9a04      	ldr	r2, [sp, #16]
 8005172:	7013      	strb	r3, [r2, #0]
 8005174:	e7a8      	b.n	80050c8 <_printf_i+0x128>
 8005176:	6923      	ldr	r3, [r4, #16]
 8005178:	0032      	movs	r2, r6
 800517a:	9906      	ldr	r1, [sp, #24]
 800517c:	9805      	ldr	r0, [sp, #20]
 800517e:	9d07      	ldr	r5, [sp, #28]
 8005180:	47a8      	blx	r5
 8005182:	1c43      	adds	r3, r0, #1
 8005184:	d0aa      	beq.n	80050dc <_printf_i+0x13c>
 8005186:	6823      	ldr	r3, [r4, #0]
 8005188:	079b      	lsls	r3, r3, #30
 800518a:	d415      	bmi.n	80051b8 <_printf_i+0x218>
 800518c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800518e:	68e0      	ldr	r0, [r4, #12]
 8005190:	4298      	cmp	r0, r3
 8005192:	daa5      	bge.n	80050e0 <_printf_i+0x140>
 8005194:	0018      	movs	r0, r3
 8005196:	e7a3      	b.n	80050e0 <_printf_i+0x140>
 8005198:	0022      	movs	r2, r4
 800519a:	2301      	movs	r3, #1
 800519c:	9906      	ldr	r1, [sp, #24]
 800519e:	9805      	ldr	r0, [sp, #20]
 80051a0:	9e07      	ldr	r6, [sp, #28]
 80051a2:	3219      	adds	r2, #25
 80051a4:	47b0      	blx	r6
 80051a6:	1c43      	adds	r3, r0, #1
 80051a8:	d098      	beq.n	80050dc <_printf_i+0x13c>
 80051aa:	3501      	adds	r5, #1
 80051ac:	68e3      	ldr	r3, [r4, #12]
 80051ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051b0:	1a9b      	subs	r3, r3, r2
 80051b2:	42ab      	cmp	r3, r5
 80051b4:	dcf0      	bgt.n	8005198 <_printf_i+0x1f8>
 80051b6:	e7e9      	b.n	800518c <_printf_i+0x1ec>
 80051b8:	2500      	movs	r5, #0
 80051ba:	e7f7      	b.n	80051ac <_printf_i+0x20c>
 80051bc:	080056d1 	.word	0x080056d1
 80051c0:	080056e2 	.word	0x080056e2

080051c4 <memchr>:
 80051c4:	b2c9      	uxtb	r1, r1
 80051c6:	1882      	adds	r2, r0, r2
 80051c8:	4290      	cmp	r0, r2
 80051ca:	d101      	bne.n	80051d0 <memchr+0xc>
 80051cc:	2000      	movs	r0, #0
 80051ce:	4770      	bx	lr
 80051d0:	7803      	ldrb	r3, [r0, #0]
 80051d2:	428b      	cmp	r3, r1
 80051d4:	d0fb      	beq.n	80051ce <memchr+0xa>
 80051d6:	3001      	adds	r0, #1
 80051d8:	e7f6      	b.n	80051c8 <memchr+0x4>

080051da <memcpy>:
 80051da:	2300      	movs	r3, #0
 80051dc:	b510      	push	{r4, lr}
 80051de:	429a      	cmp	r2, r3
 80051e0:	d100      	bne.n	80051e4 <memcpy+0xa>
 80051e2:	bd10      	pop	{r4, pc}
 80051e4:	5ccc      	ldrb	r4, [r1, r3]
 80051e6:	54c4      	strb	r4, [r0, r3]
 80051e8:	3301      	adds	r3, #1
 80051ea:	e7f8      	b.n	80051de <memcpy+0x4>

080051ec <memmove>:
 80051ec:	b510      	push	{r4, lr}
 80051ee:	4288      	cmp	r0, r1
 80051f0:	d902      	bls.n	80051f8 <memmove+0xc>
 80051f2:	188b      	adds	r3, r1, r2
 80051f4:	4298      	cmp	r0, r3
 80051f6:	d303      	bcc.n	8005200 <memmove+0x14>
 80051f8:	2300      	movs	r3, #0
 80051fa:	e007      	b.n	800520c <memmove+0x20>
 80051fc:	5c8b      	ldrb	r3, [r1, r2]
 80051fe:	5483      	strb	r3, [r0, r2]
 8005200:	3a01      	subs	r2, #1
 8005202:	d2fb      	bcs.n	80051fc <memmove+0x10>
 8005204:	bd10      	pop	{r4, pc}
 8005206:	5ccc      	ldrb	r4, [r1, r3]
 8005208:	54c4      	strb	r4, [r0, r3]
 800520a:	3301      	adds	r3, #1
 800520c:	429a      	cmp	r2, r3
 800520e:	d1fa      	bne.n	8005206 <memmove+0x1a>
 8005210:	e7f8      	b.n	8005204 <memmove+0x18>
	...

08005214 <_free_r>:
 8005214:	b570      	push	{r4, r5, r6, lr}
 8005216:	0005      	movs	r5, r0
 8005218:	2900      	cmp	r1, #0
 800521a:	d010      	beq.n	800523e <_free_r+0x2a>
 800521c:	1f0c      	subs	r4, r1, #4
 800521e:	6823      	ldr	r3, [r4, #0]
 8005220:	2b00      	cmp	r3, #0
 8005222:	da00      	bge.n	8005226 <_free_r+0x12>
 8005224:	18e4      	adds	r4, r4, r3
 8005226:	0028      	movs	r0, r5
 8005228:	f000 f918 	bl	800545c <__malloc_lock>
 800522c:	4a1d      	ldr	r2, [pc, #116]	; (80052a4 <_free_r+0x90>)
 800522e:	6813      	ldr	r3, [r2, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d105      	bne.n	8005240 <_free_r+0x2c>
 8005234:	6063      	str	r3, [r4, #4]
 8005236:	6014      	str	r4, [r2, #0]
 8005238:	0028      	movs	r0, r5
 800523a:	f000 f917 	bl	800546c <__malloc_unlock>
 800523e:	bd70      	pop	{r4, r5, r6, pc}
 8005240:	42a3      	cmp	r3, r4
 8005242:	d908      	bls.n	8005256 <_free_r+0x42>
 8005244:	6821      	ldr	r1, [r4, #0]
 8005246:	1860      	adds	r0, r4, r1
 8005248:	4283      	cmp	r3, r0
 800524a:	d1f3      	bne.n	8005234 <_free_r+0x20>
 800524c:	6818      	ldr	r0, [r3, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	1841      	adds	r1, r0, r1
 8005252:	6021      	str	r1, [r4, #0]
 8005254:	e7ee      	b.n	8005234 <_free_r+0x20>
 8005256:	001a      	movs	r2, r3
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d001      	beq.n	8005262 <_free_r+0x4e>
 800525e:	42a3      	cmp	r3, r4
 8005260:	d9f9      	bls.n	8005256 <_free_r+0x42>
 8005262:	6811      	ldr	r1, [r2, #0]
 8005264:	1850      	adds	r0, r2, r1
 8005266:	42a0      	cmp	r0, r4
 8005268:	d10b      	bne.n	8005282 <_free_r+0x6e>
 800526a:	6820      	ldr	r0, [r4, #0]
 800526c:	1809      	adds	r1, r1, r0
 800526e:	1850      	adds	r0, r2, r1
 8005270:	6011      	str	r1, [r2, #0]
 8005272:	4283      	cmp	r3, r0
 8005274:	d1e0      	bne.n	8005238 <_free_r+0x24>
 8005276:	6818      	ldr	r0, [r3, #0]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	1841      	adds	r1, r0, r1
 800527c:	6011      	str	r1, [r2, #0]
 800527e:	6053      	str	r3, [r2, #4]
 8005280:	e7da      	b.n	8005238 <_free_r+0x24>
 8005282:	42a0      	cmp	r0, r4
 8005284:	d902      	bls.n	800528c <_free_r+0x78>
 8005286:	230c      	movs	r3, #12
 8005288:	602b      	str	r3, [r5, #0]
 800528a:	e7d5      	b.n	8005238 <_free_r+0x24>
 800528c:	6821      	ldr	r1, [r4, #0]
 800528e:	1860      	adds	r0, r4, r1
 8005290:	4283      	cmp	r3, r0
 8005292:	d103      	bne.n	800529c <_free_r+0x88>
 8005294:	6818      	ldr	r0, [r3, #0]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	1841      	adds	r1, r0, r1
 800529a:	6021      	str	r1, [r4, #0]
 800529c:	6063      	str	r3, [r4, #4]
 800529e:	6054      	str	r4, [r2, #4]
 80052a0:	e7ca      	b.n	8005238 <_free_r+0x24>
 80052a2:	46c0      	nop			; (mov r8, r8)
 80052a4:	200001e4 	.word	0x200001e4

080052a8 <sbrk_aligned>:
 80052a8:	b570      	push	{r4, r5, r6, lr}
 80052aa:	4e0f      	ldr	r6, [pc, #60]	; (80052e8 <sbrk_aligned+0x40>)
 80052ac:	000d      	movs	r5, r1
 80052ae:	6831      	ldr	r1, [r6, #0]
 80052b0:	0004      	movs	r4, r0
 80052b2:	2900      	cmp	r1, #0
 80052b4:	d102      	bne.n	80052bc <sbrk_aligned+0x14>
 80052b6:	f000 f8bf 	bl	8005438 <_sbrk_r>
 80052ba:	6030      	str	r0, [r6, #0]
 80052bc:	0029      	movs	r1, r5
 80052be:	0020      	movs	r0, r4
 80052c0:	f000 f8ba 	bl	8005438 <_sbrk_r>
 80052c4:	1c43      	adds	r3, r0, #1
 80052c6:	d00a      	beq.n	80052de <sbrk_aligned+0x36>
 80052c8:	2303      	movs	r3, #3
 80052ca:	1cc5      	adds	r5, r0, #3
 80052cc:	439d      	bics	r5, r3
 80052ce:	42a8      	cmp	r0, r5
 80052d0:	d007      	beq.n	80052e2 <sbrk_aligned+0x3a>
 80052d2:	1a29      	subs	r1, r5, r0
 80052d4:	0020      	movs	r0, r4
 80052d6:	f000 f8af 	bl	8005438 <_sbrk_r>
 80052da:	1c43      	adds	r3, r0, #1
 80052dc:	d101      	bne.n	80052e2 <sbrk_aligned+0x3a>
 80052de:	2501      	movs	r5, #1
 80052e0:	426d      	negs	r5, r5
 80052e2:	0028      	movs	r0, r5
 80052e4:	bd70      	pop	{r4, r5, r6, pc}
 80052e6:	46c0      	nop			; (mov r8, r8)
 80052e8:	200001e8 	.word	0x200001e8

080052ec <_malloc_r>:
 80052ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052ee:	2203      	movs	r2, #3
 80052f0:	1ccb      	adds	r3, r1, #3
 80052f2:	4393      	bics	r3, r2
 80052f4:	3308      	adds	r3, #8
 80052f6:	0006      	movs	r6, r0
 80052f8:	001f      	movs	r7, r3
 80052fa:	2b0c      	cmp	r3, #12
 80052fc:	d232      	bcs.n	8005364 <_malloc_r+0x78>
 80052fe:	270c      	movs	r7, #12
 8005300:	42b9      	cmp	r1, r7
 8005302:	d831      	bhi.n	8005368 <_malloc_r+0x7c>
 8005304:	0030      	movs	r0, r6
 8005306:	f000 f8a9 	bl	800545c <__malloc_lock>
 800530a:	4d32      	ldr	r5, [pc, #200]	; (80053d4 <_malloc_r+0xe8>)
 800530c:	682b      	ldr	r3, [r5, #0]
 800530e:	001c      	movs	r4, r3
 8005310:	2c00      	cmp	r4, #0
 8005312:	d12e      	bne.n	8005372 <_malloc_r+0x86>
 8005314:	0039      	movs	r1, r7
 8005316:	0030      	movs	r0, r6
 8005318:	f7ff ffc6 	bl	80052a8 <sbrk_aligned>
 800531c:	0004      	movs	r4, r0
 800531e:	1c43      	adds	r3, r0, #1
 8005320:	d11e      	bne.n	8005360 <_malloc_r+0x74>
 8005322:	682c      	ldr	r4, [r5, #0]
 8005324:	0025      	movs	r5, r4
 8005326:	2d00      	cmp	r5, #0
 8005328:	d14a      	bne.n	80053c0 <_malloc_r+0xd4>
 800532a:	6823      	ldr	r3, [r4, #0]
 800532c:	0029      	movs	r1, r5
 800532e:	18e3      	adds	r3, r4, r3
 8005330:	0030      	movs	r0, r6
 8005332:	9301      	str	r3, [sp, #4]
 8005334:	f000 f880 	bl	8005438 <_sbrk_r>
 8005338:	9b01      	ldr	r3, [sp, #4]
 800533a:	4283      	cmp	r3, r0
 800533c:	d143      	bne.n	80053c6 <_malloc_r+0xda>
 800533e:	6823      	ldr	r3, [r4, #0]
 8005340:	3703      	adds	r7, #3
 8005342:	1aff      	subs	r7, r7, r3
 8005344:	2303      	movs	r3, #3
 8005346:	439f      	bics	r7, r3
 8005348:	3708      	adds	r7, #8
 800534a:	2f0c      	cmp	r7, #12
 800534c:	d200      	bcs.n	8005350 <_malloc_r+0x64>
 800534e:	270c      	movs	r7, #12
 8005350:	0039      	movs	r1, r7
 8005352:	0030      	movs	r0, r6
 8005354:	f7ff ffa8 	bl	80052a8 <sbrk_aligned>
 8005358:	1c43      	adds	r3, r0, #1
 800535a:	d034      	beq.n	80053c6 <_malloc_r+0xda>
 800535c:	6823      	ldr	r3, [r4, #0]
 800535e:	19df      	adds	r7, r3, r7
 8005360:	6027      	str	r7, [r4, #0]
 8005362:	e013      	b.n	800538c <_malloc_r+0xa0>
 8005364:	2b00      	cmp	r3, #0
 8005366:	dacb      	bge.n	8005300 <_malloc_r+0x14>
 8005368:	230c      	movs	r3, #12
 800536a:	2500      	movs	r5, #0
 800536c:	6033      	str	r3, [r6, #0]
 800536e:	0028      	movs	r0, r5
 8005370:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005372:	6822      	ldr	r2, [r4, #0]
 8005374:	1bd1      	subs	r1, r2, r7
 8005376:	d420      	bmi.n	80053ba <_malloc_r+0xce>
 8005378:	290b      	cmp	r1, #11
 800537a:	d917      	bls.n	80053ac <_malloc_r+0xc0>
 800537c:	19e2      	adds	r2, r4, r7
 800537e:	6027      	str	r7, [r4, #0]
 8005380:	42a3      	cmp	r3, r4
 8005382:	d111      	bne.n	80053a8 <_malloc_r+0xbc>
 8005384:	602a      	str	r2, [r5, #0]
 8005386:	6863      	ldr	r3, [r4, #4]
 8005388:	6011      	str	r1, [r2, #0]
 800538a:	6053      	str	r3, [r2, #4]
 800538c:	0030      	movs	r0, r6
 800538e:	0025      	movs	r5, r4
 8005390:	f000 f86c 	bl	800546c <__malloc_unlock>
 8005394:	2207      	movs	r2, #7
 8005396:	350b      	adds	r5, #11
 8005398:	1d23      	adds	r3, r4, #4
 800539a:	4395      	bics	r5, r2
 800539c:	1aea      	subs	r2, r5, r3
 800539e:	429d      	cmp	r5, r3
 80053a0:	d0e5      	beq.n	800536e <_malloc_r+0x82>
 80053a2:	1b5b      	subs	r3, r3, r5
 80053a4:	50a3      	str	r3, [r4, r2]
 80053a6:	e7e2      	b.n	800536e <_malloc_r+0x82>
 80053a8:	605a      	str	r2, [r3, #4]
 80053aa:	e7ec      	b.n	8005386 <_malloc_r+0x9a>
 80053ac:	6862      	ldr	r2, [r4, #4]
 80053ae:	42a3      	cmp	r3, r4
 80053b0:	d101      	bne.n	80053b6 <_malloc_r+0xca>
 80053b2:	602a      	str	r2, [r5, #0]
 80053b4:	e7ea      	b.n	800538c <_malloc_r+0xa0>
 80053b6:	605a      	str	r2, [r3, #4]
 80053b8:	e7e8      	b.n	800538c <_malloc_r+0xa0>
 80053ba:	0023      	movs	r3, r4
 80053bc:	6864      	ldr	r4, [r4, #4]
 80053be:	e7a7      	b.n	8005310 <_malloc_r+0x24>
 80053c0:	002c      	movs	r4, r5
 80053c2:	686d      	ldr	r5, [r5, #4]
 80053c4:	e7af      	b.n	8005326 <_malloc_r+0x3a>
 80053c6:	230c      	movs	r3, #12
 80053c8:	0030      	movs	r0, r6
 80053ca:	6033      	str	r3, [r6, #0]
 80053cc:	f000 f84e 	bl	800546c <__malloc_unlock>
 80053d0:	e7cd      	b.n	800536e <_malloc_r+0x82>
 80053d2:	46c0      	nop			; (mov r8, r8)
 80053d4:	200001e4 	.word	0x200001e4

080053d8 <_realloc_r>:
 80053d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053da:	0007      	movs	r7, r0
 80053dc:	000e      	movs	r6, r1
 80053de:	0014      	movs	r4, r2
 80053e0:	2900      	cmp	r1, #0
 80053e2:	d105      	bne.n	80053f0 <_realloc_r+0x18>
 80053e4:	0011      	movs	r1, r2
 80053e6:	f7ff ff81 	bl	80052ec <_malloc_r>
 80053ea:	0005      	movs	r5, r0
 80053ec:	0028      	movs	r0, r5
 80053ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80053f0:	2a00      	cmp	r2, #0
 80053f2:	d103      	bne.n	80053fc <_realloc_r+0x24>
 80053f4:	f7ff ff0e 	bl	8005214 <_free_r>
 80053f8:	0025      	movs	r5, r4
 80053fa:	e7f7      	b.n	80053ec <_realloc_r+0x14>
 80053fc:	f000 f83e 	bl	800547c <_malloc_usable_size_r>
 8005400:	9001      	str	r0, [sp, #4]
 8005402:	4284      	cmp	r4, r0
 8005404:	d803      	bhi.n	800540e <_realloc_r+0x36>
 8005406:	0035      	movs	r5, r6
 8005408:	0843      	lsrs	r3, r0, #1
 800540a:	42a3      	cmp	r3, r4
 800540c:	d3ee      	bcc.n	80053ec <_realloc_r+0x14>
 800540e:	0021      	movs	r1, r4
 8005410:	0038      	movs	r0, r7
 8005412:	f7ff ff6b 	bl	80052ec <_malloc_r>
 8005416:	1e05      	subs	r5, r0, #0
 8005418:	d0e8      	beq.n	80053ec <_realloc_r+0x14>
 800541a:	9b01      	ldr	r3, [sp, #4]
 800541c:	0022      	movs	r2, r4
 800541e:	429c      	cmp	r4, r3
 8005420:	d900      	bls.n	8005424 <_realloc_r+0x4c>
 8005422:	001a      	movs	r2, r3
 8005424:	0031      	movs	r1, r6
 8005426:	0028      	movs	r0, r5
 8005428:	f7ff fed7 	bl	80051da <memcpy>
 800542c:	0031      	movs	r1, r6
 800542e:	0038      	movs	r0, r7
 8005430:	f7ff fef0 	bl	8005214 <_free_r>
 8005434:	e7da      	b.n	80053ec <_realloc_r+0x14>
	...

08005438 <_sbrk_r>:
 8005438:	2300      	movs	r3, #0
 800543a:	b570      	push	{r4, r5, r6, lr}
 800543c:	4d06      	ldr	r5, [pc, #24]	; (8005458 <_sbrk_r+0x20>)
 800543e:	0004      	movs	r4, r0
 8005440:	0008      	movs	r0, r1
 8005442:	602b      	str	r3, [r5, #0]
 8005444:	f7fc fe60 	bl	8002108 <_sbrk>
 8005448:	1c43      	adds	r3, r0, #1
 800544a:	d103      	bne.n	8005454 <_sbrk_r+0x1c>
 800544c:	682b      	ldr	r3, [r5, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d000      	beq.n	8005454 <_sbrk_r+0x1c>
 8005452:	6023      	str	r3, [r4, #0]
 8005454:	bd70      	pop	{r4, r5, r6, pc}
 8005456:	46c0      	nop			; (mov r8, r8)
 8005458:	200001ec 	.word	0x200001ec

0800545c <__malloc_lock>:
 800545c:	b510      	push	{r4, lr}
 800545e:	4802      	ldr	r0, [pc, #8]	; (8005468 <__malloc_lock+0xc>)
 8005460:	f000 f814 	bl	800548c <__retarget_lock_acquire_recursive>
 8005464:	bd10      	pop	{r4, pc}
 8005466:	46c0      	nop			; (mov r8, r8)
 8005468:	200001f0 	.word	0x200001f0

0800546c <__malloc_unlock>:
 800546c:	b510      	push	{r4, lr}
 800546e:	4802      	ldr	r0, [pc, #8]	; (8005478 <__malloc_unlock+0xc>)
 8005470:	f000 f80d 	bl	800548e <__retarget_lock_release_recursive>
 8005474:	bd10      	pop	{r4, pc}
 8005476:	46c0      	nop			; (mov r8, r8)
 8005478:	200001f0 	.word	0x200001f0

0800547c <_malloc_usable_size_r>:
 800547c:	1f0b      	subs	r3, r1, #4
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	1f18      	subs	r0, r3, #4
 8005482:	2b00      	cmp	r3, #0
 8005484:	da01      	bge.n	800548a <_malloc_usable_size_r+0xe>
 8005486:	580b      	ldr	r3, [r1, r0]
 8005488:	18c0      	adds	r0, r0, r3
 800548a:	4770      	bx	lr

0800548c <__retarget_lock_acquire_recursive>:
 800548c:	4770      	bx	lr

0800548e <__retarget_lock_release_recursive>:
 800548e:	4770      	bx	lr

08005490 <_init>:
 8005490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005492:	46c0      	nop			; (mov r8, r8)
 8005494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005496:	bc08      	pop	{r3}
 8005498:	469e      	mov	lr, r3
 800549a:	4770      	bx	lr

0800549c <_fini>:
 800549c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800549e:	46c0      	nop			; (mov r8, r8)
 80054a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054a2:	bc08      	pop	{r3}
 80054a4:	469e      	mov	lr, r3
 80054a6:	4770      	bx	lr
